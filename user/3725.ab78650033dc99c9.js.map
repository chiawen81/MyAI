{"version":3,"file":"3725.ab78650033dc99c9.js","mappings":"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","names":["regexp","Object","freeze","displayName","fileTypes","name","patterns","include","repository","codetags","captures","match","comment","begin","beginCaptures","end","endCaptures","scopeName","aliases"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/shiki/dist/langs/regexp.mjs"],"sourcesContent":["const lang = Object.freeze({ \"displayName\": \"RegExp\", \"fileTypes\": [\"re\"], \"name\": \"regexp\", \"patterns\": [{ \"include\": \"#regexp-expression\" }], \"repository\": { \"codetags\": { \"captures\": { \"1\": { \"name\": \"keyword.codetag.notation.python\" } }, \"match\": \"(?:\\\\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\\\\b)\" }, \"fregexp-base-expression\": { \"patterns\": [{ \"include\": \"#fregexp-quantifier\" }, { \"include\": \"#fstring-formatting-braces\" }, { \"match\": \"\\\\{.*?\\\\}\" }, { \"include\": \"#regexp-base-common\" }] }, \"fregexp-quantifier\": { \"match\": \"(?x)\\n\\\\{\\\\{(\\n\\\\d+ | \\\\d+,(\\\\d+)? | ,\\\\d+\\n)\\\\}\\\\}\\n\", \"name\": \"keyword.operator.quantifier.regexp\" }, \"fstring-formatting-braces\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"constant.character.format.placeholder.other.python\" }, \"2\": { \"name\": \"invalid.illegal.brace.python\" }, \"3\": { \"name\": \"constant.character.format.placeholder.other.python\" } }, \"comment\": \"empty braces are illegal\", \"match\": \"({)(\\\\s*?)(})\" }, { \"match\": \"({{|}})\", \"name\": \"constant.character.escape.python\" }] }, \"regexp-backreference\": { \"captures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.begin.regexp\" }, \"2\": { \"name\": \"entity.name.tag.named.backreference.regexp\" }, \"3\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.end.regexp\" } }, \"match\": \"(?x)\\n(\\\\()  (\\\\?P= \\\\w+(?:\\\\s+[[:alnum:]]+)?)  (\\\\))\\n\", \"name\": \"meta.backreference.named.regexp\" }, \"regexp-backreference-number\": { \"captures\": { \"1\": { \"name\": \"entity.name.tag.backreference.regexp\" } }, \"match\": \"(\\\\\\\\[1-9]\\\\d?)\", \"name\": \"meta.backreference.regexp\" }, \"regexp-base-common\": { \"patterns\": [{ \"match\": \"\\\\.\", \"name\": \"support.other.match.any.regexp\" }, { \"match\": \"\\\\^\", \"name\": \"support.other.match.begin.regexp\" }, { \"match\": \"\\\\$\", \"name\": \"support.other.match.end.regexp\" }, { \"match\": \"[+*?]\\\\??\", \"name\": \"keyword.operator.quantifier.regexp\" }, { \"match\": \"\\\\|\", \"name\": \"keyword.operator.disjunction.regexp\" }, { \"include\": \"#regexp-escape-sequence\" }] }, \"regexp-base-expression\": { \"patterns\": [{ \"include\": \"#regexp-quantifier\" }, { \"include\": \"#regexp-base-common\" }] }, \"regexp-character-set\": { \"patterns\": [{ \"match\": \"(?x)\\n\\\\[ \\\\^? \\\\] (?! .*?\\\\])\\n\" }, { \"begin\": \"(\\\\[)(\\\\^)?(\\\\])?\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.character.set.begin.regexp constant.other.set.regexp\" }, \"2\": { \"name\": \"keyword.operator.negation.regexp\" }, \"3\": { \"name\": \"constant.character.set.regexp\" } }, \"end\": \"(\\\\])\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.character.set.end.regexp constant.other.set.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"meta.character.set.regexp\", \"patterns\": [{ \"include\": \"#regexp-charecter-set-escapes\" }, { \"match\": \"[^\\\\n]\", \"name\": \"constant.character.set.regexp\" }] }] }, \"regexp-charecter-set-escapes\": { \"patterns\": [{ \"match\": \"\\\\\\\\[abfnrtv\\\\\\\\]\", \"name\": \"constant.character.escape.regexp\" }, { \"include\": \"#regexp-escape-special\" }, { \"match\": \"\\\\\\\\([0-7]{1,3})\", \"name\": \"constant.character.escape.regexp\" }, { \"include\": \"#regexp-escape-character\" }, { \"include\": \"#regexp-escape-unicode\" }, { \"include\": \"#regexp-escape-catchall\" }] }, \"regexp-comments\": { \"begin\": \"\\\\(\\\\?#\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.comment.begin.regexp\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.comment.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"comment.regexp\", \"patterns\": [{ \"include\": \"#codetags\" }] }, \"regexp-conditional\": { \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.conditional.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.conditional.begin.regexp\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#regexp-expression\" }] }, \"regexp-escape-catchall\": { \"match\": \"\\\\\\\\(.|\\\\n)\", \"name\": \"constant.character.escape.regexp\" }, \"regexp-escape-character\": { \"match\": \"(?x)\\n\\\\\\\\ (\\nx[0-9A-Fa-f]{2}\\n| 0[0-7]{1,2}\\n| [0-7]{3}\\n)\\n\", \"name\": \"constant.character.escape.regexp\" }, \"regexp-escape-sequence\": { \"patterns\": [{ \"include\": \"#regexp-escape-special\" }, { \"include\": \"#regexp-escape-character\" }, { \"include\": \"#regexp-escape-unicode\" }, { \"include\": \"#regexp-backreference-number\" }, { \"include\": \"#regexp-escape-catchall\" }] }, \"regexp-escape-special\": { \"match\": \"\\\\\\\\([AbBdDsSwWZ])\", \"name\": \"support.other.escape.special.regexp\" }, \"regexp-escape-unicode\": { \"match\": \"(?x)\\n\\\\\\\\ (\\nu[0-9A-Fa-f]{4}\\n| U[0-9A-Fa-f]{8}\\n)\\n\", \"name\": \"constant.character.unicode.regexp\" }, \"regexp-expression\": { \"patterns\": [{ \"include\": \"#regexp-base-expression\" }, { \"include\": \"#regexp-character-set\" }, { \"include\": \"#regexp-comments\" }, { \"include\": \"#regexp-flags\" }, { \"include\": \"#regexp-named-group\" }, { \"include\": \"#regexp-backreference\" }, { \"include\": \"#regexp-lookahead\" }, { \"include\": \"#regexp-lookahead-negative\" }, { \"include\": \"#regexp-lookbehind\" }, { \"include\": \"#regexp-lookbehind-negative\" }, { \"include\": \"#regexp-conditional\" }, { \"include\": \"#regexp-parentheses-non-capturing\" }, { \"include\": \"#regexp-parentheses\" }] }, \"regexp-flags\": { \"match\": \"\\\\(\\\\?[aiLmsux]+\\\\)\", \"name\": \"storage.modifier.flag.regexp\" }, \"regexp-lookahead\": { \"begin\": \"(\\\\()\\\\?=\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookahead.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#regexp-expression\" }] }, \"regexp-lookahead-negative\": { \"begin\": \"(\\\\()\\\\?!\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookahead.negative.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#regexp-expression\" }] }, \"regexp-lookbehind\": { \"begin\": \"(\\\\()\\\\?<=\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookbehind.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#regexp-expression\" }] }, \"regexp-lookbehind-negative\": { \"begin\": \"(\\\\()\\\\?<!\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.lookbehind.negative.regexp\" }, \"1\": { \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#regexp-expression\" }] }, \"regexp-named-group\": { \"begin\": \"(?x)\\n(\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\", \"beginCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\" }, \"2\": { \"name\": \"entity.name.tag.named.group.regexp\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"name\": \"meta.named.regexp\", \"patterns\": [{ \"include\": \"#regexp-expression\" }] }, \"regexp-parentheses\": { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#regexp-expression\" }] }, \"regexp-parentheses-non-capturing\": { \"begin\": \"\\\\(\\\\?:\", \"beginCaptures\": { \"0\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\" }, \"2\": { \"name\": \"invalid.illegal.newline.python\" } }, \"patterns\": [{ \"include\": \"#regexp-expression\" }] }, \"regexp-quantifier\": { \"match\": \"(?x)\\n\\\\{(\\n\\\\d+ | \\\\d+,(\\\\d+)? | ,\\\\d+\\n)\\\\}\\n\", \"name\": \"keyword.operator.quantifier.regexp\" } }, \"scopeName\": \"source.regexp.python\", \"aliases\": [\"regex\"] });\nvar regexp = [\n  lang\n];\n\nexport { regexp as default };\n"],"x_google_ignoreList":[0]}