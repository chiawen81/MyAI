{"version":3,"file":"4049.2221c400f0906168.js","mappings":"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","names":["matlab","Object","freeze","displayName","fileTypes","name","patterns","comment","include","repository","all_after_command_dual","all_before_command_dual","blocks","begin","beginCaptures","end","endCaptures","captures","match","braced_validator_list","classdef","command_dual","comment_block","comments","contentName","conjugate_transpose","constants","control_statements","curly_brackets","end_in_parens","function","global_persistent","indexing_curly_brackets","Comment","line_continuation","numbers","operators","parens","square_brackets","string","transpose","validator_strings","validators","variables","scopeName"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/shiki/dist/langs/matlab.mjs"],"sourcesContent":["const lang = Object.freeze({ \"displayName\": \"MATLAB\", \"fileTypes\": [\"m\"], \"name\": \"matlab\", \"patterns\": [{ \"comment\": \"This and #all_after_command_dual are split out so #command_dual can be excluded in things like (), {}, []\", \"include\": \"#all_before_command_dual\" }, { \"include\": \"#command_dual\" }, { \"include\": \"#all_after_command_dual\" }], \"repository\": { \"all_after_command_dual\": { \"patterns\": [{ \"include\": \"#string\" }, { \"include\": \"#line_continuation\" }, { \"include\": \"#comments\" }, { \"include\": \"#conjugate_transpose\" }, { \"include\": \"#transpose\" }, { \"include\": \"#constants\" }, { \"include\": \"#variables\" }, { \"include\": \"#numbers\" }, { \"include\": \"#operators\" }] }, \"all_before_command_dual\": { \"patterns\": [{ \"include\": \"#classdef\" }, { \"include\": \"#function\" }, { \"include\": \"#blocks\" }, { \"include\": \"#control_statements\" }, { \"include\": \"#global_persistent\" }, { \"include\": \"#parens\" }, { \"include\": \"#square_brackets\" }, { \"include\": \"#indexing_curly_brackets\" }, { \"include\": \"#curly_brackets\" }] }, \"blocks\": { \"patterns\": [{ \"begin\": \"\\\\s*(?:^|[\\\\s,;])(for)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.for.matlab\" } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.for.matlab\" } }, \"name\": \"meta.for.matlab\", \"patterns\": [{ \"include\": \"$self\" }] }, { \"begin\": \"\\\\s*(?:^|[\\\\s,;])(if)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.if.matlab\" } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.if.matlab\" }, \"2\": { \"patterns\": [{ \"include\": \"$self\" }] } }, \"name\": \"meta.if.matlab\", \"patterns\": [{ \"captures\": { \"2\": { \"name\": \"keyword.control.elseif.matlab\" }, \"3\": { \"patterns\": [{ \"include\": \"$self\" }] } }, \"end\": \"^\", \"match\": \"(\\\\s*)(?:^|[\\\\s,;])(elseif)\\\\b(.*)$\\\\n?\", \"name\": \"meta.elseif.matlab\" }, { \"captures\": { \"2\": { \"name\": \"keyword.control.else.matlab\" }, \"3\": { \"patterns\": [{ \"include\": \"$self\" }] } }, \"end\": \"^\", \"match\": \"(\\\\s*)(?:^|[\\\\s,;])(else)\\\\b(.*)?$\\\\n?\", \"name\": \"meta.else.matlab\" }, { \"include\": \"$self\" }] }, { \"begin\": \"\\\\s*(?:^|[\\\\s,;])(parfor)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.for.matlab\" } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.for.matlab\" } }, \"name\": \"meta.parfor.matlab\", \"patterns\": [{ \"begin\": \"\\\\G(?!$)\", \"end\": \"$\\\\n?\", \"name\": \"meta.parfor-quantity.matlab\", \"patterns\": [{ \"include\": \"$self\" }] }, { \"include\": \"$self\" }] }, { \"begin\": \"\\\\s*(?:^|[\\\\s,;])(spmd)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.spmd.matlab\" } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.spmd.matlab\" } }, \"name\": \"meta.spmd.matlab\", \"patterns\": [{ \"begin\": \"\\\\G(?!$)\", \"end\": \"$\\\\n?\", \"name\": \"meta.spmd-statement.matlab\", \"patterns\": [{ \"include\": \"$self\" }] }, { \"include\": \"$self\" }] }, { \"begin\": \"\\\\s*(?:^|[\\\\s,;])(switch)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.switch.matlab\" } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.switch.matlab\" } }, \"name\": \"meta.switch.matlab\", \"patterns\": [{ \"captures\": { \"2\": { \"name\": \"keyword.control.case.matlab\" }, \"3\": { \"patterns\": [{ \"include\": \"$self\" }] } }, \"end\": \"^\", \"match\": \"(\\\\s*)(?:^|[\\\\s,;])(case)\\\\b(.*)$\\\\n?\", \"name\": \"meta.case.matlab\" }, { \"captures\": { \"2\": { \"name\": \"keyword.control.otherwise.matlab\" }, \"3\": { \"patterns\": [{ \"include\": \"$self\" }] } }, \"end\": \"^\", \"match\": \"(\\\\s*)(?:^|[\\\\s,;])(otherwise)\\\\b(.*)?$\\\\n?\", \"name\": \"meta.otherwise.matlab\" }, { \"include\": \"$self\" }] }, { \"begin\": \"\\\\s*(?:^|[\\\\s,;])(try)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.try.matlab\" } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.try.matlab\" } }, \"name\": \"meta.try.matlab\", \"patterns\": [{ \"captures\": { \"2\": { \"name\": \"keyword.control.catch.matlab\" }, \"3\": { \"patterns\": [{ \"include\": \"$self\" }] } }, \"end\": \"^\", \"match\": \"(\\\\s*)(?:^|[\\\\s,;])(catch)\\\\b(.*)?$\\\\n?\", \"name\": \"meta.catch.matlab\" }, { \"include\": \"$self\" }] }, { \"begin\": \"\\\\s*(?:^|[\\\\s,;])(while)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.while.matlab\" } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.while.matlab\" } }, \"name\": \"meta.while.matlab\", \"patterns\": [{ \"include\": \"$self\" }] }] }, \"braced_validator_list\": { \"begin\": \"\\\\s*({)\\\\s*\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.matlab\" } }, \"comment\": \"Validator functions. Treated as a recursive group to permit nested brackets, quotes, etc.\", \"end\": \"(})\", \"endCaptures\": { \"1\": { \"name\": \"storage.type.matlab\" } }, \"patterns\": [{ \"include\": \"#braced_validator_list\" }, { \"include\": \"#validator_strings\" }, { \"include\": \"#line_continuation\" }, { \"captures\": { \"1\": { \"name\": \"storage.type.matlab\" } }, \"match\": `([^{}}'\"\\\\.]+)` }, { \"match\": \"\\\\.\", \"name\": \"storage.type.matlab\" }] }, \"classdef\": { \"patterns\": [{ \"begin\": \"(?x)\\n(^\\\\s*)\\n(classdef)\\n\\\\b\\\\s*\\n(.*)\\n\", \"beginCaptures\": { \"2\": { \"name\": \"storage.type.class.matlab\" }, \"3\": { \"patterns\": [{ \"captures\": { \"1\": { \"patterns\": [{ \"match\": \"[a-zA-Z][a-zA-Z0-9_]*\", \"name\": \"variable.parameter.class.matlab\" }, { \"begin\": \"=\\\\s*\", \"end\": \",|(?=\\\\))\", \"patterns\": [{ \"match\": \"true|false\", \"name\": \"constant.language.boolean.matlab\" }, { \"include\": \"#string\" }] }] }, \"2\": { \"name\": \"meta.class-declaration.matlab\" }, \"3\": { \"name\": \"entity.name.section.class.matlab\" }, \"4\": { \"name\": \"keyword.operator.other.matlab\" }, \"5\": { \"patterns\": [{ \"match\": \"[a-zA-Z][a-zA-Z0-9_]*(\\\\.[a-zA-Z][a-zA-Z0-9_]*)*\", \"name\": \"entity.other.inherited-class.matlab\" }, { \"match\": \"&\", \"name\": \"keyword.operator.other.matlab\" }] }, \"6\": { \"patterns\": [{ \"include\": \"$self\" }] } }, \"match\": \"(?x)\\n\t\t\t\t\t\t\t\t\t\t(\t\t\t\t\t\t\t\t\t# Optional attributes\\n\t\t\t\t\t\t\t\t\t\t\t \\\\( [^)]* \\\\)\\n\t\t\t\t\t\t\t\t\t\t)?\\n\t\t\t\t\t\t\t\t\t\t\\\\s*\\n\t\t\t\t\t\t\t\t\t\t(\\n\t\t\t\t\t\t\t\t\t\t\t([a-zA-Z][a-zA-Z0-9_]*)\t\t\t# Class name\\n\t\t\t\t\t\t\t\t\t\t\t(?:\t\t\t\t\t\t\t\t# Optional inheritance\\n\t\t\t\t\t\t\t\t\t\t\t\t\\\\s*\\n\t\t\t\t\t\t\t\t\t\t\t\t(<)\\n\t\t\t\t\t\t\t\t\t\t\t\t\\\\s*\\n\t\t\t\t\t\t\t\t\t\t\t\t([^%]*)\\n\t\t\t\t\t\t\t\t\t\t\t)?\\n\t\t\t\t\t\t\t\t\t\t)\\n\t\t\t\t\t\t\t\t\t\t\\\\s*($|(?=(%|...)).*)\\n\t\t\t\t\t\t\t\t\t\" }] } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.class.matlab\" } }, \"name\": \"meta.class.matlab\", \"patterns\": [{ \"begin\": \"(?x)\\n(^\\\\s*)\\n(properties)\\\\b([^%]*)\\n\\\\s*\\n(\\n\\\\( [^)]* \\\\)\\n)?\\n\\\\s*($|(?=%))\\n\", \"beginCaptures\": { \"2\": { \"name\": \"keyword.control.properties.matlab\" }, \"3\": { \"patterns\": [{ \"match\": \"[a-zA-Z][a-zA-Z0-9_]*\", \"name\": \"variable.parameter.properties.matlab\" }, { \"begin\": \"=\\\\s*\", \"end\": \",|(?=\\\\))\", \"patterns\": [{ \"match\": \"true|false\", \"name\": \"constant.language.boolean.matlab\" }, { \"match\": \"public|protected|private\", \"name\": \"constant.language.access.matlab\" }] }] } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.properties.matlab\" } }, \"name\": \"meta.properties.matlab\", \"patterns\": [{ \"include\": \"#validators\" }, { \"include\": \"$self\" }] }, { \"begin\": \"(?x)\\n(^\\\\s*)\\n(methods)\\\\b([^%]*)\\n\\\\s*\\n(\\n\\\\( [^)]* \\\\)\\n)?\\n\\\\s*($|(?=%))\\n\", \"beginCaptures\": { \"2\": { \"name\": \"keyword.control.methods.matlab\" }, \"3\": { \"patterns\": [{ \"match\": \"[a-zA-Z][a-zA-Z0-9_]*\", \"name\": \"variable.parameter.methods.matlab\" }, { \"begin\": \"=\\\\s*\", \"end\": \",|(?=\\\\))\", \"patterns\": [{ \"match\": \"true|false\", \"name\": \"constant.language.boolean.matlab\" }, { \"match\": \"public|protected|private\", \"name\": \"constant.language.access.matlab\" }] }] } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.methods.matlab\" } }, \"name\": \"meta.methods.matlab\", \"patterns\": [{ \"include\": \"$self\" }] }, { \"begin\": \"(?x)\\n(^\\\\s*)\\n(events)\\\\b([^%]*)\\n\\\\s*\\n(\\n\\\\( [^)]* \\\\)\\n)?\\n\\\\s*($|(?=%))\\n\", \"beginCaptures\": { \"2\": { \"name\": \"keyword.control.events.matlab\" }, \"3\": { \"patterns\": [{ \"match\": \"[a-zA-Z][a-zA-Z0-9_]*\", \"name\": \"variable.parameter.events.matlab\" }, { \"begin\": \"=\\\\s*\", \"end\": \",|(?=\\\\))\", \"patterns\": [{ \"match\": \"true|false\", \"name\": \"constant.language.boolean.matlab\" }, { \"match\": \"public|protected|private\", \"name\": \"constant.language.access.matlab\" }] }] } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.events.matlab\" } }, \"name\": \"meta.events.matlab\", \"patterns\": [{ \"include\": \"$self\" }] }, { \"begin\": \"(?x)\\n(^\\\\s*)\\n(enumeration)\\\\b([^%]*)\\n\\\\s*($|(?=%))\\n\", \"beginCaptures\": { \"2\": { \"name\": \"keyword.control.enumeration.matlab\" } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.enumeration.matlab\" } }, \"name\": \"meta.enumeration.matlab\", \"patterns\": [{ \"include\": \"$self\" }] }, { \"include\": \"$self\" }] }] }, \"command_dual\": { \"captures\": { \"1\": { \"name\": \"string.interpolated.matlab\" }, \"2\": { \"name\": \"variable.other.command.matlab\" }, \"28\": { \"name\": \"comment.line.percentage.matlab\" } }, \"comment\": \"  1        2                                  3                                                    4                                                  5                                                    6                                                         7                                                                             8                 9                            10                   11                      12                         13                   14                                                               1516       17                                                             18                                                                                                                               19                      20                                     21                                    22                                      23                                         24                                         25                                                                         26            27                 28\", \"match\": `^\\\\s*((?# A> )([b-df-hk-moq-zA-HJ-MO-Z]\\\\w*|a|an|a([A-Za-mo-z0-9_]\\\\w*|n[A-Za-rt-z0-9_]\\\\w*|ns\\\\w+)|e|ep|e([A-Za-oq-z0-9_]\\\\w*|p[A-Za-rt-z0-9_]\\\\w*|ps\\\\w+)|in|i([A-Za-mo-z0-9_]\\\\w*|n[A-Za-eg-z0-9_]\\\\w*|nf\\\\w+)|I|In|I([A-Za-mo-z0-9_]\\\\w*|n[A-Za-eg-z0-9_]\\\\w*|nf\\\\w+)|j\\\\w+|N|Na|N([A-Zb-z0-9_]\\\\w*|a[A-MO-Za-z0-9_]\\\\w*|aN\\\\w+)|n|na|nar|narg|nargi|nargo|nargou|n([A-Zb-z0-9_]\\\\w*|a([A-Za-mo-qs-z0-9_]\\\\w*|n\\\\w+|r([A-Za-fh-z0-9_]\\\\w*|g([A-Za-hj-nq-z0-9_]\\\\w*|i([A-Za-mo-z0-9_]\\\\w*|n\\\\w+)|o([A-Za-tv-z0-9_]\\\\w*|u([A-Za-su-z]\\\\w*|t\\\\w+))))))|p|p[A-Za-hj-z0-9_]\\\\w*|pi\\\\w+)(?# <A )\\\\s+(((?# B> )([^\\\\s;,%()=.{&|~<>:+\\\\-*/\\\\\\\\@^'\"]|(?=')|(?=\"))(?# <B )|(?# C> )(\\\\.\\\\^|\\\\.\\\\*|\\\\./|\\\\.\\\\\\\\|\\\\.'|\\\\.\\\\(|&&|==|\\\\|\\\\||&(?=[^&])|\\\\|(?=[^\\\\|])|~=|<=|>=|~(?!=)|<(?!=)|>(?!=)|:|\\\\+|-|\\\\*|/|\\\\\\\\|@|\\\\^)(?# <C )(?# D> )([^\\\\s]|\\\\s*(?=%)|\\\\s+$|\\\\s+(,|;|\\\\)|}|\\\\]|&|\\\\||<|>|=|:|\\\\*|/|\\\\\\\\|\\\\^|@|(\\\\.[^\\\\d.]|\\\\.\\\\.[^.])))(?# <D )|(?# E> )(\\\\.[^^*/\\\\\\\\'(\\\\sA-Za-z])(?# <E ))(?# F> )([^%]|'[^']*'|\"[^\"]*\")*(?# <F )|(?# X> )(\\\\.(?=\\\\s)|\\\\.[A-Za-z]|(?={))(?# <X )(?# Y> )([^(=\\\\'\"%]|==|'[^']*'|\"[^\"]*\"|\\\\(|\\\\([^)%]*\\\\)|\\\\[|\\\\[[^\\\\]%]*\\\\]|{|{[^}%]*})*(\\\\.\\\\.\\\\.[^%]*)?((?=%)|$)(?# <Y )))(%.*)?$` }, \"comment_block\": { \"begin\": \"(^[\\\\s]*)%\\\\{[^\\\\n\\\\S]*+\\\\n\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.definition.comment.matlab\" } }, \"end\": \"^[\\\\s]*%\\\\}[^\\\\n\\\\S]*+(?:\\\\n|$)\", \"name\": \"comment.block.percentage.matlab\", \"patterns\": [{ \"include\": \"#comment_block\" }, { \"match\": \"^[^\\\\n]*\\\\n\" }] }, \"comments\": { \"patterns\": [{ \"begin\": \"(^[ \\\\t]+)?(?=%%\\\\s)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.whitespace.comment.leading.matlab\" } }, \"end\": \"(?!\\\\G)\", \"patterns\": [{ \"begin\": \"%%\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.comment.matlab\" } }, \"end\": \"\\\\n\", \"name\": \"comment.line.double-percentage.matlab\", \"patterns\": [{ \"begin\": \"\\\\G[^\\\\S\\\\n]*(?![\\\\n\\\\s])\", \"contentName\": \"meta.cell.matlab\", \"end\": \"(?=\\\\n)\" }] }] }, { \"include\": \"#comment_block\" }, { \"begin\": \"(^[ \\\\t]+)?(?=%)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.whitespace.comment.leading.matlab\" } }, \"end\": \"(?!\\\\G)\", \"patterns\": [{ \"begin\": \"%\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.comment.matlab\" } }, \"end\": \"\\\\n\", \"name\": \"comment.line.percentage.matlab\" }] }] }, \"conjugate_transpose\": { \"match\": \"((?<=[^\\\\s])|(?<=\\\\])|(?<=\\\\))|(?<=\\\\}))'\", \"name\": \"keyword.operator.transpose.matlab\" }, \"constants\": { \"comment\": \"MATLAB Constants\", \"match\": \"(?<!\\\\.)\\\\b(eps|false|Inf|inf|intmax|intmin|namelengthmax|NaN|nan|on|off|realmax|realmin|true|pi)\\\\b\", \"name\": \"constant.language.matlab\" }, \"control_statements\": { \"captures\": { \"1\": { \"name\": \"keyword.control.matlab\" } }, \"match\": \"\\\\s*(?:^|[\\\\s,;])(break|continue|return)\\\\b\", \"name\": \"meta.control.matlab\" }, \"curly_brackets\": { \"begin\": \"\\\\{\", \"comment\": \"We don't include $self here to avoid matching command syntax inside (), [], {}\", \"end\": \"\\\\}\", \"patterns\": [{ \"include\": \"#end_in_parens\" }, { \"include\": \"#all_before_command_dual\" }, { \"include\": \"#all_after_command_dual\" }, { \"include\": \"#end_in_parens\" }, { \"comment\": \"These block keywords pick up any such missed keywords when the block matching for things like (), if-end, etc. don't work. Useful for when someone has partially written\", \"include\": \"#block_keywords\" }] }, \"end_in_parens\": { \"comment\": \"end as operator symbol\", \"match\": \"\\\\bend\\\\b\", \"name\": \"keyword.operator.symbols.matlab\" }, \"function\": { \"patterns\": [{ \"begin\": \"(?x)\\n(^\\\\s*)\\n(function)\\n\\\\s+\\n(?:\\n(?:\\n(\\\\[) ([^\\\\]]*) (\\\\])\\n| ([a-zA-Z][a-zA-Z0-9_]*)\\n)\\n\\\\s* = \\\\s*\\n)?\\n([a-zA-Z][a-zA-Z0-9_]*(\\\\.[a-zA-Z][a-zA-Z0-9_]*)*)\\n\\\\s*\\n\", \"beginCaptures\": { \"2\": { \"name\": \"storage.type.function.matlab\" }, \"3\": { \"name\": \"punctuation.definition.arguments.begin.matlab\" }, \"4\": { \"patterns\": [{ \"match\": \"\\\\w+\", \"name\": \"variable.parameter.output.matlab\" }] }, \"5\": { \"name\": \"punctuation.definition.arguments.end.matlab\" }, \"6\": { \"name\": \"variable.parameter.output.function.matlab\" }, \"7\": { \"name\": \"entity.name.function.matlab\" } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b(\\\\s*\\\\n)?\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.function.matlab\" } }, \"name\": \"meta.function.matlab\", \"patterns\": [{ \"begin\": \"\\\\G\\\\(\", \"end\": \"\\\\)\", \"name\": \"meta.arguments.function.matlab\", \"patterns\": [{ \"include\": \"#line_continuation\" }, { \"match\": \"\\\\w+\", \"name\": \"variable.parameter.input.matlab\" }] }, { \"begin\": \"(?x)\\n(^\\\\s*)\\n(arguments)\\\\b([^%]*)\\n\\\\s*\\n(\\n\\\\( [^)]* \\\\)\\n)?\\n\\\\s*($|(?=%))\\n\", \"beginCaptures\": { \"2\": { \"name\": \"keyword.control.arguments.matlab\" }, \"3\": { \"patterns\": [{ \"match\": \"[a-zA-Z][a-zA-Z0-9_]*\", \"name\": \"variable.parameter.arguments.matlab\" }] } }, \"end\": \"\\\\s*(?:^|[\\\\s,;])(end)\\\\b\", \"endCaptures\": { \"1\": { \"name\": \"keyword.control.end.arguments.matlab\" } }, \"name\": \"meta.arguments.matlab\", \"patterns\": [{ \"include\": \"#validators\" }, { \"include\": \"$self\" }] }, { \"include\": \"$self\" }] }] }, \"global_persistent\": { \"captures\": { \"1\": { \"name\": \"keyword.control.globalpersistent.matlab\" } }, \"match\": \"^\\\\s*(global|persistent)\\\\b\", \"name\": \"meta.globalpersistent.matlab\" }, \"indexing_curly_brackets\": { \"Comment\": \"Match identifier{idx, idx, } and stop at newline without ... This helps with partially written code like x{idx \", \"begin\": \"([a-zA-Z][a-zA-Z0-9_\\\\.]*\\\\s*)\\\\{\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"include\": \"$self\" }] } }, \"comment\": \"We don't include $self here to avoid matching command syntax inside (), [], {}\", \"end\": \"(\\\\}|(?<!\\\\.\\\\.\\\\.).\\\\n)\", \"patterns\": [{ \"include\": \"#end_in_parens\" }, { \"include\": \"#all_before_command_dual\" }, { \"include\": \"#all_after_command_dual\" }, { \"include\": \"#end_in_parens\" }, { \"comment\": \"These block keywords pick up any such missed keywords when the block matching for things like (), if-end, etc. don't work. Useful for when someone has partially written\", \"include\": \"#block_keywords\" }] }, \"line_continuation\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.symbols.matlab\" }, \"2\": { \"name\": \"comment.line.continuation.matlab\" } }, \"comment\": \"Line continuations\", \"match\": \"(\\\\.\\\\.\\\\.)(.*)$\", \"name\": \"meta.linecontinuation.matlab\" }, \"numbers\": { \"comment\": \"Valid numbers: 1, .1, 1.1, .1e1, 1.1e1, 1e1, 1i, 1j, 1e2j\", \"match\": \"(?<=[\\\\s\\\\-\\\\+\\\\*\\\\/\\\\\\\\=:\\\\[\\\\(\\\\{,]|^)\\\\d*\\\\.?\\\\d+([eE][+-]?\\\\d)?([0-9&&[^\\\\.]])*(i|j)?\\\\b\", \"name\": \"constant.numeric.matlab\" }, \"operators\": { \"comment\": \"Operator symbols\", \"match\": \"(?<=\\\\s)(==|~=|>|>=|<|<=|&|&&|:|\\\\||\\\\|\\\\||\\\\+|-|\\\\*|\\\\.\\\\*|/|\\\\./|\\\\\\\\|\\\\.\\\\\\\\|\\\\^|\\\\.\\\\^)(?=\\\\s)\", \"name\": \"keyword.operator.symbols.matlab\" }, \"parens\": { \"begin\": \"\\\\(\", \"comment\": \"We don't include $self here to avoid matching command syntax inside (), [], {}\", \"end\": \"(\\\\)|(?<!\\\\.\\\\.\\\\.).\\\\n)\", \"patterns\": [{ \"include\": \"#end_in_parens\" }, { \"include\": \"#all_before_command_dual\" }, { \"include\": \"#all_after_command_dual\" }, { \"comment\": \"These block keywords pick up any such missed keywords when the block matching for things like (), if-end, etc. don't work. Useful for when someone has partially written\", \"include\": \"#block_keywords\" }] }, \"square_brackets\": { \"begin\": \"\\\\[\", \"comment\": \"We don't include $self here to avoid matching command syntax inside (), [], {}\", \"end\": \"\\\\]\", \"patterns\": [{ \"include\": \"#all_before_command_dual\" }, { \"include\": \"#all_after_command_dual\" }, { \"comment\": \"These block keywords pick up any such missed keywords when the block matching for things like (), if-end, etc. don't work. Useful for when someone has partially written\", \"include\": \"#block_keywords\" }] }, \"string\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"string.interpolated.matlab\" }, \"2\": { \"name\": \"punctuation.definition.string.begin.matlab\" } }, \"comment\": \"Shell command\", \"match\": \"^\\\\s*((!).*$\\\\n?)\" }, { \"begin\": \"((?<=(\\\\[|\\\\(|\\\\{|=|\\\\s|;|:|,|~|<|>|&|\\\\||-|\\\\+|\\\\*|/|\\\\\\\\|\\\\.|\\\\^))|^)'\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.matlab\" } }, \"comment\": \"Character vector literal (single-quoted)\", \"end\": \"'(?=(\\\\[|\\\\(|\\\\{|\\\\]|\\\\)|\\\\}|=|~|<|>|&|\\\\||-|\\\\+|\\\\*|/|\\\\\\\\|\\\\.|\\\\^|\\\\s|;|:|,))\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.matlab\" } }, \"name\": \"string.quoted.single.matlab\", \"patterns\": [{ \"match\": \"''\", \"name\": \"constant.character.escape.matlab\" }, { \"match\": \"'(?=.)\", \"name\": \"invalid.illegal.unescaped-quote.matlab\" }, { \"comment\": \"Operator symbols\", \"match\": \"((\\\\%([\\\\+\\\\-0]?\\\\d{0,3}(\\\\.\\\\d{1,3})?)(c|d|e|E|f|g|G|s|((b|t)?(o|u|x|X))))|\\\\%\\\\%|\\\\\\\\(b|f|n|r|t|\\\\\\\\))\", \"name\": \"constant.character.escape.matlab\" }] }, { \"begin\": '((?<=(\\\\[|\\\\(|\\\\{|=|\\\\s|;|:|,|~|<|>|&|\\\\||-|\\\\+|\\\\*|/|\\\\\\\\|\\\\.|\\\\^))|^)\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.matlab\" } }, \"comment\": \"String literal (double-quoted)\", \"end\": '\"(?=(\\\\[|\\\\(|\\\\{|\\\\]|\\\\)|\\\\}|=|~|<|>|&|\\\\||-|\\\\+|\\\\*|/|\\\\\\\\|\\\\.|\\\\^|\\\\||\\\\s|;|:|,))', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.matlab\" } }, \"name\": \"string.quoted.double.matlab\", \"patterns\": [{ \"match\": '\"\"', \"name\": \"constant.character.escape.matlab\" }, { \"match\": '\"(?=.)', \"name\": \"invalid.illegal.unescaped-quote.matlab\" }] }] }, \"transpose\": { \"match\": \"\\\\.'\", \"name\": \"keyword.operator.transpose.matlab\" }, \"validator_strings\": { \"comment\": \"Simplified string patterns nested inside validator functions which don't change scopes of matches.\", \"patterns\": [{ \"patterns\": [{ \"begin\": \"((?<=(\\\\[|\\\\(|\\\\{|=|\\\\s|;|:|,|~|<|>|&|\\\\||-|\\\\+|\\\\*|/|\\\\\\\\|\\\\.|\\\\^))|^)'\", \"comment\": \"Character vector literal (single-quoted)\", \"end\": \"'(?=(\\\\[|\\\\(|\\\\{|\\\\]|\\\\)|\\\\}|=|~|<|>|&|\\\\||-|\\\\+|\\\\*|/|\\\\\\\\|\\\\.|\\\\^|\\\\s|;|:|,))\", \"name\": \"storage.type.matlab\", \"patterns\": [{ \"match\": \"''\" }, { \"match\": \"'(?=.)\" }, { \"match\": \"([^']+)\" }] }, { \"begin\": '((?<=(\\\\[|\\\\(|\\\\{|=|\\\\s|;|:|,|~|<|>|&|\\\\||-|\\\\+|\\\\*|/|\\\\\\\\|\\\\.|\\\\^))|^)\"', \"comment\": \"String literal (double-quoted)\", \"end\": '\"(?=(\\\\[|\\\\(|\\\\{|\\\\]|\\\\)|\\\\}|=|~|<|>|&|\\\\||-|\\\\+|\\\\*|/|\\\\\\\\|\\\\.|\\\\^|\\\\||\\\\s|;|:|,))', \"name\": \"storage.type.matlab\", \"patterns\": [{ \"match\": '\"\"' }, { \"match\": '\"(?=.)' }, { \"match\": '[^\"]+' }] }] }] }, \"validators\": { \"begin\": \"\\\\s*[;]?\\\\s*([a-zA-Z][a-zA-Z0-9_\\\\.\\\\?]*)\", \"comment\": \"Property and argument validation. Match an identifier allowing . and ?.\", \"end\": \"([;\\\\n%=].*)\", \"endCaptures\": { \"1\": { \"patterns\": [{ \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"$self\" }] } }, \"comment\": \"Match comments\", \"match\": \"([%].*)\" }, { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"$self\" }] } }, \"comment\": \"Handle things like arg = val; nextArg\", \"match\": \"(=[^;]*)\" }, { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#validators\" }] } }, \"comment\": \"End of property/argument patterns which start a new property/argument. Look for beginning of identifier after semicolon. Otherwise treat as regular code.\", \"match\": \"([\\\\n;]\\\\s*[a-zA-Z].*)\" }, { \"include\": \"$self\" }] } }, \"patterns\": [{ \"include\": \"#line_continuation\" }, { \"comment\": \"Size declaration\", \"match\": \"\\\\s*(\\\\([^\\\\)]*\\\\))\", \"name\": \"storage.type.matlab\" }, { \"comment\": \"Type declaration\", \"match\": \"([a-zA-Z][a-zA-Z0-9_\\\\.]*)\", \"name\": \"storage.type.matlab\" }, { \"include\": \"#braced_validator_list\" }] }, \"variables\": { \"comment\": \"MATLAB variables\", \"match\": \"(?<!\\\\.)\\\\b(nargin|nargout|varargin|varargout)\\\\b\", \"name\": \"variable.other.function.matlab\" } }, \"scopeName\": \"source.matlab\" });\nvar matlab = [\n  lang\n];\n\nexport { matlab as default };\n"],"x_google_ignoreList":[0]}