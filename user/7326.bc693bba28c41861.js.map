{"version":3,"file":"7326.bc693bba28c41861.js","mappings":"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","names":["haskell","Object","freeze","displayName","fileTypes","name","patterns","include","match","captures","begin","beginCaptures","end","endCaptures","repository","adt_constructor","block_comment","applyEndPatternLast","char_literal","comma","comment_like","comments","comment","context","cpp","data_constructor","deriving","double_colon","export_constructs","ffi","float_literals","forall","fun_decl","gadt_constructor","infix_op","inline_phase","integer_literals","keyword","layout_herald","liquid_haskell","module_exports","module_name","numeric_literals","overloaded_label","pragma","prefix_op","qualifier","quasi_quote","record","record_decl","record_decl_field","record_field","record_wildcard","reserved_symbol","role_annotation","start_type_signature","string_literal","type_application","type_constructor","type_operator","type_signature","type_variable","where","scopeName","aliases"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/shiki/dist/langs/haskell.mjs"],"sourcesContent":["const lang = Object.freeze({ \"displayName\": \"Haskell\", \"fileTypes\": [\"hs\", \"hs-boot\", \"hsig\"], \"name\": \"haskell\", \"patterns\": [{ \"include\": \"#liquid_haskell\" }, { \"include\": \"#comment_like\" }, { \"include\": \"#numeric_literals\" }, { \"include\": \"#string_literal\" }, { \"include\": \"#char_literal\" }, { \"match\": \"(?<!@|#)-\\\\}\", \"name\": \"invalid\" }, { \"captures\": { \"1\": { \"name\": \"punctuation.paren.haskell\" }, \"2\": { \"name\": \"punctuation.paren.haskell\" } }, \"match\": \"(\\\\()\\\\s*(\\\\))\", \"name\": \"constant.language.unit.haskell\" }, { \"captures\": { \"1\": { \"name\": \"punctuation.paren.haskell\" }, \"2\": { \"name\": \"keyword.operator.hash.haskell\" }, \"3\": { \"name\": \"keyword.operator.hash.haskell\" }, \"4\": { \"name\": \"punctuation.paren.haskell\" } }, \"match\": \"(\\\\()(#)\\\\s*(#)(\\\\))\", \"name\": \"constant.language.unit.unboxed.haskell\" }, { \"captures\": { \"1\": { \"name\": \"punctuation.paren.haskell\" }, \"2\": { \"name\": \"punctuation.paren.haskell\" } }, \"match\": \"(\\\\()\\\\s*,[\\\\s,]*(\\\\))\", \"name\": \"support.constant.tuple.haskell\" }, { \"captures\": { \"1\": { \"name\": \"punctuation.paren.haskell\" }, \"2\": { \"name\": \"keyword.operator.hash.haskell\" }, \"3\": { \"name\": \"keyword.operator.hash.haskell\" }, \"4\": { \"name\": \"punctuation.paren.haskell\" } }, \"match\": \"(\\\\()(#)\\\\s*,[\\\\s,]*(#)(\\\\))\", \"name\": \"support.constant.tuple.unboxed.haskell\" }, { \"captures\": { \"1\": { \"name\": \"punctuation.bracket.haskell\" }, \"2\": { \"name\": \"punctuation.bracket.haskell\" } }, \"match\": \"(\\\\[)\\\\s*(\\\\])\", \"name\": \"constant.language.empty-list.haskell\" }, { \"begin\": \"(\\\\b(?<!')(module)|^(signature))(\\\\b(?!'))\", \"beginCaptures\": { \"2\": { \"name\": \"keyword.other.module.haskell\" }, \"3\": { \"name\": \"keyword.other.signature.haskell\" } }, \"end\": \"(?=\\\\b(?<!')where\\\\b(?!'))\", \"name\": \"meta.declaration.module.haskell\", \"patterns\": [{ \"include\": \"#comment_like\" }, { \"include\": \"#module_name\" }, { \"include\": \"#module_exports\" }, { \"match\": \"[a-z]+\", \"name\": \"invalid\" }] }, { \"include\": \"#ffi\" }, { \"begin\": \"^(\\\\s*)(class)(\\\\b(?!'))\", \"beginCaptures\": { \"2\": { \"name\": \"keyword.other.class.haskell\" } }, \"end\": \"(?x)\\n\\n(?=(?<!')\\\\bwhere\\\\b(?!'))\\n\\n|(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\", \"name\": \"meta.declaration.class.haskell\", \"patterns\": [{ \"include\": \"#comment_like\" }, { \"include\": \"#where\" }, { \"include\": \"#type_signature\" }] }, { \"begin\": \"(?x)\\n^(\\\\s*)(data|newtype)(?:\\\\s+(instance))?\\\\s+\\n\\n((?:(?!\\n\\n(?:\\n(?<![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n(?:=|--+)\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n)\\n\\n| (?:\\\\b(?<!')(?:where|deriving)\\\\b(?!'))\\n\\n| {-\\n\\n).)*)\\n(?=\\\\b(?<!'')where\\\\b(?!''))\", \"beginCaptures\": { \"2\": { \"name\": \"keyword.other.$2.haskell\" }, \"3\": { \"name\": \"keyword.other.instance.haskell\" }, \"4\": { \"patterns\": [{ \"include\": \"#type_signature\" }] } }, \"end\": \"(?x)\\n\\n(?=(?<!')\\\\bderiving\\\\b(?!'))\\n\\n|(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\\n\", \"name\": \"meta.declaration.$2.generalized.haskell\", \"patterns\": [{ \"include\": \"#comment_like\" }, { \"begin\": \"(?x)\\n(?<!')\\\\b(where)\\n\\\\s*(\\\\{)(?!-)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.other.where.haskell\" }, \"2\": { \"name\": \"punctuation.brace.haskell\" } }, \"end\": \"(\\\\})\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.brace.haskell\" } }, \"patterns\": [{ \"include\": \"#comment_like\" }, { \"include\": \"#gadt_constructor\" }, { \"match\": \";\", \"name\": \"punctuation.semicolon.haskell\" }] }, { \"match\": \"\\\\b(?<!')(where)\\\\b(?!')\", \"name\": \"keyword.other.where.haskell\" }, { \"include\": \"#deriving\" }, { \"include\": \"#gadt_constructor\" }] }, { \"include\": \"#role_annotation\" }, { \"begin\": \"^(\\\\s*)(pattern)\\\\s+(.*?)\\\\s+(::|\\u2237)(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\", \"beginCaptures\": { \"2\": { \"name\": \"keyword.other.pattern.haskell\" }, \"3\": { \"patterns\": [{ \"include\": \"#comma\" }, { \"include\": \"#data_constructor\" }] }, \"4\": { \"name\": \"keyword.operator.double-colon.haskell\" } }, \"end\": \"(?x)\\n(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\\n\", \"name\": \"meta.declaration.pattern.type.haskell\", \"patterns\": [{ \"include\": \"#type_signature\" }] }, { \"begin\": \"^\\\\s*(pattern)\\\\b(?!')\", \"captures\": { \"1\": { \"name\": \"keyword.other.pattern.haskell\" } }, \"end\": \"(?x)\\n(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\\n\", \"name\": \"meta.declaration.pattern.haskell\", \"patterns\": [{ \"include\": \"$self\" }] }, { \"begin\": \"(?x)\\n\\n^(\\\\s*)(data|newtype)(?:\\\\s+(family|instance))?\\\\s+\\n\\n(((?!\\n\\n(?:\\n(?<![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n(?:=|--+)\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n)\\n\\n| (?:\\\\b(?<!')(?:where|deriving)\\\\b(?!'))\\n\\n| {-\\n\\n).)*)\", \"beginCaptures\": { \"2\": { \"name\": \"keyword.other.$2.haskell\" }, \"3\": { \"name\": \"keyword.other.$3.haskell\" }, \"4\": { \"patterns\": [{ \"include\": \"#type_signature\" }] } }, \"end\": \"(?x)\\n\\n(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\", \"name\": \"meta.declaration.$2.algebraic.haskell\", \"patterns\": [{ \"include\": \"#comment_like\" }, { \"include\": \"#deriving\" }, { \"include\": \"#forall\" }, { \"include\": \"#adt_constructor\" }, { \"include\": \"#context\" }, { \"include\": \"#record_decl\" }, { \"include\": \"#type_signature\" }] }, { \"begin\": \"(?x)\\n\\n^(\\\\s*)(type)\\\\s+(family)\\\\b(?!')\\n\\n(((?!\\n\\n(?:\\n(?<![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n(?:=|--+)\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n)\\n\\n| \\\\b(?<!')where\\\\b(?!')\\n\\n| {-\\n\\n).)*)\", \"beginCaptures\": { \"2\": { \"name\": \"keyword.other.type.haskell\" }, \"3\": { \"name\": \"keyword.other.family.haskell\" }, \"4\": { \"patterns\": [{ \"include\": \"#comment_like\" }, { \"include\": \"#where\" }, { \"include\": \"#type_signature\" }] } }, \"end\": \"(?x)\\n(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\\n\", \"name\": \"meta.declaration.type.family.haskell\", \"patterns\": [{ \"include\": \"#comment_like\" }, { \"include\": \"#where\" }, { \"include\": \"#type_signature\" }] }, { \"begin\": \"(?x)\\n\\n^(\\\\s*)(type)(?:\\\\s+(instance))?\\\\s+\\n\\n(((?!\\n\\n(?:\\n(?<![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n(?:=|--+|::|\\u2237)\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n)\\n\\n| {-\\n\\n).)*)\", \"beginCaptures\": { \"2\": { \"name\": \"keyword.other.type.haskell\" }, \"3\": { \"name\": \"keyword.other.instance.haskell\" }, \"4\": { \"patterns\": [{ \"include\": \"#type_signature\" }] } }, \"end\": \"(?x)\\n(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\\n\", \"name\": \"meta.declaration.type.haskell\", \"patterns\": [{ \"include\": \"#type_signature\" }] }, { \"begin\": \"^(\\\\s*)(instance)(\\\\b(?!'))\", \"beginCaptures\": { \"2\": { \"name\": \"keyword.other.instance.haskell\" } }, \"end\": \"(?x)\\n\\n(?=\\\\b(?<!')(where)\\\\b(?!'))\\n\\n|(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\\n\", \"name\": \"meta.declaration.instance.haskell\", \"patterns\": [{ \"include\": \"#comment_like\" }, { \"include\": \"#where\" }, { \"include\": \"#type_signature\" }] }, { \"begin\": \"^(\\\\s*)(import)(\\\\b(?!'))\", \"beginCaptures\": { \"2\": { \"name\": \"keyword.other.import.haskell\" } }, \"end\": \"(?x)\\n\\n(?=\\\\b(?<!')(where)\\\\b(?!'))\\n\\n|(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\\n\", \"name\": \"meta.import.haskell\", \"patterns\": [{ \"include\": \"#comment_like\" }, { \"include\": \"#where\" }, { \"captures\": { \"1\": { \"name\": \"keyword.other.$1.haskell\" } }, \"match\": \"(qualified|as|hiding)\" }, { \"include\": \"#module_name\" }, { \"include\": \"#module_exports\" }] }, { \"include\": \"#deriving\" }, { \"include\": \"#layout_herald\" }, { \"include\": \"#keyword\" }, { \"captures\": { \"1\": { \"name\": \"keyword.other.$1.haskell\" }, \"2\": { \"patterns\": [{ \"include\": \"#comment_like\" }, { \"include\": \"#integer_literals\" }, { \"include\": \"#infix_op\" }] } }, \"match\": \"^\\\\s*(infix[lr]?)\\\\s+(.*)\", \"name\": \"meta.fixity-declaration.haskell\" }, { \"include\": \"#overloaded_label\" }, { \"include\": \"#type_application\" }, { \"include\": \"#reserved_symbol\" }, { \"include\": \"#fun_decl\" }, { \"include\": \"#qualifier\" }, { \"include\": \"#data_constructor\" }, { \"include\": \"#start_type_signature\" }, { \"include\": \"#prefix_op\" }, { \"include\": \"#infix_op\" }, { \"begin\": \"(\\\\()(#)\\\\s\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.paren.haskell\" }, \"2\": { \"name\": \"keyword.operator.hash.haskell\" } }, \"end\": \"(#)(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.hash.haskell\" }, \"2\": { \"name\": \"punctuation.paren.haskell\" } }, \"patterns\": [{ \"include\": \"#comma\" }, { \"include\": \"$self\" }] }, { \"begin\": \"(\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.paren.haskell\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.paren.haskell\" } }, \"patterns\": [{ \"include\": \"#comma\" }, { \"include\": \"$self\" }] }, { \"include\": \"#quasi_quote\" }, { \"begin\": \"(\\\\[)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.bracket.haskell\" } }, \"end\": \"(\\\\])\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.bracket.haskell\" } }, \"patterns\": [{ \"include\": \"#comma\" }, { \"include\": \"$self\" }] }, { \"include\": \"#record\" }], \"repository\": { \"adt_constructor\": { \"patterns\": [{ \"include\": \"#comment_like\" }, { \"begin\": \"(?x)\\n(?<![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n(?:(=)|(\\\\|))\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.eq.haskell\" }, \"2\": { \"name\": \"keyword.operator.pipe.haskell\" } }, \"end\": \"(?x)\\n(?:\\\\G|^)\\\\s*\\n(?:\\n\\n(?:\\n\\n(?<!')\\\\b((?:[\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}'\\\\.])+)\\n\\n| ('?\\n(?<paren>\\n\\\\(\\n(?:\\n[^\\\\(\\\\)]*\\n| \\\\g<paren>\\n)*\\n\\\\)\\n)\\n)\\n\\n| ('?\\n(?<brac>\\n\\\\(\\n(?:\\n[^\\\\[\\\\]]*\\n| \\\\g<brac>\\n)*\\n\\\\]\\n)\\n)\\n)\\n\\n\\\\s*\\n\\n(?:(?<![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])(:[\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]*)\\n\\n| (`)([\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*)(`)\\n)\\n\\n)\\n|\\n(?:(?<!')\\\\b([\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*))\\n|\\n(\\\\()\\\\s*(:[\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]*)\\\\s*(\\\\))\", \"endCaptures\": { \"1\": { \"patterns\": [{ \"include\": \"#type_signature\" }] }, \"2\": { \"patterns\": [{ \"include\": \"#type_signature\" }] }, \"4\": { \"patterns\": [{ \"include\": \"#type_signature\" }] }, \"6\": { \"name\": \"constant.other.operator.haskell\" }, \"7\": { \"name\": \"punctuation.backtick.haskell\" }, \"8\": { \"name\": \"constant.other.haskell\" }, \"9\": { \"name\": \"punctuation.backtick.haskell\" }, \"10\": { \"name\": \"constant.other.haskell\" }, \"11\": { \"name\": \"punctuation.paren.haskell\" }, \"12\": { \"name\": \"constant.other.operator.haskell\" }, \"13\": { \"name\": \"punctuation.paren.haskell\" } }, \"patterns\": [{ \"include\": \"#comment_like\" }, { \"include\": \"#deriving\" }, { \"include\": \"#record_decl\" }, { \"include\": \"#forall\" }, { \"include\": \"#context\" }] }] }, \"block_comment\": { \"applyEndPatternLast\": 1, \"begin\": \"\\\\{-\", \"captures\": { \"0\": { \"name\": \"punctuation.definition.comment.haskell\" } }, \"end\": \"-\\\\}\", \"name\": \"comment.block.haskell\", \"patterns\": [{ \"include\": \"#block_comment\" }] }, \"char_literal\": { \"captures\": { \"1\": { \"name\": \"punctuation.definition.string.begin.haskell\" }, \"2\": { \"name\": \"constant.character.escape.haskell\" }, \"3\": { \"name\": \"constant.character.escape.octal.haskell\" }, \"4\": { \"name\": \"constant.character.escape.hexadecimal.haskell\" }, \"5\": { \"name\": \"constant.character.escape.control.haskell\" }, \"6\": { \"name\": \"punctuation.definition.string.end.haskell\" } }, \"match\": `(?x)\n(?<![\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}'])\n(')\n(?:\n[\\\\ -\\\\[\\\\]-~]\n| (\\\\\\\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE\n|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS\n|US|SP|DEL|[abfnrtv\\\\\\\\\\\\\"'\\\\\\\\&]))\n| (\\\\\\\\o[0-7]+)\n| (\\\\\\\\x[0-9A-Fa-f]+)\n| (\\\\\\\\\\\\^[A-Z@\\\\[\\\\]\\\\\\\\\\\\^_])\n)\n(')\n`, \"name\": \"string.quoted.single.haskell\" }, \"comma\": { \"match\": \",\", \"name\": \"punctuation.separator.comma.haskell\" }, \"comment_like\": { \"patterns\": [{ \"include\": \"#cpp\" }, { \"include\": \"#pragma\" }, { \"include\": \"#comments\" }] }, \"comments\": { \"patterns\": [{ \"begin\": \"^(\\\\s*)(--\\\\s[\\\\|\\\\$])\", \"beginCaptures\": { \"2\": { \"name\": \"punctuation.whitespace.comment.leading.haskell\" } }, \"end\": \"(?=^(?!\\\\1--+(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])))\", \"name\": \"comment.block.documentation.haskell\" }, { \"begin\": \"(^[ \\\\t]+)?(--\\\\s[\\\\^\\\\*])\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.whitespace.comment.leading.haskell\" } }, \"end\": \"\\\\n\", \"name\": \"comment.line.documentation.haskell\" }, { \"applyEndPatternLast\": 1, \"begin\": \"\\\\{-\\\\s?[\\\\|\\\\$\\\\*\\\\^]\", \"captures\": { \"0\": { \"name\": \"punctuation.definition.comment.haskell\" } }, \"end\": \"-\\\\}\", \"name\": \"comment.block.documentation.haskell\", \"patterns\": [{ \"include\": \"#block_comment\" }] }, { \"begin\": \"(^[ \\\\t]+)?(?=--+(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]))\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.whitespace.comment.leading.haskell\" } }, \"comment\": \"Operators may begin with '--' as long as they are not entirely composed of '-' characters. This means comments can't be immediately followed by an allowable operator character.\", \"end\": \"(?!\\\\G)\", \"patterns\": [{ \"begin\": \"--\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.comment.haskell\" } }, \"end\": \"\\\\n\", \"name\": \"comment.line.double-dash.haskell\" }] }, { \"include\": \"#block_comment\" }] }, \"context\": { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#comment_like\" }, { \"include\": \"#type_signature\" }] }, \"2\": { \"name\": \"keyword.operator.big-arrow.haskell\" } }, \"match\": \"(?x)\\n(.*)\\n(?<![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n(=>|\\u21D2)\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n\" }, \"cpp\": { \"captures\": { \"1\": { \"name\": \"punctuation.definition.preprocessor.c\" } }, \"comment\": `In addition to Haskell's \"native\" syntax, GHC permits the C preprocessor to be run on a source file.`, \"match\": \"^(#).*$\", \"name\": \"meta.preprocessor.c\" }, \"data_constructor\": { \"match\": \"\\\\b(?<!')[\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*(?![\\\\.'\\\\w])\", \"name\": \"constant.other.haskell\" }, \"deriving\": { \"patterns\": [{ \"begin\": \"^(\\\\s*)(deriving)\\\\s+(?:(via|stock|newtype|anyclass)\\\\s+)?\", \"beginCaptures\": { \"2\": { \"name\": \"keyword.other.deriving.haskell\" }, \"3\": { \"name\": \"keyword.other.deriving.strategy.$3.haskell\" } }, \"end\": \"(?x)\\n\\n(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\", \"name\": \"meta.deriving.haskell\", \"patterns\": [{ \"include\": \"#comment_like\" }, { \"match\": \"(?<!')\\\\b(instance)\\\\b(?!')\", \"name\": \"keyword.other.instance.haskell\" }, { \"captures\": { \"1\": { \"name\": \"keyword.other.deriving.strategy.$1.haskell\" } }, \"match\": \"(?<!')\\\\b(via|stock|newtype|anyclass)\\\\b(?!')\" }, { \"include\": \"#type_signature\" }] }, { \"begin\": \"(deriving)(?:\\\\s+(stock|newtype|anyclass))?\\\\s*(\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.other.deriving.haskell\" }, \"2\": { \"name\": \"keyword.other.deriving.strategy.$2.haskell\" }, \"3\": { \"name\": \"punctuation.paren.haskell\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.paren.haskell\" } }, \"name\": \"meta.deriving.haskell\", \"patterns\": [{ \"include\": \"#type_signature\" }] }, { \"captures\": { \"1\": { \"name\": \"keyword.other.deriving.haskell\" }, \"2\": { \"name\": \"keyword.other.deriving.strategy.$2.haskell\" }, \"3\": { \"patterns\": [{ \"include\": \"#type_signature\" }] }, \"5\": { \"name\": \"keyword.other.deriving.strategy.via.haskell\" }, \"6\": { \"patterns\": [{ \"include\": \"#type_signature\" }] } }, \"match\": \"(?x)\\n(deriving)(?:\\\\s+(stock|newtype|anyclass))?\\\\s+\\n([\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*)\\n(\\\\s+(via)\\\\s+(.*)$)?\\n\", \"name\": \"meta.deriving.haskell\" }, { \"match\": \"(?<!')\\\\b(via)\\\\b(?!')\", \"name\": \"keyword.other.deriving.strategy.via.haskell\" }] }, \"double_colon\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.double-colon.haskell\" } }, \"match\": \"\\\\s*(::|\\u2237)(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\\\s*\" }, \"export_constructs\": { \"patterns\": [{ \"include\": \"#comment_like\" }, { \"begin\": \"\\\\b(?<!')(pattern)\\\\b(?!')\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.other.pattern.haskell\" } }, \"end\": \"(?x)\\n\\n([\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*)\\n\\n| (\\\\()\\\\s*(:[\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]+)\\\\s*(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"constant.other.haskell\" }, \"2\": { \"name\": \"punctuation.paren.haskell\" }, \"3\": { \"name\": \"constant.other.operator.haskell\" }, \"4\": { \"name\": \"punctuation.paren.haskell\" } }, \"patterns\": [{ \"include\": \"#comment_like\" }] }, { \"begin\": \"\\\\b(?<!')(type)\\\\b(?!')\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.other.type.haskell\" } }, \"end\": \"(?x)\\n\\n([\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*)\\n\\n| (\\\\()\\\\s*([\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]+)\\\\s*(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"storage.type.haskell\" }, \"2\": { \"name\": \"punctuation.paren.haskell\" }, \"3\": { \"name\": \"storage.type.operator.haskell\" }, \"4\": { \"name\": \"punctuation.paren.haskell\" } }, \"patterns\": [{ \"include\": \"#comment_like\" }] }, { \"match\": \"(?<!')\\\\b[\\\\p{Ll}_][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*\", \"name\": \"entity.name.function.haskell\" }, { \"match\": \"(?<!')\\\\b[\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*\", \"name\": \"storage.type.haskell\" }, { \"include\": \"#record_wildcard\" }, { \"include\": \"#reserved_symbol\" }, { \"include\": \"#prefix_op\" }] }, \"ffi\": { \"begin\": \"^(\\\\s*)(foreign)\\\\s+(import|export)\\\\s+\", \"beginCaptures\": { \"2\": { \"name\": \"keyword.other.foreign.haskell\" }, \"3\": { \"name\": \"keyword.other.$3.haskell\" } }, \"end\": \"(?x)\\n(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\\n\", \"name\": \"meta.$3.foreign.haskell\", \"patterns\": [{ \"include\": \"#comment_like\" }, { \"captures\": { \"1\": { \"name\": \"keyword.other.calling-convention.$1.haskell\" } }, \"match\": \"\\\\b(?<!')(ccall|cplusplus|dotnet|jvm|stdcall|prim|capi)\\\\s+\" }, { \"begin\": `(?=\")|(?=\\\\b(?<!')([\\\\p{Ll}_][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*)\\\\b(?!'))`, \"end\": \"(?=(::|\\u2237)(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]))\", \"patterns\": [{ \"include\": \"#comment_like\" }, { \"captures\": { \"1\": { \"name\": \"keyword.other.safety.$1.haskell\" }, \"2\": { \"name\": \"entity.name.foreign.haskell\", \"patterns\": [{ \"include\": \"#string_literal\" }] }, \"3\": { \"name\": \"entity.name.function.haskell\" }, \"4\": { \"name\": \"entity.name.function.infix.haskell\" } }, \"match\": `(?x)\n\\\\b(?<!')(safe|unsafe|interruptible)\\\\b(?!')\n\\\\s*\n(\"(?:\\\\\\\\\"|[^\"])*\")?\n\\\\s*\n(?:\n(?:\\\\b(?<!'')([\\\\p{Ll}_][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*)\\\\b(?!'))\n|(?:\\\\(\\\\s*(?!--+\\\\))([\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]\\`{}_\"']]+)\\\\s*\\\\))\n)\n` }, { \"captures\": { \"1\": { \"name\": \"keyword.other.safety.$1.haskell\" }, \"2\": { \"name\": \"entity.name.foreign.haskell\", \"patterns\": [{ \"include\": \"#string_literal\" }] } }, \"match\": `(?x)\n\\\\b(?<!')(safe|unsafe|interruptible)\\\\b(?!')\n\\\\s*\n(\"(?:\\\\\\\\\"|[^\"])*\")?\n\\\\s*$\n` }, { \"captures\": { \"0\": { \"name\": \"entity.name.foreign.haskell\", \"patterns\": [{ \"include\": \"#string_literal\" }] } }, \"match\": '(?x)\\n\"(?:\\\\\\\\\"|[^\"])*\"' }, { \"captures\": { \"1\": { \"name\": \"entity.name.function.haskell\" }, \"2\": { \"name\": \"punctuation.paren.haskell\" }, \"3\": { \"name\": \"entity.name.function.infix.haskell\" }, \"4\": { \"name\": \"punctuation.paren.haskell\" } }, \"match\": \"(?x)\\n(?:\\\\b(?<!'')([\\\\p{Ll}_][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*)\\\\b(?!'))\\n|(?:(\\\\()\\\\s*(?!--+\\\\))([\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]+)\\\\s*(\\\\)))\\n\" }] }, { \"include\": \"#double_colon\" }, { \"include\": \"#type_signature\" }] }, \"float_literals\": { \"captures\": { \"1\": { \"name\": \"constant.numeric.floating.decimal.haskell\" }, \"2\": { \"name\": \"constant.numeric.floating.hexadecimal.haskell\" } }, \"comment\": \"Floats are decimal or hexadecimal\", \"match\": \"(?x)\\n\\\\b(?<!')\\n(?:\\n([0-9][_0-9]*\\\\.[0-9][_0-9]*(?:[eE][-+]?[0-9][_0-9]*)?\\n|[0-9][_0-9]*[eE][-+]?[0-9][_0-9]*\\n)\\n|\\n(0[xX]_*[0-9a-fA-F][_0-9a-fA-F]*\\\\.[0-9a-fA-F][_0-9a-fA-F]*(?:[pP][-+]?[0-9][_0-9]*)?\\n|0[xX]_*[0-9a-fA-F][_0-9a-fA-F]*[pP][-+]?[0-9][_0-9]*\\n)\\n)\\\\b(?!')\" }, \"forall\": { \"begin\": \"\\\\b(?<!')(forall|\\u2200)\\\\b(?!')\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.other.forall.haskell\" } }, \"end\": \"(\\\\.)|(->|\\u2192)\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.period.haskell\" }, \"2\": { \"name\": \"keyword.operator.arrow.haskell\" } }, \"patterns\": [{ \"include\": \"#comment_like\" }, { \"include\": \"#type_variable\" }, { \"include\": \"#type_signature\" }] }, \"fun_decl\": { \"begin\": \"(?x)^(\\\\s*)\\n(?<fn>\\n(?:\\n[\\\\p{Ll}_][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*\\\\#*\\n| \\\\(\\\\s*\\n(?!--+\\\\))\\n[\\\\p{S}\\\\p{P}&&[^(),:;\\\\[\\\\]`{}_\\\"']]\\n[\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]*\\n\\\\s*\\\\)\\n)\\n(?:\\\\s*,\\\\s*\\\\g<fn>)?\\n)\\n\\\\s*(?<![\\\\p{S}\\\\p{P}&&[^\\\\),;\\\\]`}_\\\"']])(::|\\u2237)(?![\\\\p{S}\\\\p{P}&&[^\\\\(,;\\\\[`{_\\\"']])\\n\", \"beginCaptures\": { \"2\": { \"name\": \"entity.name.function.haskell\", \"patterns\": [{ \"include\": \"#reserved_symbol\" }, { \"include\": \"#prefix_op\" }] }, \"3\": { \"name\": \"keyword.operator.double-colon.haskell\" } }, \"end\": \"(?x)\\n\\n\\n(?=\\n\\n(?<![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n\\n((<-|\\u2190)|(=)|(-<|\\u21A2)|(-<<|\\u291B))\\n\\n([(),;\\\\[\\\\]`{}_\\\"']|[^\\\\p{S}\\\\p{P}])\\n)\\n\\n|(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\\n\", \"name\": \"meta.function.type-declaration.haskell\", \"patterns\": [{ \"include\": \"#type_signature\" }] }, \"gadt_constructor\": { \"patterns\": [{ \"begin\": \"(?x)\\n^(\\\\s*)\\n(?:\\n(\\\\b(?<!')[\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*)\\n|(\\\\()\\\\s*(:[\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]*)\\\\s*(\\\\))\\n)\", \"beginCaptures\": { \"2\": { \"name\": \"constant.other.haskell\" }, \"3\": { \"name\": \"punctuation.paren.haskell\" }, \"4\": { \"name\": \"constant.other.operator.haskell\" }, \"5\": { \"name\": \"punctuation.paren.haskell\" } }, \"end\": \"(?x)\\n\\n(?=\\\\b(?<!'')deriving\\\\b(?!'))\\n\\n|(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\\n\", \"patterns\": [{ \"include\": \"#comment_like\" }, { \"include\": \"#deriving\" }, { \"include\": \"#double_colon\" }, { \"include\": \"#record_decl\" }, { \"include\": \"#type_signature\" }] }, { \"begin\": \"(?x)\\n(\\\\b(?<!')[\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}]*)\\n|(\\\\()\\\\s*(:[\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]*)\\\\s*(\\\\))\", \"beginCaptures\": { \"1\": { \"name\": \"constant.other.haskell\" }, \"2\": { \"name\": \"punctuation.paren.haskell\" }, \"3\": { \"name\": \"constant.other.operator.haskell\" }, \"4\": { \"name\": \"punctuation.paren.haskell\" } }, \"end\": \"$\", \"patterns\": [{ \"include\": \"#comment_like\" }, { \"include\": \"#deriving\" }, { \"include\": \"#double_colon\" }, { \"include\": \"#record_decl\" }, { \"include\": \"#type_signature\" }] }] }, \"infix_op\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"keyword.operator.promotion.haskell\" }, \"2\": { \"name\": \"entity.name.namespace.haskell\" }, \"3\": { \"name\": \"keyword.operator.infix.haskell\" } }, \"comment\": \"In case this regex seems overly general, note that Haskell permits  the definition of new operators which can be nearly any string of  punctuation characters, such as $%^&*.\\n\", \"match\": \"(?x)\\n((?:(?<!'')('')?[\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}'']*\\\\.)*)\\n(\\\\#+|[\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]+(?<!\\\\#))\" }, { \"captures\": { \"1\": { \"name\": \"punctuation.backtick.haskell\" }, \"2\": { \"name\": \"entity.name.namespace.haskell\" }, \"3\": { \"patterns\": [{ \"include\": \"#data_constructor\" }] }, \"4\": { \"name\": \"punctuation.backtick.haskell\" } }, \"comment\": \"In case this regex seems unusual for an infix operator, note that Haskell\\nallows any ordinary function application (elem 4 [1..10]) to be rewritten\\nas an infix expression (4 `elem` [1..10]).\\n\", \"match\": \"(`)((?:[\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}'']*\\\\.)*)([\\\\p{Ll}\\\\p{Lu}_][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}'']*)(`)\", \"name\": \"keyword.operator.function.infix.haskell\" }] }, \"inline_phase\": { \"begin\": \"\\\\[\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.bracket.haskell\" } }, \"end\": \"\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.bracket.haskell\" } }, \"name\": \"meta.inlining-phase.haskell\", \"patterns\": [{ \"match\": \"~\", \"name\": \"punctuation.tilde.haskell\" }, { \"include\": \"#integer_literals\" }, { \"match\": \"\\\\w*\", \"name\": \"invalid\" }] }, \"integer_literals\": { \"captures\": { \"1\": { \"name\": \"constant.numeric.integral.decimal.haskell\" }, \"2\": { \"name\": \"constant.numeric.integral.hexadecimal.haskell\" }, \"3\": { \"name\": \"constant.numeric.integral.octal.haskell\" }, \"4\": { \"name\": \"constant.numeric.integral.binary.haskell\" } }, \"match\": \"(?x)\\n\\\\b(?<!')\\n(?:\\n([0-9][_0-9]*)\\n| (0[xX]_*[0-9a-fA-F][_0-9a-fA-F]*)\\n| (0[oO]_*[0-7][_0-7]*)\\n| (0[bB]_*[01][_01]*)\\n)\\n\\\\b(?!')\" }, \"keyword\": { \"captures\": { \"1\": { \"name\": \"keyword.other.$1.haskell\" }, \"2\": { \"name\": \"keyword.control.$2.haskell\" } }, \"match\": \"\\\\b(?<!')(?:(where|let|in|default)|(m?do|if|then|else|case|of|proc|rec))\\\\b(?!')\" }, \"layout_herald\": { \"begin\": \"(?x)\\n(?<!')\\\\b(?:(where|let|m?do)|(of))\\n\\\\s*(\\\\{)(?!-)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.other.$1.haskell\" }, \"2\": { \"name\": \"keyword.control.of.haskell\" }, \"3\": { \"name\": \"punctuation.brace.haskell\" } }, \"end\": \"(\\\\})\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.brace.haskell\" } }, \"patterns\": [{ \"include\": \"$self\" }, { \"match\": \";\", \"name\": \"punctuation.semicolon.haskell\" }] }, \"liquid_haskell\": { \"begin\": \"\\\\{-@\", \"end\": \"@-\\\\}\", \"name\": \"block.liquidhaskell.haskell\", \"patterns\": [{ \"include\": \"$self\" }] }, \"module_exports\": { \"applyEndPatternLast\": 1, \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.paren.haskell\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.paren.haskell\" } }, \"name\": \"meta.declaration.exports.haskell\", \"patterns\": [{ \"include\": \"#comment_like\" }, { \"captures\": { \"1\": { \"name\": \"keyword.other.module.haskell\" } }, \"match\": \"\\\\b(?<!')(module)\\\\b(?!')\" }, { \"include\": \"#comma\" }, { \"include\": \"#export_constructs\" }, { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.paren.haskell\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.paren.haskell\" } }, \"patterns\": [{ \"include\": \"#comment_like\" }, { \"include\": \"#record_wildcard\" }, { \"include\": \"#export_constructs\" }, { \"include\": \"#comma\" }] }] }, \"module_name\": { \"match\": \"(?<conid>[\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*(\\\\.\\\\g<conid>)?)\", \"name\": \"entity.name.namespace.haskell\" }, \"numeric_literals\": { \"patterns\": [{ \"include\": \"#float_literals\" }, { \"include\": \"#integer_literals\" }] }, \"overloaded_label\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"keyword.operator.prefix.hash.haskell\" }, \"2\": { \"patterns\": [{ \"include\": \"#string_literal\" }] } }, \"match\": '(?x)\\n(?<![\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}\\\\p{S}\\\\p{P}&&[^(,;\\\\[`{]])\\n(\\\\#)\\n(?:\\n\\n(\"(?:\\\\\\\\\"|[^\"])*\")\\n\\n|[\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}\\'\\\\.]+\\n)', \"name\": \"entity.name.label.haskell\" }] }, \"pragma\": { \"begin\": \"\\\\{-#\", \"end\": \"#-\\\\}\", \"name\": \"meta.preprocessor.haskell\", \"patterns\": [{ \"begin\": \"(?xi) \\\\b(?<!')(LANGUAGE)\\\\b(?!')\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.other.preprocessor.pragma.haskell\" } }, \"end\": \"(?=#-\\\\})\", \"patterns\": [{ \"match\": \"(?x)\\n(?:No)?\\n(?:AutoDeriveTypeable|DatatypeContexts|DoRec|IncoherentInstances|MonadFailDesugaring|MonoPatBinds|NullaryTypeClasses|OverlappingInstances|PatternSignatures|RecordPuns|RelaxedPolyRec)\", \"name\": \"invalid.deprecated\" }, { \"captures\": { \"1\": { \"name\": \"keyword.other.preprocessor.extension.haskell\" } }, \"match\": \"(?x)\\n(\\n(?:No)?\\n(?:AllowAmbiguousTypes|AlternativeLayoutRule|AlternativeLayoutRuleTransitional|Arrows|BangPatterns|BinaryLiterals|CApiFFI|CPP|CUSKs|ConstrainedClassMethods|ConstraintKinds|DataKinds|DefaultSignatures|DeriveAnyClass|DeriveDataTypeable|DeriveFoldable|DeriveFunctor|DeriveGeneric|DeriveLift|DeriveTraversable|DerivingStrategies|DerivingVia|DisambiguateRecordFields|DoAndIfThenElse|BlockArguments|DuplicateRecordFields|EmptyCase|EmptyDataDecls|EmptyDataDeriving|ExistentialQuantification|ExplicitForAll|ExplicitNamespaces|ExtendedDefaultRules|FlexibleContexts|FlexibleInstances|ForeignFunctionInterface|FunctionalDependencies|GADTSyntax|GADTs|GHCForeignImportPrim|Generali(?:s|z)edNewtypeDeriving|ImplicitParams|ImplicitPrelude|ImportQualifiedPost|ImpredicativeTypes|TypeFamilyDependencies|InstanceSigs|ApplicativeDo|InterruptibleFFI|JavaScriptFFI|KindSignatures|LambdaCase|LiberalTypeSynonyms|MagicHash|MonadComprehensions|MonoLocalBinds|MonomorphismRestriction|MultiParamTypeClasses|MultiWayIf|NumericUnderscores|NPlusKPatterns|NamedFieldPuns|NamedWildCards|NegativeLiterals|HexFloatLiterals|NondecreasingIndentation|NumDecimals|OverloadedLabels|OverloadedLists|OverloadedStrings|PackageImports|ParallelArrays|ParallelListComp|PartialTypeSignatures|PatternGuards|PatternSynonyms|PolyKinds|PolymorphicComponents|QuantifiedConstraints|PostfixOperators|QuasiQuotes|Rank2Types|RankNTypes|RebindableSyntax|RecordWildCards|RecursiveDo|RelaxedLayout|RoleAnnotations|ScopedTypeVariables|StandaloneDeriving|StarIsType|StaticPointers|Strict|StrictData|TemplateHaskell|TemplateHaskellQuotes|StandaloneKindSignatures|TraditionalRecordSyntax|TransformListComp|TupleSections|TypeApplications|TypeInType|TypeFamilies|TypeOperators|TypeSynonymInstances|UnboxedTuples|UnboxedSums|UndecidableInstances|UndecidableSuperClasses|UnicodeSyntax|UnliftedFFITypes|UnliftedNewtypes|ViewPatterns)\\n)\" }, { \"include\": \"#comma\" }] }, { \"begin\": \"(?xi)\\n\\\\b(?<!')(SPECIALI(?:S|Z)E)\\n(?:\\n\\\\s*( \\\\[ [^\\\\[\\\\]]* \\\\])?\\\\s*\\n|\\\\s+\\n)\\n(instance)\\\\b(?!')\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.other.preprocessor.pragma.haskell\" }, \"2\": { \"patterns\": [{ \"include\": \"#inline_phase\" }] }, \"3\": { \"name\": \"keyword.other.instance.haskell\" } }, \"end\": \"(?=#-\\\\})\", \"patterns\": [{ \"include\": \"#type_signature\" }] }, { \"begin\": \"(?xi)\\n\\\\b(?<!')(SPECIALI(?:S|Z)E)\\\\b(?!')\\n(?:\\\\s+(INLINE)\\\\b(?!'))?\\n(?:\\\\s*(\\\\[ [^\\\\[\\\\]]* \\\\])?)\\n\\\\s*\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.other.preprocessor.pragma.haskell\" }, \"2\": { \"name\": \"keyword.other.preprocessor.pragma.haskell\" }, \"3\": { \"patterns\": [{ \"include\": \"#inline_phase\" }] } }, \"end\": \"(?=#-\\\\})\", \"patterns\": [{ \"include\": \"$self\" }] }, { \"match\": \"(?xi) \\\\b(?<!')\\n(LANGUAGE|OPTIONS_GHC|INCLUDE\\n|MINIMAL|UNPACK|OVERLAPS|INCOHERENT\\n|NOUNPACK|SOURCE|OVERLAPPING|OVERLAPPABLE|INLINE\\n|NOINLINE|INLINE?ABLE|CONLIKE|LINE|COLUMN|RULES\\n|COMPLETE)\\\\b(?!')\", \"name\": \"keyword.other.preprocessor.haskell\" }, { \"begin\": \"(?i)\\\\b(DEPRECATED|WARNING)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.other.preprocessor.pragma.haskell\" } }, \"end\": \"(?=#-\\\\})\", \"patterns\": [{ \"include\": \"#string_literal\" }] }] }, \"prefix_op\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"punctuation.paren.haskell\" }, \"2\": { \"name\": \"entity.name.function.infix.haskell\" }, \"3\": { \"name\": \"punctuation.paren.haskell\" } }, \"comment\": \"An operator cannot be composed entirely of '-' characters;  instead, it should be matched as a comment.\\n\", \"match\": \"(?x)\\n(\\\\()\\\\s*(?!(?:--+|\\\\.\\\\.)\\\\))(\\\\#+|[\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]+(?<!\\\\#))\\\\s*(\\\\))\" }] }, \"qualifier\": { \"match\": \"\\\\b(?<!')[\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*\\\\.\", \"name\": \"entity.name.namespace.haskell\" }, \"quasi_quote\": { \"patterns\": [{ \"begin\": \"(?x)\\n(\\\\[)\\n(e|d|p)?\\n(\\\\|\\\\|?)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.quasi-quotation.begin.haskell\" }, \"2\": { \"name\": \"entity.name.quasi-quoter.haskell\" }, \"3\": { \"name\": \"keyword.operator.quasi-quotation.begin.haskell\" } }, \"end\": \"\\\\3\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"keyword.operator.quasi-quotation.end.haskell\" } }, \"name\": \"meta.quasi-quotation.haskell\", \"patterns\": [{ \"include\": \"$self\" }] }, { \"begin\": \"(?x)\\n(\\\\[)\\n(t)\\n(\\\\|\\\\|?)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.quasi-quotation.begin.haskell\" }, \"2\": { \"name\": \"entity.name.quasi-quoter.haskell\" }, \"3\": { \"name\": \"keyword.operator.quasi-quotation.begin.haskell\" } }, \"end\": \"\\\\3\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"keyword.operator.quasi-quotation.end.haskell\" } }, \"name\": \"meta.quasi-quotation.haskell\", \"patterns\": [{ \"include\": \"#type_signature\" }] }, { \"begin\": \"(?x)\\n(\\\\[)\\n(?:(\\\\$\\\\$)|(\\\\$))?\\n((?:[^\\\\s\\\\p{S}\\\\p{P}]|[\\\\.'_])*)\\n(\\\\|\\\\|?)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.quasi-quotation.begin.haskell\" }, \"2\": { \"name\": \"keyword.operator.prefix.double-dollar.haskell\" }, \"3\": { \"name\": \"keyword.operator.prefix.dollar.haskell\" }, \"4\": { \"name\": \"entity.name.quasi-quoter.haskell\", \"patterns\": [{ \"include\": \"#qualifier\" }] }, \"5\": { \"name\": \"keyword.operator.quasi-quotation.begin.haskell\" } }, \"end\": \"\\\\5\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"keyword.operator.quasi-quotation.end.haskell\" } }, \"name\": \"meta.quasi-quotation.haskell\" }] }, \"record\": { \"begin\": \"({)(?!-)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.brace.haskell\" } }, \"end\": \"(?<!-)(})\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.brace.haskell\" } }, \"name\": \"meta.record.haskell\", \"patterns\": [{ \"include\": \"#comment_like\" }, { \"include\": \"#record_field\" }] }, \"record_decl\": { \"begin\": \"({)(?!-)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.brace.haskell\" } }, \"end\": \"(?<!-)(})\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.brace.haskell\" } }, \"name\": \"meta.record.definition.haskell\", \"patterns\": [{ \"include\": \"#comment_like\" }, { \"include\": \"#record_decl_field\" }] }, \"record_decl_field\": { \"begin\": \"(?x)\\n(?:([\\\\p{Ll}_][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*)\\n|(\\\\()\\\\s*([\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]+)\\\\s*(\\\\))\\n)\\n\", \"beginCaptures\": { \"1\": { \"name\": \"variable.other.member.definition.haskell\" }, \"2\": { \"name\": \"punctuation.paren.haskell\" }, \"3\": { \"name\": \"variable.other.member.definition.haskell\" }, \"4\": { \"name\": \"punctuation.paren.haskell\" } }, \"end\": \"(,)|(?=})\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.comma.haskell\" } }, \"patterns\": [{ \"include\": \"#comment_like\" }, { \"include\": \"#comma\" }, { \"include\": \"#double_colon\" }, { \"include\": \"#type_signature\" }, { \"include\": \"#record_decl_field\" }] }, \"record_field\": { \"patterns\": [{ \"begin\": \"(?x)\\n(?:([\\\\p{Ll}\\\\p{Lu}_][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}\\\\.']*)\\n|(\\\\()\\\\s*([\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]+)\\\\s*(\\\\))\\n)\\n\", \"beginCaptures\": { \"1\": { \"name\": \"variable.other.member.haskell\", \"patterns\": [{ \"include\": \"#qualifier\" }] }, \"2\": { \"name\": \"punctuation.paren.haskell\" }, \"3\": { \"name\": \"variable.other.member.haskell\" }, \"4\": { \"name\": \"punctuation.paren.haskell\" } }, \"end\": \"(,)|(?=})\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.comma.haskell\" } }, \"patterns\": [{ \"include\": \"#comment_like\" }, { \"include\": \"#comma\" }, { \"include\": \"$self\" }] }, { \"include\": \"#record_wildcard\" }] }, \"record_wildcard\": { \"captures\": { \"1\": { \"name\": \"variable.other.member.wildcard.haskell\" } }, \"match\": \"(?x)\\n(?<![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n(\\\\.\\\\.)\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\" }, \"reserved_symbol\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"keyword.operator.double-dot.haskell\" }, \"2\": { \"name\": \"keyword.operator.colon.haskell\" }, \"3\": { \"name\": \"keyword.operator.eq.haskell\" }, \"4\": { \"name\": \"keyword.operator.lambda.haskell\" }, \"5\": { \"name\": \"keyword.operator.pipe.haskell\" }, \"6\": { \"name\": \"keyword.operator.arrow.left.haskell\" }, \"7\": { \"name\": \"keyword.operator.arrow.haskell\" }, \"8\": { \"name\": \"keyword.operator.arrow.left.tail.haskell\" }, \"9\": { \"name\": \"keyword.operator.arrow.left.tail.double.haskell\" }, \"10\": { \"name\": \"keyword.operator.arrow.tail.haskell\" }, \"11\": { \"name\": \"keyword.operator.arrow.tail.double.haskell\" }, \"12\": { \"name\": \"keyword.other.forall.haskell\" } }, \"match\": \"(?x)\\n(?<![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"'']])\\n(?:\\n(\\\\.\\\\.)\\n|(:)\\n|(=)\\n|(\\\\\\\\)\\n|(\\\\|)\\n|(<-|\\u2190)\\n|(->|\\u2192)\\n|(-<|\\u21A2)\\n|(-<<|\\u291B)\\n|(>-|\\u291A)\\n|(>>-|\\u291C)\\n|(\\u2200)\\n)\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"'']])\" }, { \"captures\": { \"1\": { \"name\": \"keyword.operator.postfix.hash.haskell\" } }, \"match\": \"(?x)\\n(?<=[\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}\\\\p{S}\\\\p{P}&&[^\\\\#,;\\\\[`{]])\\n(\\\\#+)\\n(?![\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}\\\\p{S}\\\\p{P}&&[^),;\\\\]`}]])\" }, { \"captures\": { \"1\": { \"name\": \"keyword.operator.infix.tight.at.haskell\" } }, \"match\": \"(?x)\\n(?<=[\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}\\\\)\\\\}\\\\]])\\n(@)\\n(?=[\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}\\\\(\\\\[\\\\{])\" }, { \"captures\": { \"1\": { \"name\": \"keyword.operator.prefix.tilde.haskell\" }, \"2\": { \"name\": \"keyword.operator.prefix.bang.haskell\" }, \"3\": { \"name\": \"keyword.operator.prefix.minus.haskell\" }, \"4\": { \"name\": \"keyword.operator.prefix.dollar.haskell\" }, \"5\": { \"name\": \"keyword.operator.prefix.double-dollar.haskell\" } }, \"match\": \"(?x)\\n(?<![\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}\\\\p{S}\\\\p{P}&&[^(,;\\\\[`{]])\\n(?:(~)|(!)|(-)|(\\\\$)|(\\\\$\\\\$))\\n(?=[\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}\\\\(\\\\{\\\\[])\" }] }, \"role_annotation\": { \"patterns\": [{ \"begin\": \"^(\\\\s*)(type)\\\\s+(role)\\\\b(?!')\", \"beginCaptures\": { \"2\": { \"name\": \"keyword.other.type.haskell\" }, \"3\": { \"name\": \"keyword.other.role.haskell\" } }, \"end\": \"(?x)\\n(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\", \"name\": \"meta.role-annotation.haskell\", \"patterns\": [{ \"include\": \"#comment_like\" }, { \"include\": \"#type_constructor\" }, { \"captures\": { \"1\": { \"name\": \"keyword.other.role.$1.haskell\" } }, \"match\": \"\\\\b(?<!')(nominal|representational|phantom)\\\\b(?!')\" }] }] }, \"start_type_signature\": { \"patterns\": [{ \"begin\": \"^(\\\\s*)(::|\\u2237)(?![\\\\p{S}\\\\p{P}&&[^\\\\(,;\\\\[`{_\\\"']])\\\\s*\", \"beginCaptures\": { \"2\": { \"name\": \"keyword.operator.double-colon.haskell\" } }, \"end\": \"(?x)\\n\\n(?=\\n\\\\#?\\\\)\\n|\\\\]\\n|,\\n|(?<!')\\\\b(in|then|else|of)\\\\b(?!')\\n|\\n(?<![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n(?:\\n(\\\\\\\\|\\u03BB)\\n|(<-|\\u2190)\\n|(=)\\n|(-<|\\u21A2)\\n|(-<<|\\u291B)\\n)\\n([(),;\\\\[\\\\]`{}_\\\"']|[^\\\\p{S}\\\\p{P}])\\n|(\\\\#|@)-\\\\}\\n\\n| (?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s*\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\\n)\", \"name\": \"meta.type-declaration.haskell\", \"patterns\": [{ \"include\": \"#type_signature\" }] }, { \"begin\": \"(?<![\\\\p{S}\\\\p{P}&&[^\\\\(,;\\\\[`{_\\\"']])(::|\\u2237)(?![\\\\p{S}\\\\p{P}&&[^\\\\(,;\\\\[`{_\\\"']])\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.double-colon.haskell\" } }, \"end\": \"(?x)\\n\\n(?=\\n\\\\#?\\\\)\\n|\\\\]\\n|,\\n|\\\\b(?<!')(in|then|else|of)\\\\b(?!')\\n|(\\\\#|@)-\\\\}\\n|\\n(?<![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n(?:\\n(\\\\\\\\|\\u03BB)\\n|(<-|\\u2190)\\n|(=)\\n|(-<|\\u21A2)\\n|(-<<|\\u291B)\\n)\\n([(),;\\\\[\\\\]`{}_\\\"']|[^\\\\p{S}\\\\p{P}])\\n\\n|(?=\\\\}|;)\\n|$\\n)\", \"patterns\": [{ \"include\": \"#type_signature\" }] }] }, \"string_literal\": { \"begin\": '\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.haskell\" } }, \"end\": '\"', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.haskell\" } }, \"name\": \"string.quoted.double.haskell\", \"patterns\": [{ \"match\": `\\\\\\\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\\\\\\\\"'\\\\&])`, \"name\": \"constant.character.escape.haskell\" }, { \"match\": \"\\\\\\\\o[0-7]+|\\\\\\\\x[0-9A-Fa-f]+|\\\\\\\\[0-9]+\", \"name\": \"constant.character.escape.octal.haskell\" }, { \"match\": \"\\\\\\\\\\\\^[A-Z@\\\\[\\\\]\\\\\\\\\\\\^_]\", \"name\": \"constant.character.escape.control.haskell\" }, { \"begin\": \"\\\\\\\\\\\\s\", \"beginCaptures\": { \"0\": { \"name\": \"constant.character.escape.begin.haskell\" } }, \"end\": \"\\\\\\\\\", \"endCaptures\": { \"0\": { \"name\": \"constant.character.escape.end.haskell\" } }, \"patterns\": [{ \"match\": \"\\\\S+\", \"name\": \"invalid.illegal.character-not-allowed-here.haskell\" }] }] }, \"type_application\": { \"patterns\": [{ \"begin\": `(?<=[\\\\s,;\\\\[\\\\]{}\"])(@)(')?(\\\\()`, \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.prefix.at.haskell\" }, \"2\": { \"name\": \"keyword.operator.promotion.haskell\" }, \"3\": { \"name\": \"punctuation.paren.haskell\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.paren.haskell\" } }, \"name\": \"meta.type-application.haskell\", \"patterns\": [{ \"include\": \"#type_signature\" }] }, { \"begin\": `(?<=[\\\\s,;\\\\[\\\\]{}\"])(@)(')?(\\\\[)`, \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.prefix.at.haskell\" }, \"2\": { \"name\": \"keyword.operator.promotion.haskell\" }, \"3\": { \"name\": \"punctuation.bracket.haskell\" } }, \"end\": \"\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.bracket.haskell\" } }, \"name\": \"meta.type-application.haskell\", \"patterns\": [{ \"include\": \"#type_signature\" }] }, { \"begin\": '(?<=[\\\\s,;\\\\[\\\\]{}\"])(@)(?=\\\\\")', \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.prefix.at.haskell\" } }, \"end\": '(?<=\\\\\")', \"name\": \"meta.type-application.haskell\", \"patterns\": [{ \"include\": \"#string_literal\" }] }, { \"begin\": `(?<=[\\\\s,;\\\\[\\\\]{}\"])(@)(?=[\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}'])`, \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.prefix.at.haskell\" } }, \"end\": \"(?![\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}'])\", \"name\": \"meta.type-application.haskell\", \"patterns\": [{ \"include\": \"#type_signature\" }] }] }, \"type_constructor\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"keyword.operator.promotion.haskell\" }, \"2\": { \"name\": \"entity.name.namespace.haskell\" }, \"3\": { \"name\": \"storage.type.haskell\" } }, \"match\": \"(?x)\\n\\n(')?\\n\\n((?:\\\\b[\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*\\\\.)*)\\n\\n(\\\\b[\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*)\" }, { \"captures\": { \"1\": { \"name\": \"keyword.operator.promotion.haskell\" }, \"2\": { \"name\": \"punctuation.paren.haskell\" }, \"3\": { \"name\": \"entity.name.namespace.haskell\" }, \"4\": { \"name\": \"storage.type.operator.haskell\" }, \"5\": { \"name\": \"punctuation.paren.haskell\" } }, \"match\": \"(?x)\\n\\n(')?\\n\\n(\\\\()\\\\s*\\n\\n((?:[\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*\\\\.)*)\\n\\n([\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]+)\\n\\n\\\\s*(\\\\))\" }] }, \"type_operator\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"keyword.operator.promotion.haskell\" }, \"2\": { \"name\": \"entity.name.namespace.haskell\" }, \"3\": { \"name\": \"storage.type.operator.infix.haskell\" } }, \"match\": \"(?x)\\n\\n(?:(?<!')('))?\\n\\n((?:\\\\b[\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*\\\\.)*)\\n\\n(?![#@]?-})(\\\\#+|[\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]+(?<!\\\\#))\\n\" }, { \"captures\": { \"1\": { \"name\": \"keyword.operator.promotion.haskell\" }, \"2\": { \"name\": \"punctuation.backtick.haskell\" }, \"3\": { \"name\": \"entity.name.namespace.haskell\" }, \"4\": { \"name\": \"storage.type.infix.haskell\" }, \"5\": { \"name\": \"punctuation.backtick.haskell\" } }, \"match\": \"(?x)\\n\\n(')?\\n\\n(\\\\`)\\n\\n((?:[\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*\\\\.)*)\\n\\n([\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*)\\n\\n(`)\" }] }, \"type_signature\": { \"patterns\": [{ \"include\": \"#comment_like\" }, { \"captures\": { \"1\": { \"name\": \"keyword.operator.promotion.haskell\" }, \"2\": { \"name\": \"punctuation.paren.haskell\" }, \"3\": { \"name\": \"punctuation.paren.haskell\" } }, \"match\": \"(')?(\\\\()\\\\s*(\\\\))\", \"name\": \"support.constant.unit.haskell\" }, { \"captures\": { \"1\": { \"name\": \"punctuation.paren.haskell\" }, \"2\": { \"name\": \"keyword.operator.hash.haskell\" }, \"3\": { \"name\": \"keyword.operator.hash.haskell\" }, \"4\": { \"name\": \"punctuation.paren.haskell\" } }, \"match\": \"(\\\\()(#)\\\\s*(#)(\\\\))\", \"name\": \"support.constant.unit.unboxed.haskell\" }, { \"captures\": { \"1\": { \"name\": \"keyword.operator.promotion.haskell\" }, \"2\": { \"name\": \"punctuation.paren.haskell\" }, \"3\": { \"name\": \"punctuation.paren.haskell\" } }, \"match\": \"(')?(\\\\()\\\\s*,[\\\\s,]*(\\\\))\", \"name\": \"support.constant.tuple.haskell\" }, { \"captures\": { \"1\": { \"name\": \"punctuation.paren.haskell\" }, \"2\": { \"name\": \"keyword.operator.hash.haskell\" }, \"3\": { \"name\": \"keyword.operator.hash.haskell\" }, \"4\": { \"name\": \"punctuation.paren.haskell\" } }, \"match\": \"(\\\\()(#)\\\\s*(#)(\\\\))\", \"name\": \"support.constant.unit.unboxed.haskell\" }, { \"captures\": { \"1\": { \"name\": \"punctuation.paren.haskell\" }, \"2\": { \"name\": \"keyword.operator.hash.haskell\" }, \"3\": { \"name\": \"keyword.operator.hash.haskell\" }, \"4\": { \"name\": \"punctuation.paren.haskell\" } }, \"match\": \"(\\\\()(#)\\\\s*,[\\\\s,]*(#)(\\\\))\", \"name\": \"support.constant.tuple.unboxed.haskell\" }, { \"captures\": { \"1\": { \"name\": \"keyword.operator.promotion.haskell\" }, \"2\": { \"name\": \"punctuation.bracket.haskell\" }, \"3\": { \"name\": \"punctuation.bracket.haskell\" } }, \"match\": \"(')?(\\\\[)\\\\s*(\\\\])\", \"name\": \"support.constant.empty-list.haskell\" }, { \"include\": \"#integer_literals\" }, { \"match\": \"(::|\\u2237)(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\", \"name\": \"keyword.operator.double-colon.haskell\" }, { \"include\": \"#forall\" }, { \"match\": \"=>|\\u21D2\", \"name\": \"keyword.operator.big-arrow.haskell\" }, { \"include\": \"#string_literal\" }, { \"match\": \"'[^']'\", \"name\": \"invalid\" }, { \"include\": \"#type_application\" }, { \"include\": \"#reserved_symbol\" }, { \"include\": \"#type_operator\" }, { \"include\": \"#type_constructor\" }, { \"begin\": \"(\\\\()(#)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.paren.haskell\" }, \"2\": { \"name\": \"keyword.operator.hash.haskell\" } }, \"end\": \"(#)(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"keyword.operator.hash.haskell\" }, \"2\": { \"name\": \"punctuation.paren.haskell\" } }, \"patterns\": [{ \"include\": \"#comma\" }, { \"include\": \"#type_signature\" }] }, { \"begin\": \"(')?(\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.promotion.haskell\" }, \"2\": { \"name\": \"punctuation.paren.haskell\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.paren.haskell\" } }, \"patterns\": [{ \"include\": \"#comma\" }, { \"include\": \"#type_signature\" }] }, { \"begin\": \"(')?(\\\\[)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.promotion.haskell\" }, \"2\": { \"name\": \"punctuation.bracket.haskell\" } }, \"end\": \"(\\\\])\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.bracket.haskell\" } }, \"patterns\": [{ \"include\": \"#comma\" }, { \"include\": \"#type_signature\" }] }, { \"include\": \"#type_variable\" }] }, \"type_variable\": { \"match\": \"\\\\b(?<!')(?!(?:forall|deriving)\\\\b(?!'))[\\\\p{Ll}_][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*\", \"name\": \"variable.other.generic-type.haskell\" }, \"where\": { \"patterns\": [{ \"begin\": \"(?x)\\n(?<!')\\\\b(where)\\n\\\\s*(\\\\{)(?!-)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.other.where.haskell\" }, \"2\": { \"name\": \"punctuation.brace.haskell\" } }, \"end\": \"(\\\\})\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.brace.haskell\" } }, \"patterns\": [{ \"include\": \"$self\" }, { \"match\": \";\", \"name\": \"punctuation.semicolon.haskell\" }] }, { \"match\": \"\\\\b(?<!')(where)\\\\b(?!')\", \"name\": \"keyword.other.where.haskell\" }] } }, \"scopeName\": \"source.haskell\", \"aliases\": [\"hs\"] });\nvar haskell = [\n  lang\n];\n\nexport { haskell as default };\n"],"x_google_ignoreList":[0]}