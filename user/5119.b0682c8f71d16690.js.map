{"version":3,"file":"5119.b0682c8f71d16690.js","mappings":"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","names":["hcl","Object","freeze","displayName","fileTypes","name","patterns","include","repository","attribute_access","begin","beginCaptures","comment","end","endCaptures","match","attribute_definition","captures","attribute_splat","block","block_inline_comments","brackets","char_escapes","comma","comments","double_slash_line_comments","expressions","for_expression_body","functions","hash_line_comments","hcl_type_keywords","heredoc","inline_for_expression","inline_if_expression","language_constants","literal_values","local_identifiers","numeric_literals","object_for_expression","object_key_values","objects","operators","parens","string_interpolation","string_literals","tuple_for_expression","scopeName"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/shiki/dist/langs/hcl.mjs"],"sourcesContent":["const lang = Object.freeze({ \"displayName\": \"HashiCorp HCL\", \"fileTypes\": [\"hcl\"], \"name\": \"hcl\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#attribute_definition\" }, { \"include\": \"#block\" }, { \"include\": \"#expressions\" }], \"repository\": { \"attribute_access\": { \"begin\": \"\\\\.(?!\\\\*)\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.accessor.hcl\" } }, \"comment\": \"Matches traversal attribute access such as .attr\", \"end\": \"[[:alpha:]][\\\\w-]*|\\\\d*\", \"endCaptures\": { \"0\": { \"patterns\": [{ \"comment\": \"Attribute name\", \"match\": \"(?!null|false|true)[[:alpha:]][\\\\w-]*\", \"name\": \"variable.other.member.hcl\" }, { \"comment\": \"Optional attribute index\", \"match\": \"\\\\d+\", \"name\": \"constant.numeric.integer.hcl\" }] } } }, \"attribute_definition\": { \"captures\": { \"1\": { \"name\": \"punctuation.section.parens.begin.hcl\" }, \"2\": { \"name\": \"variable.other.readwrite.hcl\" }, \"3\": { \"name\": \"punctuation.section.parens.end.hcl\" }, \"4\": { \"name\": \"keyword.operator.assignment.hcl\" } }, \"comment\": 'Identifier \"=\" with optional parens', \"match\": \"(\\\\()?(\\\\b(?!null\\\\b|false\\\\b|true\\\\b)[[:alpha:]][[:alnum:]_-]*)(\\\\))?\\\\s*(\\\\=(?!\\\\=|\\\\>))\\\\s*\", \"name\": \"variable.declaration.hcl\" }, \"attribute_splat\": { \"begin\": \"\\\\.\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.accessor.hcl\" } }, \"comment\": \"Legacy attribute-only splat\", \"end\": \"\\\\*\", \"endCaptures\": { \"0\": { \"name\": \"keyword.operator.splat.hcl\" } } }, \"block\": { \"begin\": \"([\\\\w][\\\\-\\\\w]*)([^?\\\\r\\\\n]*)(\\\\{)\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"comment\": \"Block type\", \"match\": \"\\\\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\\\\b\", \"name\": \"entity.name.type.hcl\" }] }, \"2\": { \"patterns\": [{ \"comment\": \"Block label (String Literal)\", \"match\": '\\\\\"[^\\\\\"\\\\r\\\\n]*\\\\\"', \"name\": \"variable.other.enummember.hcl\" }, { \"comment\": \"Block label (Indentifier)\", \"match\": \"[[:alpha:]][[:alnum:]_-]*\", \"name\": \"variable.other.enummember.hcl\" }] }, \"3\": { \"name\": \"punctuation.section.block.begin.hcl\" } }, \"comment\": 'This will match HCL blocks like `thing1 \"one\" \"two\" {` or `thing2 {`', \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.section.block.end.hcl\" } }, \"name\": \"meta.block.hcl\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#attribute_definition\" }, { \"include\": \"#expressions\" }, { \"include\": \"#block\" }] }, \"block_inline_comments\": { \"begin\": \"/\\\\*\", \"captures\": { \"0\": { \"name\": \"punctuation.definition.comment.hcl\" } }, \"comment\": \"Inline comments start with the /* sequence and end with the */ sequence, and may have any characters within except the ending sequence. An inline comment is considered equivalent to a whitespace sequence\", \"end\": \"\\\\*/\", \"name\": \"comment.block.hcl\" }, \"brackets\": { \"begin\": \"\\\\[\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.section.brackets.begin.hcl\" } }, \"end\": \"\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.section.brackets.end.hcl\" } }, \"patterns\": [{ \"comment\": \"Splat operator\", \"match\": \"\\\\*\", \"name\": \"keyword.operator.splat.hcl\" }, { \"include\": \"#comma\" }, { \"include\": \"#comments\" }, { \"include\": \"#inline_for_expression\" }, { \"include\": \"#inline_if_expression\" }, { \"include\": \"#expressions\" }, { \"include\": \"#local_identifiers\" }] }, \"char_escapes\": { \"comment\": \"Character Escapes\", \"match\": '\\\\\\\\[nrt\"\\\\\\\\]|\\\\\\\\u(\\\\h{8}|\\\\h{4})', \"name\": \"constant.character.escape.hcl\" }, \"comma\": { \"comment\": \"Commas - used in certain expressions\", \"match\": \"\\\\,\", \"name\": \"punctuation.separator.hcl\" }, \"comments\": { \"patterns\": [{ \"include\": \"#hash_line_comments\" }, { \"include\": \"#double_slash_line_comments\" }, { \"include\": \"#block_inline_comments\" }] }, \"double_slash_line_comments\": { \"begin\": \"//\", \"captures\": { \"0\": { \"name\": \"punctuation.definition.comment.hcl\" } }, \"comment\": \"Line comments start with // sequence and end with the next newline sequence. A line comment is considered equivalent to a newline sequence\", \"end\": \"$\\\\n?\", \"name\": \"comment.line.double-slash.hcl\" }, \"expressions\": { \"patterns\": [{ \"include\": \"#literal_values\" }, { \"include\": \"#operators\" }, { \"include\": \"#tuple_for_expression\" }, { \"include\": \"#object_for_expression\" }, { \"include\": \"#brackets\" }, { \"include\": \"#objects\" }, { \"include\": \"#attribute_access\" }, { \"include\": \"#attribute_splat\" }, { \"include\": \"#functions\" }, { \"include\": \"#parens\" }] }, \"for_expression_body\": { \"patterns\": [{ \"comment\": \"in keyword\", \"match\": \"\\\\bin\\\\b\", \"name\": \"keyword.operator.word.hcl\" }, { \"comment\": \"if keyword\", \"match\": \"\\\\bif\\\\b\", \"name\": \"keyword.control.conditional.hcl\" }, { \"match\": \"\\\\:\", \"name\": \"keyword.operator.hcl\" }, { \"include\": \"#expressions\" }, { \"include\": \"#comments\" }, { \"include\": \"#comma\" }, { \"include\": \"#local_identifiers\" }] }, \"functions\": { \"begin\": \"([:\\\\-\\\\w]+)(\\\\()\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"match\": \"\\\\b[[:alpha:]][\\\\w_-]*::([[:alpha:]][\\\\w_-]*::)?[[:alpha:]][\\\\w_-]*\\\\b\", \"name\": \"support.function.namespaced.hcl\" }, { \"match\": \"\\\\b[[:alpha:]][\\\\w_-]*\\\\b\", \"name\": \"support.function.builtin.hcl\" }] }, \"2\": { \"name\": \"punctuation.section.parens.begin.hcl\" } }, \"comment\": \"Built-in function calls\", \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.section.parens.end.hcl\" } }, \"name\": \"meta.function-call.hcl\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#expressions\" }, { \"include\": \"#comma\" }] }, \"hash_line_comments\": { \"begin\": \"#\", \"captures\": { \"0\": { \"name\": \"punctuation.definition.comment.hcl\" } }, \"comment\": \"Line comments start with # sequence and end with the next newline sequence. A line comment is considered equivalent to a newline sequence\", \"end\": \"$\\\\n?\", \"name\": \"comment.line.number-sign.hcl\" }, \"hcl_type_keywords\": { \"comment\": \"Type keywords known to HCL.\", \"match\": \"\\\\b(any|string|number|bool|list|set|map|tuple|object)\\\\b\", \"name\": \"storage.type.hcl\" }, \"heredoc\": { \"begin\": \"(\\\\<\\\\<\\\\-?)\\\\s*(\\\\w+)\\\\s*$\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.heredoc.hcl\" }, \"2\": { \"name\": \"keyword.control.heredoc.hcl\" } }, \"comment\": \"String Heredoc\", \"end\": \"^\\\\s*\\\\2\\\\s*$\", \"endCaptures\": { \"0\": { \"name\": \"keyword.control.heredoc.hcl\" } }, \"name\": \"string.unquoted.heredoc.hcl\", \"patterns\": [{ \"include\": \"#string_interpolation\" }] }, \"inline_for_expression\": { \"captures\": { \"1\": { \"name\": \"keyword.control.hcl\" }, \"2\": { \"patterns\": [{ \"match\": \"\\\\=\\\\>\", \"name\": \"storage.type.function.hcl\" }, { \"include\": \"#for_expression_body\" }] } }, \"match\": \"(for)\\\\b(.*)\\\\n\" }, \"inline_if_expression\": { \"begin\": \"(if)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.conditional.hcl\" } }, \"end\": \"\\\\n\", \"patterns\": [{ \"include\": \"#expressions\" }, { \"include\": \"#comments\" }, { \"include\": \"#comma\" }, { \"include\": \"#local_identifiers\" }] }, \"language_constants\": { \"comment\": \"Language Constants\", \"match\": \"\\\\b(true|false|null)\\\\b\", \"name\": \"constant.language.hcl\" }, \"literal_values\": { \"patterns\": [{ \"include\": \"#numeric_literals\" }, { \"include\": \"#language_constants\" }, { \"include\": \"#string_literals\" }, { \"include\": \"#heredoc\" }, { \"include\": \"#hcl_type_keywords\" }] }, \"local_identifiers\": { \"comment\": \"Local Identifiers\", \"match\": \"\\\\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\\\\b\", \"name\": \"variable.other.readwrite.hcl\" }, \"numeric_literals\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"punctuation.separator.exponent.hcl\" } }, \"comment\": \"Integer, no fraction, optional exponent\", \"match\": \"\\\\b\\\\d+([Ee][+-]?)\\\\d+\\\\b\", \"name\": \"constant.numeric.float.hcl\" }, { \"captures\": { \"1\": { \"name\": \"punctuation.separator.decimal.hcl\" }, \"2\": { \"name\": \"punctuation.separator.exponent.hcl\" } }, \"comment\": \"Integer, fraction, optional exponent\", \"match\": \"\\\\b\\\\d+(\\\\.)\\\\d+(?:([Ee][+-]?)\\\\d+)?\\\\b\", \"name\": \"constant.numeric.float.hcl\" }, { \"comment\": \"Integers\", \"match\": \"\\\\b\\\\d+\\\\b\", \"name\": \"constant.numeric.integer.hcl\" }] }, \"object_for_expression\": { \"begin\": \"(\\\\{)\\\\s?(for)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.section.braces.begin.hcl\" }, \"2\": { \"name\": \"keyword.control.hcl\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.section.braces.end.hcl\" } }, \"patterns\": [{ \"match\": \"\\\\=\\\\>\", \"name\": \"storage.type.function.hcl\" }, { \"include\": \"#for_expression_body\" }] }, \"object_key_values\": { \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#literal_values\" }, { \"include\": \"#operators\" }, { \"include\": \"#tuple_for_expression\" }, { \"include\": \"#object_for_expression\" }, { \"include\": \"#heredoc\" }, { \"include\": \"#functions\" }] }, \"objects\": { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.section.braces.begin.hcl\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.section.braces.end.hcl\" } }, \"name\": \"meta.braces.hcl\", \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#objects\" }, { \"include\": \"#inline_for_expression\" }, { \"include\": \"#inline_if_expression\" }, { \"captures\": { \"1\": { \"name\": \"meta.mapping.key.hcl variable.other.readwrite.hcl\" }, \"2\": { \"name\": \"keyword.operator.assignment.hcl\" } }, \"comment\": \"Literal, named object key\", \"match\": \"\\\\b((?!null|false|true)[[:alpha:]][[:alnum:]_-]*)\\\\s*(\\\\=(?!=))\\\\s*\" }, { \"captures\": { \"1\": { \"name\": \"meta.mapping.key.hcl string.quoted.double.hcl\" }, \"2\": { \"name\": \"punctuation.definition.string.begin.hcl\" }, \"3\": { \"name\": \"punctuation.definition.string.end.hcl\" }, \"4\": { \"name\": \"keyword.operator.hcl\" } }, \"comment\": \"String object key\", \"match\": '^\\\\s*((\").*(\"))\\\\s*(\\\\=)\\\\s*' }, { \"begin\": \"^\\\\s*\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.section.parens.begin.hcl\" } }, \"comment\": \"Computed object key (any expression between parens)\", \"end\": \"(\\\\))\\\\s*(=|:)\\\\s*\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.section.parens.end.hcl\" }, \"2\": { \"name\": \"keyword.operator.hcl\" } }, \"name\": \"meta.mapping.key.hcl\", \"patterns\": [{ \"include\": \"#attribute_access\" }, { \"include\": \"#attribute_splat\" }] }, { \"include\": \"#object_key_values\" }] }, \"operators\": { \"patterns\": [{ \"match\": \"\\\\>\\\\=\", \"name\": \"keyword.operator.hcl\" }, { \"match\": \"\\\\<\\\\=\", \"name\": \"keyword.operator.hcl\" }, { \"match\": \"\\\\=\\\\=\", \"name\": \"keyword.operator.hcl\" }, { \"match\": \"\\\\!\\\\=\", \"name\": \"keyword.operator.hcl\" }, { \"match\": \"\\\\+\", \"name\": \"keyword.operator.arithmetic.hcl\" }, { \"match\": \"\\\\-\", \"name\": \"keyword.operator.arithmetic.hcl\" }, { \"match\": \"\\\\*\", \"name\": \"keyword.operator.arithmetic.hcl\" }, { \"match\": \"\\\\/\", \"name\": \"keyword.operator.arithmetic.hcl\" }, { \"match\": \"\\\\%\", \"name\": \"keyword.operator.arithmetic.hcl\" }, { \"match\": \"\\\\&\\\\&\", \"name\": \"keyword.operator.logical.hcl\" }, { \"match\": \"\\\\|\\\\|\", \"name\": \"keyword.operator.logical.hcl\" }, { \"match\": \"\\\\!\", \"name\": \"keyword.operator.logical.hcl\" }, { \"match\": \"\\\\>\", \"name\": \"keyword.operator.hcl\" }, { \"match\": \"\\\\<\", \"name\": \"keyword.operator.hcl\" }, { \"match\": \"\\\\?\", \"name\": \"keyword.operator.hcl\" }, { \"match\": \"\\\\.\\\\.\\\\.\", \"name\": \"keyword.operator.hcl\" }, { \"match\": \"\\\\:\", \"name\": \"keyword.operator.hcl\" }, { \"match\": \"\\\\=\\\\>\", \"name\": \"keyword.operator.hcl\" }] }, \"parens\": { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.section.parens.begin.hcl\" } }, \"comment\": \"Parens - matched *after* function syntax\", \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.section.parens.end.hcl\" } }, \"patterns\": [{ \"include\": \"#comments\" }, { \"include\": \"#expressions\" }] }, \"string_interpolation\": { \"begin\": \"(?<![%$])([%$]{)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.other.interpolation.begin.hcl\" } }, \"comment\": \"String interpolation\", \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"keyword.other.interpolation.end.hcl\" } }, \"name\": \"meta.interpolation.hcl\", \"patterns\": [{ \"comment\": \"Trim left whitespace\", \"match\": \"\\\\~\\\\s\", \"name\": \"keyword.operator.template.left.trim.hcl\" }, { \"comment\": \"Trim right whitespace\", \"match\": \"\\\\s\\\\~\", \"name\": \"keyword.operator.template.right.trim.hcl\" }, { \"comment\": \"if/else/endif and for/in/endfor directives\", \"match\": \"\\\\b(if|else|endif|for|in|endfor)\\\\b\", \"name\": \"keyword.control.hcl\" }, { \"include\": \"#expressions\" }, { \"include\": \"#local_identifiers\" }] }, \"string_literals\": { \"begin\": '\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.hcl\" } }, \"comment\": \"Strings\", \"end\": '\"', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.hcl\" } }, \"name\": \"string.quoted.double.hcl\", \"patterns\": [{ \"include\": \"#string_interpolation\" }, { \"include\": \"#char_escapes\" }] }, \"tuple_for_expression\": { \"begin\": \"(\\\\[)\\\\s?(for)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.section.brackets.begin.hcl\" }, \"2\": { \"name\": \"keyword.control.hcl\" } }, \"end\": \"\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.section.brackets.end.hcl\" } }, \"patterns\": [{ \"include\": \"#for_expression_body\" }] } }, \"scopeName\": \"source.hcl\" });\nvar hcl = [\n  lang\n];\n\nexport { hcl as default };\n"],"x_google_ignoreList":[0]}