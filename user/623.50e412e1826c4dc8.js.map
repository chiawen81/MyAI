{"version":3,"file":"623.50e412e1826c4dc8.js","mappings":"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","names":["powerquery","Object","freeze","displayName","fileTypes","name","patterns","include","repository","BlockComment","begin","end","DecimalNumber","match","DotOperators","captures","EscapeSequence","beginCaptures","endCaptures","FloatNumber","HexNumber","Identifier","ImplicitVariable","InclusiveIdentifier","IntNumber","IntrinsicVariable","Keywords","LineComment","LiteralExpression","LogicalConstant","Noise","NullConstant","NumericConstant","Operators","Punctuation","QuotedIdentifier","RecordExpression","contentName","String","TypeName","Whitespace","scopeName"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/shiki/dist/langs/powerquery.mjs"],"sourcesContent":["const lang = Object.freeze({ \"displayName\": \"PowerQuery\", \"fileTypes\": [\"pq\", \"pqm\"], \"name\": \"powerquery\", \"patterns\": [{ \"include\": \"#Noise\" }, { \"include\": \"#LiteralExpression\" }, { \"include\": \"#Keywords\" }, { \"include\": \"#ImplicitVariable\" }, { \"include\": \"#IntrinsicVariable\" }, { \"include\": \"#Operators\" }, { \"include\": \"#DotOperators\" }, { \"include\": \"#TypeName\" }, { \"include\": \"#RecordExpression\" }, { \"include\": \"#Punctuation\" }, { \"include\": \"#QuotedIdentifier\" }, { \"include\": \"#Identifier\" }], \"repository\": { \"BlockComment\": { \"begin\": \"/\\\\*\", \"end\": \"\\\\*/\", \"name\": \"comment.block.powerquery\" }, \"DecimalNumber\": { \"match\": \"(?<![\\\\d\\\\w])(\\\\d*\\\\.\\\\d+)\\\\b\", \"name\": \"constant.numeric.decimal.powerquery\" }, \"DotOperators\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.ellipsis.powerquery\" }, \"2\": { \"name\": \"keyword.operator.list.powerquery\" } }, \"match\": \"(?<!\\\\.)(?:(\\\\.\\\\.\\\\.)|(\\\\.\\\\.))(?!\\\\.)\" }, \"EscapeSequence\": { \"begin\": \"#\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.escapesequence.begin.powerquery\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.escapesequence.end.powerquery\" } }, \"name\": \"constant.character.escapesequence.powerquery\", \"patterns\": [{ \"match\": \"(#|\\\\h{4}|\\\\h{8}|cr|lf|tab)(?:,(#|\\\\h{4}|\\\\h{8}|cr|lf|tab))*\" }, { \"match\": \"[^\\\\)]\", \"name\": \"invalid.illegal.escapesequence.powerquery\" }] }, \"FloatNumber\": { \"match\": \"(\\\\d*\\\\.)?\\\\d+(e|E)(\\\\+|-)?\\\\d+\", \"name\": \"constant.numeric.float.powerquery\" }, \"HexNumber\": { \"match\": \"0(x|X)\\\\h+\", \"name\": \"constant.numeric.integer.hexadecimal.powerquery\" }, \"Identifier\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.inclusiveidentifier.powerquery\" }, \"2\": { \"name\": \"entity.name.powerquery\" } }, \"match\": \"(?x:(?<![\\\\._\\\\p{Lu}\\\\p{Ll}\\\\p{Lt}\\\\p{Lm}\\\\p{Lo}\\\\p{Nl}\\\\p{Nd}\\\\p{Pc}\\\\p{Mn}\\\\p{Mc}\\\\p{Cf}])(@?)([_\\\\p{Lu}\\\\p{Ll}\\\\p{Lt}\\\\p{Lm}\\\\p{Lo}\\\\p{Nl}][_\\\\p{Lu}\\\\p{Ll}\\\\p{Lt}\\\\p{Lm}\\\\p{Lo}\\\\p{Nl}\\\\p{Nd}\\\\p{Pc}\\\\p{Mn}\\\\p{Mc}\\\\p{Cf}]*(?:\\\\.[_\\\\p{Lu}\\\\p{Ll}\\\\p{Lt}\\\\p{Lm}\\\\p{Lo}\\\\p{Nl}][_\\\\p{Lu}\\\\p{Ll}\\\\p{Lt}\\\\p{Lm}\\\\p{Lo}\\\\p{Nl}\\\\p{Nd}\\\\p{Pc}\\\\p{Mn}\\\\p{Mc}\\\\p{Cf}])*)\\\\b)\" }, \"ImplicitVariable\": { \"match\": \"\\\\b_\\\\b\", \"name\": \"keyword.operator.implicitvariable.powerquery\" }, \"InclusiveIdentifier\": { \"captures\": { \"0\": { \"name\": \"inclusiveidentifier.powerquery\" } }, \"match\": \"@\" }, \"IntNumber\": { \"captures\": { \"1\": { \"name\": \"constant.numeric.integer.powerquery\" } }, \"match\": \"\\\\b(\\\\d+)\\\\b\" }, \"IntrinsicVariable\": { \"captures\": { \"1\": { \"name\": \"constant.language.intrinsicvariable.powerquery\" } }, \"match\": \"(?<![\\\\d\\\\w])(#sections|#shared)\\\\b\" }, \"Keywords\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.word.logical.powerquery\" }, \"2\": { \"name\": \"keyword.control.conditional.powerquery\" }, \"3\": { \"name\": \"keyword.control.exception.powerquery\" }, \"4\": { \"name\": \"keyword.other.powerquery\" }, \"5\": { \"name\": \"keyword.powerquery\" } }, \"match\": \"\\\\b(?:(and|or|not)|(if|then|else)|(try|otherwise)|(as|each|in|is|let|meta|type|error)|(section|shared))\\\\b\" }, \"LineComment\": { \"match\": \"//.*\", \"name\": \"comment.line.double-slash.powerquery\" }, \"LiteralExpression\": { \"patterns\": [{ \"include\": \"#String\" }, { \"include\": \"#NumericConstant\" }, { \"include\": \"#LogicalConstant\" }, { \"include\": \"#NullConstant\" }, { \"include\": \"#FloatNumber\" }, { \"include\": \"#DecimalNumber\" }, { \"include\": \"#HexNumber\" }, { \"include\": \"#IntNumber\" }] }, \"LogicalConstant\": { \"match\": \"\\\\b(true|false)\\\\b\", \"name\": \"constant.language.logical.powerquery\" }, \"Noise\": { \"patterns\": [{ \"include\": \"#BlockComment\" }, { \"include\": \"#LineComment\" }, { \"include\": \"#Whitespace\" }] }, \"NullConstant\": { \"match\": \"\\\\b(null)\\\\b\", \"name\": \"constant.language.null.powerquery\" }, \"NumericConstant\": { \"captures\": { \"1\": { \"name\": \"constant.language.numeric.float.powerquery\" } }, \"match\": \"(?<![\\\\d\\\\w])(#infinity|#nan)\\\\b\" }, \"Operators\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.function.powerquery\" }, \"2\": { \"name\": \"keyword.operator.assignment-or-comparison.powerquery\" }, \"3\": { \"name\": \"keyword.operator.comparison.powerquery\" }, \"4\": { \"name\": \"keyword.operator.combination.powerquery\" }, \"5\": { \"name\": \"keyword.operator.arithmetic.powerquery\" }, \"6\": { \"name\": \"keyword.operator.sectionaccess.powerquery\" }, \"7\": { \"name\": \"keyword.operator.optional.powerquery\" } }, \"match\": \"(=>)|(=)|(<>|<|>|<=|>=)|(&)|(\\\\+|-|\\\\*|\\\\/)|(!)|(\\\\?)\" }, \"Punctuation\": { \"captures\": { \"1\": { \"name\": \"punctuation.separator.powerquery\" }, \"2\": { \"name\": \"punctuation.section.parens.begin.powerquery\" }, \"3\": { \"name\": \"punctuation.section.parens.end.powerquery\" }, \"4\": { \"name\": \"punctuation.section.braces.begin.powerquery\" }, \"5\": { \"name\": \"punctuation.section.braces.end.powerquery\" } }, \"match\": \"(,)|(\\\\()|(\\\\))|({)|(})\" }, \"QuotedIdentifier\": { \"begin\": '#\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.quotedidentifier.begin.powerquery\" } }, \"end\": '\"(?!\")', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.quotedidentifier.end.powerquery\" } }, \"name\": \"entity.name.powerquery\", \"patterns\": [{ \"match\": '\"\"', \"name\": \"constant.character.escape.quote.powerquery\" }, { \"include\": \"#EscapeSequence\" }] }, \"RecordExpression\": { \"begin\": \"\\\\[\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.section.brackets.begin.powerquery\" } }, \"contentName\": \"meta.recordexpression.powerquery\", \"end\": \"\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.section.brackets.end.powerquery\" } }, \"patterns\": [{ \"include\": \"$self\" }] }, \"String\": { \"begin\": '\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.powerquery\" } }, \"end\": '\"(?!\")', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.powerquery\" } }, \"name\": \"string.quoted.double.powerquery\", \"patterns\": [{ \"match\": '\"\"', \"name\": \"constant.character.escape.quote.powerquery\" }, { \"include\": \"#EscapeSequence\" }] }, \"TypeName\": { \"captures\": { \"1\": { \"name\": \"storage.modifier.powerquery\" }, \"2\": { \"name\": \"storage.type.powerquery\" } }, \"match\": \"\\\\b(?:(optional|nullable)|(action|any|anynonnull|binary|date|datetime|datetimezone|duration|function|list|logical|none|null|number|record|table|text|type))\\\\b\" }, \"Whitespace\": { \"match\": \"\\\\s+\" } }, \"scopeName\": \"source.powerquery\" });\nvar powerquery = [\n  lang\n];\n\nexport { powerquery as default };\n"],"x_google_ignoreList":[0]}