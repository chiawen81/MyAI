{
  "version": 3,
  "sources": ["../../../../../../node_modules/shiki/dist/langs/scheme.mjs"],
  "sourcesContent": ["const lang = Object.freeze({\n  \"displayName\": \"Scheme\",\n  \"fileTypes\": [\"scm\", \"ss\", \"sch\", \"rkt\"],\n  \"name\": \"scheme\",\n  \"patterns\": [{\n    \"include\": \"#comment\"\n  }, {\n    \"include\": \"#block-comment\"\n  }, {\n    \"include\": \"#sexp\"\n  }, {\n    \"include\": \"#string\"\n  }, {\n    \"include\": \"#language-functions\"\n  }, {\n    \"include\": \"#quote\"\n  }, {\n    \"include\": \"#illegal\"\n  }],\n  \"repository\": {\n    \"block-comment\": {\n      \"begin\": \"\\\\#\\\\|\",\n      \"contentName\": \"comment\",\n      \"end\": \"\\\\|\\\\#\",\n      \"name\": \"comment\",\n      \"patterns\": [{\n        \"include\": \"#block-comment\",\n        \"name\": \"comment\"\n      }]\n    },\n    \"comment\": {\n      \"begin\": \"(^[ \\\\t]+)?(?=;)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.whitespace.comment.leading.scheme\"\n        }\n      },\n      \"end\": \"(?!\\\\G)\",\n      \"patterns\": [{\n        \"begin\": \";\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.comment.scheme\"\n          }\n        },\n        \"end\": \"\\\\n\",\n        \"name\": \"comment.line.semicolon.scheme\"\n      }]\n    },\n    \"constants\": {\n      \"patterns\": [{\n        \"match\": \"#[t|f]\",\n        \"name\": \"constant.language.boolean.scheme\"\n      }, {\n        \"match\": `(?<=[\\\\(\\\\s])((#e|#i)?[0-9]+(\\\\.[0-9]+)?|(#x)[0-9a-fA-F]+|(#o)[0-7]+|(#b)[01]+)(?=[\\\\s;()'\",\\\\[\\\\]])`,\n        \"name\": \"constant.numeric.scheme\"\n      }]\n    },\n    \"illegal\": {\n      \"match\": \"[()\\\\[\\\\]]\",\n      \"name\": \"invalid.illegal.parenthesis.scheme\"\n    },\n    \"language-functions\": {\n      \"patterns\": [{\n        \"match\": \"(?x)\\n(?<=(\\\\s|\\\\(|\\\\[))\\n( do|or|and|else|quasiquote|begin|if|case|set!|\\ncond|let|unquote|define|let\\\\*|unquote-splicing|delay|\\nletrec)\\n(?=(\\\\s|\\\\())\",\n        \"name\": \"keyword.control.scheme\"\n      }, {\n        \"comment\": \"\\n\t\t\t\t\t\tThese functions run a test, and return a boolean\\n\t\t\t\t\t\tanswer.\\n\t\t\t\t\t\",\n        \"match\": \"(?x)\\n(?<=(\\\\s|\\\\())\\n( char-alphabetic|char-lower-case|char-numeric|\\nchar-ready|char-upper-case|char-whitespace|\\n(?:char|string)(?:-ci)?(?:=|<=?|>=?)|\\natom|boolean|bound-identifier=|char|complex|\\nidentifier|integer|symbol|free-identifier=|inexact|\\neof-object|exact|list|(?:input|output)-port|pair|\\nreal|rational|zero|vector|negative|odd|null|string|\\neq|equal|eqv|even|number|positive|procedure\\n)\\n(\\\\?)\\n(?=(\\\\s|\\\\())\\n\",\n        \"name\": \"support.function.boolean-test.scheme\"\n      }, {\n        \"comment\": \"\\n\t\t\t\t\t\tThese functions change one type into another.\\n\t\t\t\t\t\",\n        \"match\": \"(?x)\\n(?<=(\\\\s|\\\\())\\n( char->integer|exact->inexact|inexact->exact|\\ninteger->char|symbol->string|list->vector|\\nlist->string|identifier->symbol|vector->list|\\nstring->list|string->number|string->symbol|\\nnumber->string\\n)\\n(?=(\\\\s|\\\\())\\n\",\n        \"name\": \"support.function.convert-type.scheme\"\n      }, {\n        \"comment\": \"\\n\t\t\t\t\t\tThese functions are potentially dangerous because\\n\t\t\t\t\t\tthey have side-effects which could affect other\\n\t\t\t\t\t\tparts of the program.\\n\t\t\t\t\t\",\n        \"match\": \"(?x)\\n(?<=(\\\\s|\\\\())\\n( set-(?:car|cdr)|\\n(?:vector|string)-(?:fill|set)\\n)\\n(!)\\n(?=(\\\\s|\\\\())\\n\",\n        \"name\": \"support.function.with-side-effects.scheme\"\n      }, {\n        \"comment\": \"\\n\t\t\t\t\t\t+, -, *, /, =, >, etc. \\n\t\t\t\t\t\",\n        \"match\": \"(?x)\\n(?<=(\\\\s|\\\\())\\n( >=?|<=?|=|[*/+-])\\n(?=(\\\\s|\\\\())\\n\",\n        \"name\": \"keyword.operator.arithmetic.scheme\"\n      }, {\n        \"match\": \"(?x)\\n(?<=(\\\\s|\\\\())\\n( append|apply|approximate|\\ncall-with-current-continuation|call/cc|catch|\\nconstruct-identifier|define-syntax|display|foo|\\nfor-each|force|format|cd|gen-counter|gen-loser|\\ngenerate-identifier|last-pair|length|let-syntax|\\nletrec-syntax|list|list-ref|list-tail|load|log|\\nmacro|magnitude|map|map-streams|max|member|memq|\\nmemv|min|newline|nil|not|peek-char|rationalize|\\nread|read-char|return|reverse|sequence|substring|\\nsyntax|syntax-rules|transcript-off|transcript-on|\\ntruncate|unwrap-syntax|values-list|write|write-char|\\n\\n\\ncons|c(a|d){1,4}r|\\n\\n\\nabs|acos|angle|asin|assoc|assq|assv|atan|ceiling|\\ncos|floor|round|sin|sqrt|tan|\\n(?:real|imag)-part|numerator|denominator\\n\\n\\nmodulo|exp|expt|remainder|quotient|lcm|\\n\\n\\ncall-with-(?:input|output)-file|\\n(?:close|current)-(?:input|output)-port|\\nwith-(?:input|output)-from-file|\\nopen-(?:input|output)-file|\\n\\n\\nchar-(?:downcase|upcase|ready)|\\n\\n\\nmake-(?:polar|promise|rectangular|string|vector)\\n\\n\\nstring(?:-(?:append|copy|length|ref))?|\\nvector(?:-length|-ref)\\n)\\n(?=(\\\\s|\\\\())\\n\",\n        \"name\": \"support.function.general.scheme\"\n      }]\n    },\n    \"quote\": {\n      \"comment\": \"\\n\t\t\t\tWe need to be able to quote any kind of item, which creates\\n\t\t\t\ta tiny bit of complexity in our grammar.  It is hopefully\\n\t\t\t\tnot overwhelming complexity.\\n\t\t\t\t\\n\t\t\t\tNote: the first two matches are special cases.  quoted\\n\t\t\t\tsymbols, and quoted empty lists are considered constant.other\\n\t\t\t\t\\n\t\t\t\",\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"name\": \"punctuation.section.quoted.symbol.scheme\"\n          }\n        },\n        \"match\": \"(?x)\\n(')\\\\s*\\n([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*)\\n\",\n        \"name\": \"constant.other.symbol.scheme\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"punctuation.section.quoted.empty-list.scheme\"\n          },\n          \"2\": {\n            \"name\": \"meta.expression.scheme\"\n          },\n          \"3\": {\n            \"name\": \"punctuation.section.expression.begin.scheme\"\n          },\n          \"4\": {\n            \"name\": \"punctuation.section.expression.end.scheme\"\n          }\n        },\n        \"match\": \"(?x)\\n(')\\\\s*\\n((\\\\()\\\\s*(\\\\)))\\n\",\n        \"name\": \"constant.other.empty-list.schem\"\n      }, {\n        \"begin\": \"(')\\\\s*\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.section.quoted.scheme\"\n          }\n        },\n        \"comment\": \"quoted double-quoted string or s-expression\",\n        \"end\": \"(?=[\\\\s()])|(?<=\\\\n)\",\n        \"name\": \"string.other.quoted-object.scheme\",\n        \"patterns\": [{\n          \"include\": \"#quoted\"\n        }]\n      }]\n    },\n    \"quote-sexp\": {\n      \"begin\": \"(?<=\\\\()\\\\s*(quote)\\\\s+\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.control.quote.scheme\"\n        }\n      },\n      \"comment\": \"\\n\t\t\t\tSomething quoted with (quote \\xABthing\\xBB).  In this case \\xABthing\\xBB\\n\t\t\t\twill not be evaluated, so we are considering it a string.\\n\t\t\t\",\n      \"contentName\": \"string.other.quote.scheme\",\n      \"end\": \"(?=[\\\\s)])|(?<=\\\\n)\",\n      \"patterns\": [{\n        \"include\": \"#quoted\"\n      }]\n    },\n    \"quoted\": {\n      \"patterns\": [{\n        \"include\": \"#string\"\n      }, {\n        \"begin\": \"(\\\\()\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.section.expression.begin.scheme\"\n          }\n        },\n        \"end\": \"(\\\\))\",\n        \"endCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.section.expression.end.scheme\"\n          }\n        },\n        \"name\": \"meta.expression.scheme\",\n        \"patterns\": [{\n          \"include\": \"#quoted\"\n        }]\n      }, {\n        \"include\": \"#quote\"\n      }, {\n        \"include\": \"#illegal\"\n      }]\n    },\n    \"sexp\": {\n      \"begin\": \"(\\\\()\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.section.expression.begin.scheme\"\n        }\n      },\n      \"end\": \"(\\\\))(\\\\n)?\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.section.expression.end.scheme\"\n        },\n        \"2\": {\n          \"name\": \"meta.after-expression.scheme\"\n        }\n      },\n      \"name\": \"meta.expression.scheme\",\n      \"patterns\": [{\n        \"include\": \"#comment\"\n      }, {\n        \"begin\": \"(?x)\\n(?<=\\\\()\\n(define)\\\\s+\\n(\\\\()\\n([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*)\\n((\\\\s+\\n([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*|[._])\\n)*\\n)\\\\s*\\n(\\\\))\\n\",\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.control.scheme\"\n          },\n          \"2\": {\n            \"name\": \"punctuation.definition.function.scheme\"\n          },\n          \"3\": {\n            \"name\": \"entity.name.function.scheme\"\n          },\n          \"4\": {\n            \"name\": \"variable.parameter.function.scheme\"\n          },\n          \"7\": {\n            \"name\": \"punctuation.definition.function.scheme\"\n          }\n        },\n        \"end\": \"(?=\\\\))\",\n        \"name\": \"meta.declaration.procedure.scheme\",\n        \"patterns\": [{\n          \"include\": \"#comment\"\n        }, {\n          \"include\": \"#sexp\"\n        }, {\n          \"include\": \"#illegal\"\n        }]\n      }, {\n        \"begin\": \"(?x)\\n(?<=\\\\()\\n(lambda)\\\\s+\\n(\\\\()\\n((?:\\n([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*|[._])\\n\\\\s+\\n)*(?:\\n([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*|[._])\\n)?)\\n(\\\\))\\n\",\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.control.scheme\"\n          },\n          \"2\": {\n            \"name\": \"punctuation.definition.variable.scheme\"\n          },\n          \"3\": {\n            \"name\": \"variable.parameter.scheme\"\n          },\n          \"6\": {\n            \"name\": \"punctuation.definition.variable.scheme\"\n          }\n        },\n        \"comment\": \"\\n\t\t\t\t\t\tNot sure this one is quite correct.  That \\\\s* is\\n\t\t\t\t\t\tparticularly troubling\\n\t\t\t\t\t\",\n        \"end\": \"(?=\\\\))\",\n        \"name\": \"meta.declaration.procedure.scheme\",\n        \"patterns\": [{\n          \"include\": \"#comment\"\n        }, {\n          \"include\": \"#sexp\"\n        }, {\n          \"include\": \"#illegal\"\n        }]\n      }, {\n        \"begin\": \"(?<=\\\\()(define)\\\\s([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*)\\\\s*.*?\",\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.control.scheme\"\n          },\n          \"2\": {\n            \"name\": \"variable.other.scheme\"\n          }\n        },\n        \"end\": \"(?=\\\\))\",\n        \"name\": \"meta.declaration.variable.scheme\",\n        \"patterns\": [{\n          \"include\": \"#comment\"\n        }, {\n          \"include\": \"#sexp\"\n        }, {\n          \"include\": \"#illegal\"\n        }]\n      }, {\n        \"include\": \"#quote-sexp\"\n      }, {\n        \"include\": \"#quote\"\n      }, {\n        \"include\": \"#language-functions\"\n      }, {\n        \"include\": \"#string\"\n      }, {\n        \"include\": \"#constants\"\n      }, {\n        \"match\": \"(?<=[\\\\(\\\\s])(#\\\\\\\\)(space|newline|tab)(?=[\\\\s\\\\)])\",\n        \"name\": \"constant.character.named.scheme\"\n      }, {\n        \"match\": \"(?<=[\\\\(\\\\s])(#\\\\\\\\)x[0-9A-F]{2,4}(?=[\\\\s\\\\)])\",\n        \"name\": \"constant.character.hex-literal.scheme\"\n      }, {\n        \"match\": \"(?<=[\\\\(\\\\s])(#\\\\\\\\).(?=[\\\\s\\\\)])\",\n        \"name\": \"constant.character.escape.scheme\"\n      }, {\n        \"comment\": \"\\n\t\t\t\t\t\tthe . in (a . b) which conses together two elements\\n\t\t\t\t\t\ta and b. (a b c) == (a . (b . (c . nil)))\\n\t\t\t\t\t\",\n        \"match\": \"(?<=[ ()])\\\\.(?=[ ()])\",\n        \"name\": \"punctuation.separator.cons.scheme\"\n      }, {\n        \"include\": \"#sexp\"\n      }, {\n        \"include\": \"#illegal\"\n      }]\n    },\n    \"string\": {\n      \"begin\": '(\")',\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.string.begin.scheme\"\n        }\n      },\n      \"end\": '(\")',\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.string.end.scheme\"\n        }\n      },\n      \"name\": \"string.quoted.double.scheme\",\n      \"patterns\": [{\n        \"match\": \"\\\\\\\\.\",\n        \"name\": \"constant.character.escape.scheme\"\n      }]\n    }\n  },\n  \"scopeName\": \"source.scheme\"\n});\nvar scheme = [lang];\nexport { scheme as default };"],
  "mappings": "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",
  "names": []
}
