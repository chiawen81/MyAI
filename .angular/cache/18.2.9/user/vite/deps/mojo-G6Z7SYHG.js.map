{
  "version": 3,
  "sources": ["../../../../../../node_modules/shiki/dist/langs/mojo.mjs"],
  "sourcesContent": ["const lang = Object.freeze({\n  \"displayName\": \"Mojo\",\n  \"name\": \"mojo\",\n  \"patterns\": [{\n    \"include\": \"#statement\"\n  }, {\n    \"include\": \"#expression\"\n  }],\n  \"repository\": {\n    \"annotated-parameter\": {\n      \"begin\": \"(?x)\\n\\\\b\\n([[:alpha:]_]\\\\w*) \\\\s* (:)\\n\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"variable.parameter.function.language.python\"\n        },\n        \"2\": {\n          \"name\": \"punctuation.separator.annotation.python\"\n        }\n      },\n      \"end\": \"(,)|(?=\\\\))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.separator.parameters.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#expression\"\n      }, {\n        \"match\": \"=(?!=)\",\n        \"name\": \"keyword.operator.assignment.python\"\n      }]\n    },\n    \"assignment-operator\": {\n      \"match\": \"(?x)\\n<<= | >>= | //= | \\\\*\\\\*=\\n| \\\\+= | -= | /= | @=\\n| \\\\*= | %= | ~= | \\\\^= | &= | \\\\|=\\n| =(?!=)\\n\",\n      \"name\": \"keyword.operator.assignment.python\"\n    },\n    \"backticks\": {\n      \"begin\": \"\\\\`\",\n      \"end\": \"(?:\\\\`|(?<!\\\\\\\\)(\\\\n))\",\n      \"name\": \"string.quoted.single.python\"\n    },\n    \"builtin-callables\": {\n      \"patterns\": [{\n        \"include\": \"#illegal-names\"\n      }, {\n        \"include\": \"#illegal-object-name\"\n      }, {\n        \"include\": \"#builtin-exceptions\"\n      }, {\n        \"include\": \"#builtin-functions\"\n      }, {\n        \"include\": \"#builtin-types\"\n      }]\n    },\n    \"builtin-exceptions\": {\n      \"match\": \"(?x) (?<!\\\\.) \\\\b(\\n(\\nArithmetic | Assertion | Attribute | Buffer | BlockingIO\\n| BrokenPipe | ChildProcess\\n| (Connection (Aborted | Refused | Reset)?)\\n| EOF | Environment | FileExists | FileNotFound\\n| FloatingPoint | IO | Import | Indentation | Index | Interrupted\\n| IsADirectory | NotADirectory | Permission | ProcessLookup\\n| Timeout\\n| Key | Lookup | Memory | Name | NotImplemented | OS | Overflow\\n| Reference | Runtime | Recursion | Syntax | System\\n| Tab | Type | UnboundLocal | Unicode(Encode|Decode|Translate)?\\n| Value | Windows | ZeroDivision | ModuleNotFound\\n) Error\\n|\\n((Pending)?Deprecation | Runtime | Syntax | User | Future | Import\\n| Unicode | Bytes | Resource\\n)? Warning\\n|\\nSystemExit | Stop(Async)?Iteration\\n| KeyboardInterrupt\\n| GeneratorExit | (Base)?Exception\\n)\\\\b\\n\",\n      \"name\": \"support.type.exception.python\"\n    },\n    \"builtin-functions\": {\n      \"patterns\": [{\n        \"match\": \"(?x)\\n(?<!\\\\.) \\\\b(\\n__import__ | abs | aiter | all | any | anext | ascii | bin\\n| breakpoint | callable | chr | compile | copyright | credits\\n| delattr | dir | divmod | enumerate | eval | exec | exit\\n| filter | format | getattr | globals | hasattr | hash | help\\n| hex | id | input | isinstance | issubclass | iter | len\\n| license | locals | map | max | memoryview | min | next\\n| oct | open | ord | pow | print | quit | range | reload | repr\\n| reversed | round | setattr | sorted | sum | vars | zip\\n)\\\\b\\n\",\n        \"name\": \"support.function.builtin.python\"\n      }, {\n        \"match\": \"(?x)\\n(?<!\\\\.) \\\\b(\\nfile | reduce | intern | raw_input | unicode | cmp | basestring\\n| execfile | long | xrange\\n)\\\\b\\n\",\n        \"name\": \"variable.legacy.builtin.python\"\n      }]\n    },\n    \"builtin-possible-callables\": {\n      \"patterns\": [{\n        \"include\": \"#builtin-callables\"\n      }, {\n        \"include\": \"#magic-names\"\n      }]\n    },\n    \"builtin-types\": {\n      \"match\": \"(?x)\\n(?<!\\\\.) \\\\b(\\n__mlir_attr | __mlir_op | __mlir_type | bool | bytearray | bytes | classmethod | complex | dict\\n| float | frozenset | int | list | object | property\\n| set | slice | staticmethod | str | tuple | type\\n\\n(?# Although 'super' is not a type, it's related to types,\\nand is special enough to be highlighted differently from\\nother built-ins)\\n| super\\n)\\\\b\\n\",\n      \"name\": \"support.type.python\"\n    },\n    \"call-wrapper-inheritance\": {\n      \"begin\": \"(?x)\\n\\\\b(?=\\n([[:alpha:]_]\\\\w*) \\\\s* (\\\\()\\n)\\n\",\n      \"comment\": \"same as a function call, but in inheritance context\",\n      \"end\": \"(\\\\))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.arguments.end.python\"\n        }\n      },\n      \"name\": \"meta.function-call.python\",\n      \"patterns\": [{\n        \"include\": \"#inheritance-name\"\n      }, {\n        \"include\": \"#function-arguments\"\n      }]\n    },\n    \"class-declaration\": {\n      \"patterns\": [{\n        \"begin\": \"(?x)\\n\\\\s*(class|struct|trait)\\\\s+\\n(?=\\n[[:alpha:]_]\\\\w* \\\\s* (:|\\\\()\\n)\\n\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"storage.type.class.python\"\n          }\n        },\n        \"end\": \"(:)\",\n        \"endCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.section.class.begin.python\"\n          }\n        },\n        \"name\": \"meta.class.python\",\n        \"patterns\": [{\n          \"include\": \"#class-name\"\n        }, {\n          \"include\": \"#class-inheritance\"\n        }]\n      }]\n    },\n    \"class-inheritance\": {\n      \"begin\": \"(\\\\()\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.inheritance.begin.python\"\n        }\n      },\n      \"end\": \"(\\\\))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.inheritance.end.python\"\n        }\n      },\n      \"name\": \"meta.class.inheritance.python\",\n      \"patterns\": [{\n        \"match\": \"(\\\\*\\\\*|\\\\*)\",\n        \"name\": \"keyword.operator.unpacking.arguments.python\"\n      }, {\n        \"match\": \",\",\n        \"name\": \"punctuation.separator.inheritance.python\"\n      }, {\n        \"match\": \"=(?!=)\",\n        \"name\": \"keyword.operator.assignment.python\"\n      }, {\n        \"match\": \"\\\\bmetaclass\\\\b\",\n        \"name\": \"support.type.metaclass.python\"\n      }, {\n        \"include\": \"#illegal-names\"\n      }, {\n        \"include\": \"#class-kwarg\"\n      }, {\n        \"include\": \"#call-wrapper-inheritance\"\n      }, {\n        \"include\": \"#expression-base\"\n      }, {\n        \"include\": \"#member-access-class\"\n      }, {\n        \"include\": \"#inheritance-identifier\"\n      }]\n    },\n    \"class-kwarg\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"entity.other.inherited-class.python variable.parameter.class.python\"\n        },\n        \"2\": {\n          \"name\": \"keyword.operator.assignment.python\"\n        }\n      },\n      \"match\": \"(?x)\\n\\\\b ([[:alpha:]_]\\\\w*) \\\\s*(=)(?!=)\\n\"\n    },\n    \"class-name\": {\n      \"patterns\": [{\n        \"include\": \"#illegal-object-name\"\n      }, {\n        \"include\": \"#builtin-possible-callables\"\n      }, {\n        \"match\": \"(?x)\\n\\\\b ([[:alpha:]_]\\\\w*) \\\\b\\n\",\n        \"name\": \"entity.name.type.class.python\"\n      }]\n    },\n    \"codetags\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"keyword.codetag.notation.python\"\n        }\n      },\n      \"match\": \"(?:\\\\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\\\\b)\"\n    },\n    \"comments\": {\n      \"patterns\": [{\n        \"begin\": \"(?x)\\n(?:\\n\\\\# \\\\s* (type:)\\n\\\\s*+ (?# we want `\\\\s*+` which is possessive quantifier since\\nwe do not actually want to backtrack when matching\\nwhitespace here)\\n(?! $ | \\\\#)\\n)\\n\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"meta.typehint.comment.python\"\n          },\n          \"1\": {\n            \"name\": \"comment.typehint.directive.notation.python\"\n          }\n        },\n        \"contentName\": \"meta.typehint.comment.python\",\n        \"end\": \"(?:$|(?=\\\\#))\",\n        \"name\": \"comment.line.number-sign.python\",\n        \"patterns\": [{\n          \"match\": \"(?x)\\n\\\\G ignore\\n(?= \\\\s* (?: $ | \\\\#))\\n\",\n          \"name\": \"comment.typehint.ignore.notation.python\"\n        }, {\n          \"match\": \"(?x)\\n(?<!\\\\.)\\\\b(\\nbool | bytes | float | int | object | str\\n| List | Dict | Iterable | Sequence | Set\\n| FrozenSet | Callable | Union | Tuple\\n| Any | None\\n)\\\\b\\n\",\n          \"name\": \"comment.typehint.type.notation.python\"\n        }, {\n          \"match\": \"([\\\\[\\\\]\\\\(\\\\),\\\\.\\\\=\\\\*]|(->))\",\n          \"name\": \"comment.typehint.punctuation.notation.python\"\n        }, {\n          \"match\": \"([[:alpha:]_]\\\\w*)\",\n          \"name\": \"comment.typehint.variable.notation.python\"\n        }]\n      }, {\n        \"include\": \"#comments-base\"\n      }]\n    },\n    \"comments-base\": {\n      \"begin\": \"(\\\\#)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.comment.python\"\n        }\n      },\n      \"end\": \"($)\",\n      \"name\": \"comment.line.number-sign.python\",\n      \"patterns\": [{\n        \"include\": \"#codetags\"\n      }]\n    },\n    \"comments-string-double-three\": {\n      \"begin\": \"(\\\\#)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.comment.python\"\n        }\n      },\n      \"end\": '($|(?=\"\"\"))',\n      \"name\": \"comment.line.number-sign.python\",\n      \"patterns\": [{\n        \"include\": \"#codetags\"\n      }]\n    },\n    \"comments-string-single-three\": {\n      \"begin\": \"(\\\\#)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.comment.python\"\n        }\n      },\n      \"end\": \"($|(?='''))\",\n      \"name\": \"comment.line.number-sign.python\",\n      \"patterns\": [{\n        \"include\": \"#codetags\"\n      }]\n    },\n    \"curly-braces\": {\n      \"begin\": \"\\\\{\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.dict.begin.python\"\n        }\n      },\n      \"end\": \"\\\\}\",\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.dict.end.python\"\n        }\n      },\n      \"patterns\": [{\n        \"match\": \":\",\n        \"name\": \"punctuation.separator.dict.python\"\n      }, {\n        \"include\": \"#expression\"\n      }]\n    },\n    \"decorator\": {\n      \"begin\": \"(?x)\\n^\\\\s*\\n((@)) \\\\s* (?=[[:alpha:]_]\\\\w*)\\n\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"entity.name.function.decorator.python\"\n        },\n        \"2\": {\n          \"name\": \"punctuation.definition.decorator.python\"\n        }\n      },\n      \"end\": \"(?x)\\n( \\\\) )\\n\\n(?: (.*?) (?=\\\\s*(?:\\\\#|$)) )\\n| (?=\\\\n|\\\\#)\\n\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.arguments.end.python\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.decorator.python\"\n        }\n      },\n      \"name\": \"meta.function.decorator.python\",\n      \"patterns\": [{\n        \"include\": \"#decorator-name\"\n      }, {\n        \"include\": \"#function-arguments\"\n      }]\n    },\n    \"decorator-name\": {\n      \"patterns\": [{\n        \"include\": \"#builtin-callables\"\n      }, {\n        \"include\": \"#illegal-object-name\"\n      }, {\n        \"captures\": {\n          \"2\": {\n            \"name\": \"punctuation.separator.period.python\"\n          }\n        },\n        \"match\": \"(?x)\\n([[:alpha:]_]\\\\w*) | (\\\\.)\\n\",\n        \"name\": \"entity.name.function.decorator.python\"\n      }, {\n        \"include\": \"#line-continuation\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"invalid.illegal.decorator.python\"\n          }\n        },\n        \"match\": \"(?x)\\n\\\\s* ([^([:alpha:]\\\\s_\\\\.#\\\\\\\\] .*?) (?=\\\\#|$)\\n\",\n        \"name\": \"invalid.illegal.decorator.python\"\n      }]\n    },\n    \"double-one-regexp-character-set\": {\n      \"patterns\": [{\n        \"match\": \"(?x)\\n\\\\[ \\\\^? \\\\] (?! .*?\\\\])\\n\"\n      }, {\n        \"begin\": \"(\\\\[)(\\\\^)?(\\\\])?\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.character.set.begin.regexp constant.other.set.regexp\"\n          },\n          \"2\": {\n            \"name\": \"keyword.operator.negation.regexp\"\n          },\n          \"3\": {\n            \"name\": \"constant.character.set.regexp\"\n          }\n        },\n        \"end\": '(\\\\]|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))',\n        \"endCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.character.set.end.regexp constant.other.set.regexp\"\n          },\n          \"2\": {\n            \"name\": \"invalid.illegal.newline.python\"\n          }\n        },\n        \"name\": \"meta.character.set.regexp\",\n        \"patterns\": [{\n          \"include\": \"#regexp-charecter-set-escapes\"\n        }, {\n          \"match\": \"[^\\\\n]\",\n          \"name\": \"constant.character.set.regexp\"\n        }]\n      }]\n    },\n    \"double-one-regexp-comments\": {\n      \"begin\": \"\\\\(\\\\?#\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.comment.begin.regexp\"\n        }\n      },\n      \"end\": '(\\\\)|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))',\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.comment.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"comment.regexp\",\n      \"patterns\": [{\n        \"include\": \"#codetags\"\n      }]\n    },\n    \"double-one-regexp-conditional\": {\n      \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.conditional.regexp\"\n        },\n        \"1\": {\n          \"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\n        }\n      },\n      \"end\": '(\\\\)|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))',\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#double-one-regexp-expression\"\n      }]\n    },\n    \"double-one-regexp-expression\": {\n      \"patterns\": [{\n        \"include\": \"#regexp-base-expression\"\n      }, {\n        \"include\": \"#double-one-regexp-character-set\"\n      }, {\n        \"include\": \"#double-one-regexp-comments\"\n      }, {\n        \"include\": \"#regexp-flags\"\n      }, {\n        \"include\": \"#double-one-regexp-named-group\"\n      }, {\n        \"include\": \"#regexp-backreference\"\n      }, {\n        \"include\": \"#double-one-regexp-lookahead\"\n      }, {\n        \"include\": \"#double-one-regexp-lookahead-negative\"\n      }, {\n        \"include\": \"#double-one-regexp-lookbehind\"\n      }, {\n        \"include\": \"#double-one-regexp-lookbehind-negative\"\n      }, {\n        \"include\": \"#double-one-regexp-conditional\"\n      }, {\n        \"include\": \"#double-one-regexp-parentheses-non-capturing\"\n      }, {\n        \"include\": \"#double-one-regexp-parentheses\"\n      }]\n    },\n    \"double-one-regexp-lookahead\": {\n      \"begin\": \"(\\\\()\\\\?=\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.lookahead.regexp\"\n        },\n        \"1\": {\n          \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\n        }\n      },\n      \"end\": '(\\\\)|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))',\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#double-one-regexp-expression\"\n      }]\n    },\n    \"double-one-regexp-lookahead-negative\": {\n      \"begin\": \"(\\\\()\\\\?!\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.lookahead.negative.regexp\"\n        },\n        \"1\": {\n          \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\n        }\n      },\n      \"end\": '(\\\\)|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))',\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#double-one-regexp-expression\"\n      }]\n    },\n    \"double-one-regexp-lookbehind\": {\n      \"begin\": \"(\\\\()\\\\?<=\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.lookbehind.regexp\"\n        },\n        \"1\": {\n          \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\n        }\n      },\n      \"end\": '(\\\\)|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))',\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#double-one-regexp-expression\"\n      }]\n    },\n    \"double-one-regexp-lookbehind-negative\": {\n      \"begin\": \"(\\\\()\\\\?<!\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.lookbehind.negative.regexp\"\n        },\n        \"1\": {\n          \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\n        }\n      },\n      \"end\": '(\\\\)|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))',\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#double-one-regexp-expression\"\n      }]\n    },\n    \"double-one-regexp-named-group\": {\n      \"begin\": \"(?x)\\n(\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\n        },\n        \"2\": {\n          \"name\": \"entity.name.tag.named.group.regexp\"\n        }\n      },\n      \"end\": '(\\\\)|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))',\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"meta.named.regexp\",\n      \"patterns\": [{\n        \"include\": \"#double-one-regexp-expression\"\n      }]\n    },\n    \"double-one-regexp-parentheses\": {\n      \"begin\": \"\\\\(\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\n        }\n      },\n      \"end\": '(\\\\)|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))',\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#double-one-regexp-expression\"\n      }]\n    },\n    \"double-one-regexp-parentheses-non-capturing\": {\n      \"begin\": \"\\\\(\\\\?:\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\n        }\n      },\n      \"end\": '(\\\\)|(?=\"))|((?=(?<!\\\\\\\\)\\\\n))',\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#double-one-regexp-expression\"\n      }]\n    },\n    \"double-three-regexp-character-set\": {\n      \"patterns\": [{\n        \"match\": \"(?x)\\n\\\\[ \\\\^? \\\\] (?! .*?\\\\])\\n\"\n      }, {\n        \"begin\": \"(\\\\[)(\\\\^)?(\\\\])?\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.character.set.begin.regexp constant.other.set.regexp\"\n          },\n          \"2\": {\n            \"name\": \"keyword.operator.negation.regexp\"\n          },\n          \"3\": {\n            \"name\": \"constant.character.set.regexp\"\n          }\n        },\n        \"end\": '(\\\\]|(?=\"\"\"))',\n        \"endCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.character.set.end.regexp constant.other.set.regexp\"\n          },\n          \"2\": {\n            \"name\": \"invalid.illegal.newline.python\"\n          }\n        },\n        \"name\": \"meta.character.set.regexp\",\n        \"patterns\": [{\n          \"include\": \"#regexp-charecter-set-escapes\"\n        }, {\n          \"match\": \"[^\\\\n]\",\n          \"name\": \"constant.character.set.regexp\"\n        }]\n      }]\n    },\n    \"double-three-regexp-comments\": {\n      \"begin\": \"\\\\(\\\\?#\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.comment.begin.regexp\"\n        }\n      },\n      \"end\": '(\\\\)|(?=\"\"\"))',\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.comment.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"comment.regexp\",\n      \"patterns\": [{\n        \"include\": \"#codetags\"\n      }]\n    },\n    \"double-three-regexp-conditional\": {\n      \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.conditional.regexp\"\n        },\n        \"1\": {\n          \"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\n        }\n      },\n      \"end\": '(\\\\)|(?=\"\"\"))',\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#double-three-regexp-expression\"\n      }, {\n        \"include\": \"#comments-string-double-three\"\n      }]\n    },\n    \"double-three-regexp-expression\": {\n      \"patterns\": [{\n        \"include\": \"#regexp-base-expression\"\n      }, {\n        \"include\": \"#double-three-regexp-character-set\"\n      }, {\n        \"include\": \"#double-three-regexp-comments\"\n      }, {\n        \"include\": \"#regexp-flags\"\n      }, {\n        \"include\": \"#double-three-regexp-named-group\"\n      }, {\n        \"include\": \"#regexp-backreference\"\n      }, {\n        \"include\": \"#double-three-regexp-lookahead\"\n      }, {\n        \"include\": \"#double-three-regexp-lookahead-negative\"\n      }, {\n        \"include\": \"#double-three-regexp-lookbehind\"\n      }, {\n        \"include\": \"#double-three-regexp-lookbehind-negative\"\n      }, {\n        \"include\": \"#double-three-regexp-conditional\"\n      }, {\n        \"include\": \"#double-three-regexp-parentheses-non-capturing\"\n      }, {\n        \"include\": \"#double-three-regexp-parentheses\"\n      }, {\n        \"include\": \"#comments-string-double-three\"\n      }]\n    },\n    \"double-three-regexp-lookahead\": {\n      \"begin\": \"(\\\\()\\\\?=\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.lookahead.regexp\"\n        },\n        \"1\": {\n          \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\n        }\n      },\n      \"end\": '(\\\\)|(?=\"\"\"))',\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#double-three-regexp-expression\"\n      }, {\n        \"include\": \"#comments-string-double-three\"\n      }]\n    },\n    \"double-three-regexp-lookahead-negative\": {\n      \"begin\": \"(\\\\()\\\\?!\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.lookahead.negative.regexp\"\n        },\n        \"1\": {\n          \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\n        }\n      },\n      \"end\": '(\\\\)|(?=\"\"\"))',\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#double-three-regexp-expression\"\n      }, {\n        \"include\": \"#comments-string-double-three\"\n      }]\n    },\n    \"double-three-regexp-lookbehind\": {\n      \"begin\": \"(\\\\()\\\\?<=\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.lookbehind.regexp\"\n        },\n        \"1\": {\n          \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\n        }\n      },\n      \"end\": '(\\\\)|(?=\"\"\"))',\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#double-three-regexp-expression\"\n      }, {\n        \"include\": \"#comments-string-double-three\"\n      }]\n    },\n    \"double-three-regexp-lookbehind-negative\": {\n      \"begin\": \"(\\\\()\\\\?<!\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.lookbehind.negative.regexp\"\n        },\n        \"1\": {\n          \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\n        }\n      },\n      \"end\": '(\\\\)|(?=\"\"\"))',\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#double-three-regexp-expression\"\n      }, {\n        \"include\": \"#comments-string-double-three\"\n      }]\n    },\n    \"double-three-regexp-named-group\": {\n      \"begin\": \"(?x)\\n(\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\n        },\n        \"2\": {\n          \"name\": \"entity.name.tag.named.group.regexp\"\n        }\n      },\n      \"end\": '(\\\\)|(?=\"\"\"))',\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"meta.named.regexp\",\n      \"patterns\": [{\n        \"include\": \"#double-three-regexp-expression\"\n      }, {\n        \"include\": \"#comments-string-double-three\"\n      }]\n    },\n    \"double-three-regexp-parentheses\": {\n      \"begin\": \"\\\\(\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\n        }\n      },\n      \"end\": '(\\\\)|(?=\"\"\"))',\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#double-three-regexp-expression\"\n      }, {\n        \"include\": \"#comments-string-double-three\"\n      }]\n    },\n    \"double-three-regexp-parentheses-non-capturing\": {\n      \"begin\": \"\\\\(\\\\?:\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\n        }\n      },\n      \"end\": '(\\\\)|(?=\"\"\"))',\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#double-three-regexp-expression\"\n      }, {\n        \"include\": \"#comments-string-double-three\"\n      }]\n    },\n    \"ellipsis\": {\n      \"match\": \"\\\\.\\\\.\\\\.\",\n      \"name\": \"constant.other.ellipsis.python\"\n    },\n    \"escape-sequence\": {\n      \"match\": `(?x)\n\\\\\\\\ (\nx[0-9A-Fa-f]{2}\n| [0-7]{1,3}\n| [\\\\\\\\\"'abfnrtv]\n)\n`,\n      \"name\": \"constant.character.escape.python\"\n    },\n    \"escape-sequence-unicode\": {\n      \"patterns\": [{\n        \"match\": \"(?x)\\n\\\\\\\\ (\\nu[0-9A-Fa-f]{4}\\n| U[0-9A-Fa-f]{8}\\n| N\\\\{[\\\\w\\\\s]+?\\\\}\\n)\\n\",\n        \"name\": \"constant.character.escape.python\"\n      }]\n    },\n    \"expression\": {\n      \"comment\": \"All valid Python expressions\",\n      \"patterns\": [{\n        \"include\": \"#expression-base\"\n      }, {\n        \"include\": \"#member-access\"\n      }, {\n        \"comment\": \"Tokenize identifiers to help linters\",\n        \"match\": \"(?x) \\\\b ([[:alpha:]_]\\\\w*) \\\\b\"\n      }]\n    },\n    \"expression-bare\": {\n      \"comment\": \"valid Python expressions w/o comments and line continuation\",\n      \"patterns\": [{\n        \"include\": \"#backticks\"\n      }, {\n        \"include\": \"#literal\"\n      }, {\n        \"include\": \"#regexp\"\n      }, {\n        \"include\": \"#string\"\n      }, {\n        \"include\": \"#lambda\"\n      }, {\n        \"include\": \"#generator\"\n      }, {\n        \"include\": \"#illegal-operator\"\n      }, {\n        \"include\": \"#operator\"\n      }, {\n        \"include\": \"#curly-braces\"\n      }, {\n        \"include\": \"#item-access\"\n      }, {\n        \"include\": \"#list\"\n      }, {\n        \"include\": \"#odd-function-call\"\n      }, {\n        \"include\": \"#round-braces\"\n      }, {\n        \"include\": \"#function-call\"\n      }, {\n        \"include\": \"#builtin-functions\"\n      }, {\n        \"include\": \"#builtin-types\"\n      }, {\n        \"include\": \"#builtin-exceptions\"\n      }, {\n        \"include\": \"#magic-names\"\n      }, {\n        \"include\": \"#special-names\"\n      }, {\n        \"include\": \"#illegal-names\"\n      }, {\n        \"include\": \"#special-variables\"\n      }, {\n        \"include\": \"#ellipsis\"\n      }, {\n        \"include\": \"#punctuation\"\n      }, {\n        \"include\": \"#line-continuation\"\n      }]\n    },\n    \"expression-base\": {\n      \"comment\": \"valid Python expressions with comments and line continuation\",\n      \"patterns\": [{\n        \"include\": \"#comments\"\n      }, {\n        \"include\": \"#expression-bare\"\n      }, {\n        \"include\": \"#line-continuation\"\n      }]\n    },\n    \"f-expression\": {\n      \"comment\": \"All valid Python expressions, except comments and line continuation\",\n      \"patterns\": [{\n        \"include\": \"#expression-bare\"\n      }, {\n        \"include\": \"#member-access\"\n      }, {\n        \"comment\": \"Tokenize identifiers to help linters\",\n        \"match\": \"(?x) \\\\b ([[:alpha:]_]\\\\w*) \\\\b\"\n      }]\n    },\n    \"fregexp-base-expression\": {\n      \"patterns\": [{\n        \"include\": \"#fregexp-quantifier\"\n      }, {\n        \"include\": \"#fstring-formatting-braces\"\n      }, {\n        \"match\": \"\\\\{.*?\\\\}\"\n      }, {\n        \"include\": \"#regexp-base-common\"\n      }]\n    },\n    \"fregexp-quantifier\": {\n      \"match\": \"(?x)\\n\\\\{\\\\{(\\n\\\\d+ | \\\\d+,(\\\\d+)? | ,\\\\d+\\n)\\\\}\\\\}\\n\",\n      \"name\": \"keyword.operator.quantifier.regexp\"\n    },\n    \"fstring-fnorm-quoted-multi-line\": {\n      \"begin\": `(\\\\b[fF])([bBuU])?('''|\"\"\")`,\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"string.interpolated.python string.quoted.multi.python storage.type.string.python\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.prefix.python\"\n        },\n        \"3\": {\n          \"name\": \"punctuation.definition.string.begin.python string.interpolated.python string.quoted.multi.python\"\n        }\n      },\n      \"end\": \"(\\\\3)\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.multi.python\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"meta.fstring.python\",\n      \"patterns\": [{\n        \"include\": \"#fstring-guts\"\n      }, {\n        \"include\": \"#fstring-illegal-multi-brace\"\n      }, {\n        \"include\": \"#fstring-multi-brace\"\n      }, {\n        \"include\": \"#fstring-multi-core\"\n      }]\n    },\n    \"fstring-fnorm-quoted-single-line\": {\n      \"begin\": `(\\\\b[fF])([bBuU])?((['\"]))`,\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"string.interpolated.python string.quoted.single.python storage.type.string.python\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.prefix.python\"\n        },\n        \"3\": {\n          \"name\": \"punctuation.definition.string.begin.python string.interpolated.python string.quoted.single.python\"\n        }\n      },\n      \"end\": \"(\\\\3)|((?<!\\\\\\\\)\\\\n)\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.single.python\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"meta.fstring.python\",\n      \"patterns\": [{\n        \"include\": \"#fstring-guts\"\n      }, {\n        \"include\": \"#fstring-illegal-single-brace\"\n      }, {\n        \"include\": \"#fstring-single-brace\"\n      }, {\n        \"include\": \"#fstring-single-core\"\n      }]\n    },\n    \"fstring-formatting\": {\n      \"patterns\": [{\n        \"include\": \"#fstring-formatting-braces\"\n      }, {\n        \"include\": \"#fstring-formatting-singe-brace\"\n      }]\n    },\n    \"fstring-formatting-braces\": {\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"name\": \"constant.character.format.placeholder.other.python\"\n          },\n          \"2\": {\n            \"name\": \"invalid.illegal.brace.python\"\n          },\n          \"3\": {\n            \"name\": \"constant.character.format.placeholder.other.python\"\n          }\n        },\n        \"comment\": \"empty braces are illegal\",\n        \"match\": \"({)(\\\\s*?)(})\"\n      }, {\n        \"match\": \"({{|}})\",\n        \"name\": \"constant.character.escape.python\"\n      }]\n    },\n    \"fstring-formatting-singe-brace\": {\n      \"match\": \"(}(?!}))\",\n      \"name\": \"invalid.illegal.brace.python\"\n    },\n    \"fstring-guts\": {\n      \"patterns\": [{\n        \"include\": \"#escape-sequence-unicode\"\n      }, {\n        \"include\": \"#escape-sequence\"\n      }, {\n        \"include\": \"#string-line-continuation\"\n      }, {\n        \"include\": \"#fstring-formatting\"\n      }]\n    },\n    \"fstring-illegal-multi-brace\": {\n      \"patterns\": [{\n        \"include\": \"#impossible\"\n      }]\n    },\n    \"fstring-illegal-single-brace\": {\n      \"begin\": \"(\\\\{)(?=[^\\\\n}]*$\\\\n?)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"constant.character.format.placeholder.other.python\"\n        }\n      },\n      \"comment\": \"it is illegal to have a multiline brace inside a single-line string\",\n      \"end\": \"(\\\\})|(?=\\\\n)\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"constant.character.format.placeholder.other.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#fstring-terminator-single\"\n      }, {\n        \"include\": \"#f-expression\"\n      }]\n    },\n    \"fstring-multi-brace\": {\n      \"begin\": \"(\\\\{)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"constant.character.format.placeholder.other.python\"\n        }\n      },\n      \"comment\": \"value interpolation using { ... }\",\n      \"end\": \"(?x)\\n(\\\\})\\n\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"constant.character.format.placeholder.other.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#fstring-terminator-multi\"\n      }, {\n        \"include\": \"#f-expression\"\n      }]\n    },\n    \"fstring-multi-core\": {\n      \"match\": `(?x)\n(.+?)\n(\n(?# .* and .*? in multi-line match need special handling of\nnewlines otherwise SublimeText and Atom will match slightly\ndifferently.\n\nThe guard for newlines has to be separate from the\nlookahead because of special $ matching rule.)\n($\\\\n?)\n|\n(?=[\\\\\\\\\\\\}\\\\{]|'''|\"\"\")\n)\n(?# due to how multiline regexps are matched we need a special case\nfor matching a newline character)\n| \\\\n\n`,\n      \"name\": \"string.interpolated.python string.quoted.multi.python\"\n    },\n    \"fstring-normf-quoted-multi-line\": {\n      \"begin\": `(\\\\b[bBuU])([fF])('''|\"\"\")`,\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"invalid.illegal.prefix.python\"\n        },\n        \"2\": {\n          \"name\": \"string.interpolated.python string.quoted.multi.python storage.type.string.python\"\n        },\n        \"3\": {\n          \"name\": \"punctuation.definition.string.begin.python string.quoted.multi.python\"\n        }\n      },\n      \"end\": \"(\\\\3)\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.multi.python\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"meta.fstring.python\",\n      \"patterns\": [{\n        \"include\": \"#fstring-guts\"\n      }, {\n        \"include\": \"#fstring-illegal-multi-brace\"\n      }, {\n        \"include\": \"#fstring-multi-brace\"\n      }, {\n        \"include\": \"#fstring-multi-core\"\n      }]\n    },\n    \"fstring-normf-quoted-single-line\": {\n      \"begin\": `(\\\\b[bBuU])([fF])((['\"]))`,\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"invalid.illegal.prefix.python\"\n        },\n        \"2\": {\n          \"name\": \"string.interpolated.python string.quoted.single.python storage.type.string.python\"\n        },\n        \"3\": {\n          \"name\": \"punctuation.definition.string.begin.python string.quoted.single.python\"\n        }\n      },\n      \"end\": \"(\\\\3)|((?<!\\\\\\\\)\\\\n)\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.single.python\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"meta.fstring.python\",\n      \"patterns\": [{\n        \"include\": \"#fstring-guts\"\n      }, {\n        \"include\": \"#fstring-illegal-single-brace\"\n      }, {\n        \"include\": \"#fstring-single-brace\"\n      }, {\n        \"include\": \"#fstring-single-core\"\n      }]\n    },\n    \"fstring-raw-guts\": {\n      \"patterns\": [{\n        \"include\": \"#string-consume-escape\"\n      }, {\n        \"include\": \"#fstring-formatting\"\n      }]\n    },\n    \"fstring-raw-multi-core\": {\n      \"match\": `(?x)\n(.+?)\n(\n(?# .* and .*? in multi-line match need special handling of\nnewlines otherwise SublimeText and Atom will match slightly\ndifferently.\n\nThe guard for newlines has to be separate from the\nlookahead because of special $ matching rule.)\n($\\\\n?)\n|\n(?=[\\\\\\\\\\\\}\\\\{]|'''|\"\"\")\n)\n(?# due to how multiline regexps are matched we need a special case\nfor matching a newline character)\n| \\\\n\n`,\n      \"name\": \"string.interpolated.python string.quoted.raw.multi.python\"\n    },\n    \"fstring-raw-quoted-multi-line\": {\n      \"begin\": `(\\\\b(?:[rR][fF]|[fF][rR]))('''|\"\"\")`,\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"string.interpolated.python string.quoted.raw.multi.python storage.type.string.python\"\n        },\n        \"2\": {\n          \"name\": \"punctuation.definition.string.begin.python string.quoted.raw.multi.python\"\n        }\n      },\n      \"end\": \"(\\\\2)\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.raw.multi.python\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"meta.fstring.python\",\n      \"patterns\": [{\n        \"include\": \"#fstring-raw-guts\"\n      }, {\n        \"include\": \"#fstring-illegal-multi-brace\"\n      }, {\n        \"include\": \"#fstring-multi-brace\"\n      }, {\n        \"include\": \"#fstring-raw-multi-core\"\n      }]\n    },\n    \"fstring-raw-quoted-single-line\": {\n      \"begin\": `(\\\\b(?:[rR][fF]|[fF][rR]))((['\"]))`,\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"string.interpolated.python string.quoted.raw.single.python storage.type.string.python\"\n        },\n        \"2\": {\n          \"name\": \"punctuation.definition.string.begin.python string.quoted.raw.single.python\"\n        }\n      },\n      \"end\": \"(\\\\2)|((?<!\\\\\\\\)\\\\n)\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.string.end.python string.interpolated.python string.quoted.raw.single.python\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"meta.fstring.python\",\n      \"patterns\": [{\n        \"include\": \"#fstring-raw-guts\"\n      }, {\n        \"include\": \"#fstring-illegal-single-brace\"\n      }, {\n        \"include\": \"#fstring-single-brace\"\n      }, {\n        \"include\": \"#fstring-raw-single-core\"\n      }]\n    },\n    \"fstring-raw-single-core\": {\n      \"match\": `(?x)\n(.+?)\n(\n(?# .* and .*? in multi-line match need special handling of\nnewlines otherwise SublimeText and Atom will match slightly\ndifferently.\n\nThe guard for newlines has to be separate from the\nlookahead because of special $ matching rule.)\n($\\\\n?)\n|\n(?=[\\\\\\\\\\\\}\\\\{]|(['\"])|((?<!\\\\\\\\)\\\\n))\n)\n(?# due to how multiline regexps are matched we need a special case\nfor matching a newline character)\n| \\\\n\n`,\n      \"name\": \"string.interpolated.python string.quoted.raw.single.python\"\n    },\n    \"fstring-single-brace\": {\n      \"begin\": \"(\\\\{)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"constant.character.format.placeholder.other.python\"\n        }\n      },\n      \"comment\": \"value interpolation using { ... }\",\n      \"end\": \"(?x)\\n(\\\\})|(?=\\\\n)\\n\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"constant.character.format.placeholder.other.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#fstring-terminator-single\"\n      }, {\n        \"include\": \"#f-expression\"\n      }]\n    },\n    \"fstring-single-core\": {\n      \"match\": `(?x)\n(.+?)\n(\n(?# .* and .*? in multi-line match need special handling of\nnewlines otherwise SublimeText and Atom will match slightly\ndifferently.\n\nThe guard for newlines has to be separate from the\nlookahead because of special $ matching rule.)\n($\\\\n?)\n|\n(?=[\\\\\\\\\\\\}\\\\{]|(['\"])|((?<!\\\\\\\\)\\\\n))\n)\n(?# due to how multiline regexps are matched we need a special case\nfor matching a newline character)\n| \\\\n\n`,\n      \"name\": \"string.interpolated.python string.quoted.single.python\"\n    },\n    \"fstring-terminator-multi\": {\n      \"patterns\": [{\n        \"match\": \"(=(![rsa])?)(?=})\",\n        \"name\": \"storage.type.format.python\"\n      }, {\n        \"match\": \"(=?![rsa])(?=})\",\n        \"name\": \"storage.type.format.python\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"storage.type.format.python\"\n          },\n          \"2\": {\n            \"name\": \"storage.type.format.python\"\n          }\n        },\n        \"match\": \"(?x)\\n( (?: =?) (?: ![rsa])? )\\n( : \\\\w? [<>=^]? [-+ ]? \\\\#?\\n\\\\d* ,? (\\\\.\\\\d+)? [bcdeEfFgGnosxX%]? )(?=})\\n\"\n      }, {\n        \"include\": \"#fstring-terminator-multi-tail\"\n      }]\n    },\n    \"fstring-terminator-multi-tail\": {\n      \"begin\": \"((?:=?)(?:![rsa])?)(:)(?=.*?{)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"storage.type.format.python\"\n        },\n        \"2\": {\n          \"name\": \"storage.type.format.python\"\n        }\n      },\n      \"end\": \"(?=})\",\n      \"patterns\": [{\n        \"include\": \"#fstring-illegal-multi-brace\"\n      }, {\n        \"include\": \"#fstring-multi-brace\"\n      }, {\n        \"match\": \"([bcdeEfFgGnosxX%])(?=})\",\n        \"name\": \"storage.type.format.python\"\n      }, {\n        \"match\": \"(\\\\.\\\\d+)\",\n        \"name\": \"storage.type.format.python\"\n      }, {\n        \"match\": \"(,)\",\n        \"name\": \"storage.type.format.python\"\n      }, {\n        \"match\": \"(\\\\d+)\",\n        \"name\": \"storage.type.format.python\"\n      }, {\n        \"match\": \"(\\\\#)\",\n        \"name\": \"storage.type.format.python\"\n      }, {\n        \"match\": \"([-+ ])\",\n        \"name\": \"storage.type.format.python\"\n      }, {\n        \"match\": \"([<>=^])\",\n        \"name\": \"storage.type.format.python\"\n      }, {\n        \"match\": \"(\\\\w)\",\n        \"name\": \"storage.type.format.python\"\n      }]\n    },\n    \"fstring-terminator-single\": {\n      \"patterns\": [{\n        \"match\": \"(=(![rsa])?)(?=})\",\n        \"name\": \"storage.type.format.python\"\n      }, {\n        \"match\": \"(=?![rsa])(?=})\",\n        \"name\": \"storage.type.format.python\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"storage.type.format.python\"\n          },\n          \"2\": {\n            \"name\": \"storage.type.format.python\"\n          }\n        },\n        \"match\": \"(?x)\\n( (?: =?) (?: ![rsa])? )\\n( : \\\\w? [<>=^]? [-+ ]? \\\\#?\\n\\\\d* ,? (\\\\.\\\\d+)? [bcdeEfFgGnosxX%]? )(?=})\\n\"\n      }, {\n        \"include\": \"#fstring-terminator-single-tail\"\n      }]\n    },\n    \"fstring-terminator-single-tail\": {\n      \"begin\": \"((?:=?)(?:![rsa])?)(:)(?=.*?{)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"storage.type.format.python\"\n        },\n        \"2\": {\n          \"name\": \"storage.type.format.python\"\n        }\n      },\n      \"end\": \"(?=})|(?=\\\\n)\",\n      \"patterns\": [{\n        \"include\": \"#fstring-illegal-single-brace\"\n      }, {\n        \"include\": \"#fstring-single-brace\"\n      }, {\n        \"match\": \"([bcdeEfFgGnosxX%])(?=})\",\n        \"name\": \"storage.type.format.python\"\n      }, {\n        \"match\": \"(\\\\.\\\\d+)\",\n        \"name\": \"storage.type.format.python\"\n      }, {\n        \"match\": \"(,)\",\n        \"name\": \"storage.type.format.python\"\n      }, {\n        \"match\": \"(\\\\d+)\",\n        \"name\": \"storage.type.format.python\"\n      }, {\n        \"match\": \"(\\\\#)\",\n        \"name\": \"storage.type.format.python\"\n      }, {\n        \"match\": \"([-+ ])\",\n        \"name\": \"storage.type.format.python\"\n      }, {\n        \"match\": \"([<>=^])\",\n        \"name\": \"storage.type.format.python\"\n      }, {\n        \"match\": \"(\\\\w)\",\n        \"name\": \"storage.type.format.python\"\n      }]\n    },\n    \"function-arguments\": {\n      \"begin\": \"(\\\\()\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.arguments.begin.python\"\n        }\n      },\n      \"contentName\": \"meta.function-call.arguments.python\",\n      \"end\": \"(?=\\\\))(?!\\\\)\\\\s*\\\\()\",\n      \"patterns\": [{\n        \"match\": \"(,)\",\n        \"name\": \"punctuation.separator.arguments.python\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.operator.unpacking.arguments.python\"\n          }\n        },\n        \"match\": \"(?x)\\n(?:(?<=[,(])|^) \\\\s* (\\\\*{1,2})\\n\"\n      }, {\n        \"include\": \"#lambda-incomplete\"\n      }, {\n        \"include\": \"#illegal-names\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"variable.parameter.function-call.python\"\n          },\n          \"2\": {\n            \"name\": \"keyword.operator.assignment.python\"\n          }\n        },\n        \"match\": \"\\\\b([[:alpha:]_]\\\\w*)\\\\s*(=)(?!=)\"\n      }, {\n        \"match\": \"=(?!=)\",\n        \"name\": \"keyword.operator.assignment.python\"\n      }, {\n        \"include\": \"#expression\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"punctuation.definition.arguments.end.python\"\n          },\n          \"2\": {\n            \"name\": \"punctuation.definition.arguments.begin.python\"\n          }\n        },\n        \"match\": \"\\\\s*(\\\\))\\\\s*(\\\\()\"\n      }]\n    },\n    \"function-call\": {\n      \"begin\": \"(?x)\\n\\\\b(?=\\n([[:alpha:]_]\\\\w*) \\\\s* (\\\\()\\n)\\n\",\n      \"comment\": 'Regular function call of the type \"name(args)\"',\n      \"end\": \"(\\\\))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.arguments.end.python\"\n        }\n      },\n      \"name\": \"meta.function-call.python\",\n      \"patterns\": [{\n        \"include\": \"#special-variables\"\n      }, {\n        \"include\": \"#function-name\"\n      }, {\n        \"include\": \"#function-arguments\"\n      }]\n    },\n    \"function-declaration\": {\n      \"begin\": \"(?x)\\n\\\\s*\\n(?:\\\\b(async) \\\\s+)? \\\\b(def|fn)\\\\s+\\n(?=\\n[[:alpha:]_][[:word:]]* \\\\s* [\\\\(\\\\[]\\n)\\n\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"storage.type.function.async.python\"\n        },\n        \"2\": {\n          \"name\": \"storage.type.function.python\"\n        }\n      },\n      \"end\": `(:|(?=[#'\"\\\\n]))`,\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.section.function.begin.python\"\n        }\n      },\n      \"name\": \"meta.function.python\",\n      \"patterns\": [{\n        \"include\": \"#function-modifier\"\n      }, {\n        \"include\": \"#function-def-name\"\n      }, {\n        \"include\": \"#parameters\"\n      }, {\n        \"include\": \"#meta_parameters\"\n      }, {\n        \"include\": \"#line-continuation\"\n      }, {\n        \"include\": \"#return-annotation\"\n      }]\n    },\n    \"function-def-name\": {\n      \"patterns\": [{\n        \"include\": \"#illegal-object-name\"\n      }, {\n        \"include\": \"#builtin-possible-callables\"\n      }, {\n        \"match\": \"(?x)\\n\\\\b ([[:alpha:]_]\\\\w*) \\\\b\\n\",\n        \"name\": \"entity.name.function.python\"\n      }]\n    },\n    \"function-modifier\": {\n      \"match\": \"(raises|capturing)\",\n      \"name\": \"storage.modifier\"\n    },\n    \"function-name\": {\n      \"patterns\": [{\n        \"include\": \"#builtin-possible-callables\"\n      }, {\n        \"comment\": \"Some color schemas support meta.function-call.generic scope\",\n        \"match\": \"(?x)\\n\\\\b ([[:alpha:]_]\\\\w*) \\\\b\\n\",\n        \"name\": \"meta.function-call.generic.python\"\n      }]\n    },\n    \"generator\": {\n      \"begin\": \"\\\\bfor\\\\b\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.control.flow.python\"\n        }\n      },\n      \"comment\": 'Match \"for ... in\" construct used in generators and for loops to\\ncorrectly identify the \"in\" as a control flow keyword.\\n',\n      \"end\": \"\\\\bin\\\\b\",\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.control.flow.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#expression\"\n      }]\n    },\n    \"illegal-names\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"keyword.control.flow.python\"\n        },\n        \"2\": {\n          \"name\": \"storage.type.function.python\"\n        },\n        \"3\": {\n          \"name\": \"keyword.control.import.python\"\n        }\n      },\n      \"match\": \"(?x)\\n\\\\b(?:\\n(\\nand | assert | async | await | break | class | struct | trait | continue | del | elif | else | except | finally | for | from | global\\n| if | in | is | (?<=\\\\.)lambda | lambda(?=\\\\s*[\\\\.=])\\n| nonlocal | not | or | pass | raise | return | try | while | with\\n| yield\\n) | (def | fn | capturing | raises) | (\\nas | import\\n)\\n)\\\\b\\n\"\n    },\n    \"illegal-object-name\": {\n      \"comment\": `It's illegal to name class or function \"True\"`,\n      \"match\": \"\\\\b(True|False|None)\\\\b\",\n      \"name\": \"keyword.illegal.name.python\"\n    },\n    \"illegal-operator\": {\n      \"patterns\": [{\n        \"match\": \"&&|\\\\|\\\\||--|\\\\+\\\\+\",\n        \"name\": \"invalid.illegal.operator.python\"\n      }, {\n        \"match\": \"[?$]\",\n        \"name\": \"invalid.illegal.operator.python\"\n      }, {\n        \"comment\": \"We don't want `!` to flash when we're typing `!=`\",\n        \"match\": \"!\\\\b\",\n        \"name\": \"invalid.illegal.operator.python\"\n      }]\n    },\n    \"import\": {\n      \"comment\": \"Import statements used to correctly mark `from`, `import`, and `as`\\n\",\n      \"patterns\": [{\n        \"begin\": \"\\\\b(?<!\\\\.)(from)\\\\b(?=.+import)\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.control.import.python\"\n          }\n        },\n        \"end\": \"$|(?=import)\",\n        \"patterns\": [{\n          \"match\": \"\\\\.+\",\n          \"name\": \"punctuation.separator.period.python\"\n        }, {\n          \"include\": \"#expression\"\n        }]\n      }, {\n        \"begin\": \"\\\\b(?<!\\\\.)(import)\\\\b\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.control.import.python\"\n          }\n        },\n        \"end\": \"$\",\n        \"patterns\": [{\n          \"match\": \"\\\\b(?<!\\\\.)as\\\\b\",\n          \"name\": \"keyword.control.import.python\"\n        }, {\n          \"include\": \"#expression\"\n        }]\n      }]\n    },\n    \"impossible\": {\n      \"comment\": \"This is a special rule that should be used where no match is desired. It is not a good idea to match something like '1{0}' because in some cases that can result in infinite loops in token generation. So the rule instead matches and impossible expression to allow a match to fail and move to the next token.\",\n      \"match\": \"$.^\"\n    },\n    \"inheritance-identifier\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"entity.other.inherited-class.python\"\n        }\n      },\n      \"match\": \"(?x)\\n\\\\b ([[:alpha:]_]\\\\w*) \\\\b\\n\"\n    },\n    \"inheritance-name\": {\n      \"patterns\": [{\n        \"include\": \"#lambda-incomplete\"\n      }, {\n        \"include\": \"#builtin-possible-callables\"\n      }, {\n        \"include\": \"#inheritance-identifier\"\n      }]\n    },\n    \"item-access\": {\n      \"patterns\": [{\n        \"begin\": \"(?x)\\n\\\\b(?=\\n[[:alpha:]_]\\\\w* \\\\s* \\\\[\\n)\\n\",\n        \"end\": \"(\\\\])\",\n        \"endCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.definition.arguments.end.python\"\n          }\n        },\n        \"name\": \"meta.item-access.python\",\n        \"patterns\": [{\n          \"include\": \"#item-name\"\n        }, {\n          \"include\": \"#item-index\"\n        }, {\n          \"include\": \"#expression\"\n        }]\n      }]\n    },\n    \"item-index\": {\n      \"begin\": \"(\\\\[)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.arguments.begin.python\"\n        }\n      },\n      \"contentName\": \"meta.item-access.arguments.python\",\n      \"end\": \"(?=\\\\])\",\n      \"patterns\": [{\n        \"match\": \":\",\n        \"name\": \"punctuation.separator.slice.python\"\n      }, {\n        \"include\": \"#expression\"\n      }]\n    },\n    \"item-name\": {\n      \"patterns\": [{\n        \"include\": \"#special-variables\"\n      }, {\n        \"include\": \"#builtin-functions\"\n      }, {\n        \"include\": \"#special-names\"\n      }, {\n        \"match\": \"(?x)\\n\\\\b ([[:alpha:]_]\\\\w*) \\\\b\\n\",\n        \"name\": \"meta.indexed-name.python\"\n      }]\n    },\n    \"lambda\": {\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.control.flow.python\"\n          }\n        },\n        \"match\": \"((?<=\\\\.)lambda|lambda(?=\\\\s*[\\\\.=]))\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"storage.type.function.lambda.python\"\n          }\n        },\n        \"match\": \"\\\\b(lambda)\\\\s*?(?=[,\\\\n]|$)\"\n      }, {\n        \"begin\": \"(?x)\\n\\\\b (lambda) \\\\b\\n\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"storage.type.function.lambda.python\"\n          }\n        },\n        \"contentName\": \"meta.function.lambda.parameters.python\",\n        \"end\": \"(:)|(\\\\n)\",\n        \"endCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.section.function.lambda.begin.python\"\n          }\n        },\n        \"name\": \"meta.lambda-function.python\",\n        \"patterns\": [{\n          \"match\": \"\\\\b(owned|borrowed|inout)\\\\b\",\n          \"name\": \"storage.modifier\"\n        }, {\n          \"match\": \"/\",\n          \"name\": \"keyword.operator.positional.parameter.python\"\n        }, {\n          \"match\": \"(\\\\*\\\\*|\\\\*)\",\n          \"name\": \"keyword.operator.unpacking.parameter.python\"\n        }, {\n          \"include\": \"#lambda-nested-incomplete\"\n        }, {\n          \"include\": \"#illegal-names\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"variable.parameter.function.language.python\"\n            },\n            \"2\": {\n              \"name\": \"punctuation.separator.parameters.python\"\n            }\n          },\n          \"match\": \"([[:alpha:]_]\\\\w*)\\\\s*(?:(,)|(?=:|$))\"\n        }, {\n          \"include\": \"#comments\"\n        }, {\n          \"include\": \"#backticks\"\n        }, {\n          \"include\": \"#lambda-parameter-with-default\"\n        }, {\n          \"include\": \"#line-continuation\"\n        }, {\n          \"include\": \"#illegal-operator\"\n        }]\n      }]\n    },\n    \"lambda-incomplete\": {\n      \"match\": \"\\\\blambda(?=\\\\s*[,)])\",\n      \"name\": \"storage.type.function.lambda.python\"\n    },\n    \"lambda-nested-incomplete\": {\n      \"match\": \"\\\\blambda(?=\\\\s*[:,)])\",\n      \"name\": \"storage.type.function.lambda.python\"\n    },\n    \"lambda-parameter-with-default\": {\n      \"begin\": \"(?x)\\n\\\\b\\n([[:alpha:]_]\\\\w*) \\\\s* (=)\\n\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"variable.parameter.function.language.python\"\n        },\n        \"2\": {\n          \"name\": \"keyword.operator.python\"\n        }\n      },\n      \"end\": \"(,)|(?=:|$)\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.separator.parameters.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#expression\"\n      }]\n    },\n    \"line-continuation\": {\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"name\": \"punctuation.separator.continuation.line.python\"\n          },\n          \"2\": {\n            \"name\": \"invalid.illegal.line.continuation.python\"\n          }\n        },\n        \"match\": \"(\\\\\\\\)\\\\s*(\\\\S.*$\\\\n?)\"\n      }, {\n        \"begin\": \"(\\\\\\\\)\\\\s*$\\\\n?\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.separator.continuation.line.python\"\n          }\n        },\n        \"end\": `(?x)\n(?=^\\\\s*$)\n|\n(?! (\\\\s* [rR]? (\\\\'\\\\'\\\\'|\\\\\"\\\\\"\\\\\"|\\\\'|\\\\\"))\n|\n(\\\\G $)  (?# '\\\\G' is necessary for ST)\n)\n`,\n        \"patterns\": [{\n          \"include\": \"#regexp\"\n        }, {\n          \"include\": \"#string\"\n        }]\n      }]\n    },\n    \"list\": {\n      \"begin\": \"\\\\[\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.list.begin.python\"\n        }\n      },\n      \"end\": \"\\\\]\",\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.list.end.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#expression\"\n      }]\n    },\n    \"literal\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b(True|False|None|NotImplemented|Ellipsis)\\\\b\",\n        \"name\": \"constant.language.python\"\n      }, {\n        \"include\": \"#number\"\n      }]\n    },\n    \"loose-default\": {\n      \"begin\": \"(=)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.python\"\n        }\n      },\n      \"end\": \"(,)|(?=\\\\))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.separator.parameters.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#expression\"\n      }]\n    },\n    \"magic-function-names\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"support.function.magic.python\"\n        }\n      },\n      \"comment\": \"these methods have magic interpretation by python and are generally called\\nindirectly through syntactic constructs\\n\",\n      \"match\": \"(?x)\\n\\\\b(\\n__(?:\\nabs | add | aenter | aexit | aiter | and | anext\\n| await | bool | call | ceil | class_getitem\\n| cmp | coerce | complex | contains | copy\\n| deepcopy | del | delattr | delete | delitem\\n| delslice | dir | div | divmod | enter | eq\\n| exit | float | floor | floordiv | format | ge\\n| get | getattr | getattribute | getinitargs\\n| getitem | getnewargs | getslice | getstate | gt\\n| hash | hex | iadd | iand | idiv | ifloordiv |\\n| ilshift | imod | imul | index | init\\n| instancecheck | int | invert | ior | ipow\\n| irshift | isub | iter | itruediv | ixor | le\\n| len | long | lshift | lt | missing | mod | mul\\n| ne | neg | new | next | nonzero | oct | or | pos\\n| pow | radd | rand | rdiv | rdivmod | reduce\\n| reduce_ex | repr | reversed | rfloordiv |\\n| rlshift | rmod | rmul | ror | round | rpow\\n| rrshift | rshift | rsub | rtruediv | rxor | set\\n| setattr | setitem | set_name | setslice\\n| setstate | sizeof | str | sub | subclasscheck\\n| truediv | trunc | unicode | xor | matmul\\n| rmatmul | imatmul | init_subclass | set_name\\n| fspath | bytes | prepare | length_hint\\n)__\\n)\\\\b\\n\"\n    },\n    \"magic-names\": {\n      \"patterns\": [{\n        \"include\": \"#magic-function-names\"\n      }, {\n        \"include\": \"#magic-variable-names\"\n      }]\n    },\n    \"magic-variable-names\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"support.variable.magic.python\"\n        }\n      },\n      \"comment\": \"magic variables which a class/module may have.\",\n      \"match\": \"(?x)\\n\\\\b(\\n__(?:\\nall | annotations | bases | builtins | class\\n| struct\\n| trait\\n| closure | code | debug | defaults | dict | doc | file | func\\n| globals | kwdefaults | match_args | members | metaclass | methods\\n| module | mro | mro_entries | name | qualname | post_init | self\\n| signature | slots | subclasses | version | weakref | wrapped\\n| classcell | spec | path | package | future | traceback\\n)__\\n)\\\\b\\n\"\n    },\n    \"member-access\": {\n      \"begin\": \"(\\\\.)\\\\s*(?!\\\\.)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.separator.period.python\"\n        }\n      },\n      \"end\": \"(?x)\\n\\n\\n(?<=\\\\S)(?=\\\\W) |\\n\\n\\n(^|(?<=\\\\s))(?=[^\\\\\\\\\\\\w\\\\s]) |\\n$\\n\",\n      \"name\": \"meta.member.access.python\",\n      \"patterns\": [{\n        \"include\": \"#function-call\"\n      }, {\n        \"include\": \"#member-access-base\"\n      }, {\n        \"include\": \"#member-access-attribute\"\n      }]\n    },\n    \"member-access-attribute\": {\n      \"comment\": \"Highlight attribute access in otherwise non-specialized cases.\",\n      \"match\": \"(?x)\\n\\\\b ([[:alpha:]_]\\\\w*) \\\\b\\n\",\n      \"name\": \"meta.attribute.python\"\n    },\n    \"member-access-base\": {\n      \"patterns\": [{\n        \"include\": \"#magic-names\"\n      }, {\n        \"include\": \"#illegal-names\"\n      }, {\n        \"include\": \"#illegal-object-name\"\n      }, {\n        \"include\": \"#special-names\"\n      }, {\n        \"include\": \"#line-continuation\"\n      }, {\n        \"include\": \"#item-access\"\n      }]\n    },\n    \"member-access-class\": {\n      \"begin\": \"(\\\\.)\\\\s*(?!\\\\.)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.separator.period.python\"\n        }\n      },\n      \"end\": \"(?<=\\\\S)(?=\\\\W)|$\",\n      \"name\": \"meta.member.access.python\",\n      \"patterns\": [{\n        \"include\": \"#call-wrapper-inheritance\"\n      }, {\n        \"include\": \"#member-access-base\"\n      }, {\n        \"include\": \"#inheritance-identifier\"\n      }]\n    },\n    \"meta_parameters\": {\n      \"begin\": \"(\\\\[)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.parameters.begin.python\"\n        }\n      },\n      \"end\": \"(\\\\])\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.parameters.end.python\"\n        }\n      },\n      \"name\": \"meta.function.parameters.python\",\n      \"patterns\": [{\n        \"begin\": \"(?x)\\n\\\\b\\n([[:alpha:]_]\\\\w*) \\\\s* (:)\\n\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"variable.parameter.function.language.python\"\n          },\n          \"2\": {\n            \"name\": \"punctuation.separator.annotation.python\"\n          }\n        },\n        \"end\": \"(,)|(?=\\\\])\",\n        \"endCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.separator.parameters.python\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#expression\"\n        }]\n      }, {\n        \"include\": \"#comments\"\n      }]\n    },\n    \"number\": {\n      \"name\": \"constant.numeric.python\",\n      \"patterns\": [{\n        \"include\": \"#number-float\"\n      }, {\n        \"include\": \"#number-dec\"\n      }, {\n        \"include\": \"#number-hex\"\n      }, {\n        \"include\": \"#number-oct\"\n      }, {\n        \"include\": \"#number-bin\"\n      }, {\n        \"include\": \"#number-long\"\n      }, {\n        \"match\": \"\\\\b[0-9]+\\\\w+\",\n        \"name\": \"invalid.illegal.name.python\"\n      }]\n    },\n    \"number-bin\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"storage.type.number.python\"\n        }\n      },\n      \"match\": \"(?x)\\n(?<![\\\\w\\\\.])\\n(0[bB]) (_?[01])+\\n\\\\b\\n\",\n      \"name\": \"constant.numeric.bin.python\"\n    },\n    \"number-dec\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"storage.type.imaginary.number.python\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.dec.python\"\n        }\n      },\n      \"match\": \"(?x)\\n(?<![\\\\w\\\\.])(?:\\n[1-9](?: _?[0-9] )*\\n|\\n0+\\n|\\n[0-9](?: _?[0-9] )* ([jJ])\\n|\\n0 ([0-9]+)(?![eE\\\\.])\\n)\\\\b\\n\",\n      \"name\": \"constant.numeric.dec.python\"\n    },\n    \"number-float\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"storage.type.imaginary.number.python\"\n        }\n      },\n      \"match\": \"(?x)\\n(?<! \\\\w)(?:\\n(?:\\n\\\\.[0-9](?: _?[0-9] )*\\n|\\n[0-9](?: _?[0-9] )* \\\\. [0-9](?: _?[0-9] )*\\n|\\n[0-9](?: _?[0-9] )* \\\\.\\n) (?: [eE][+-]?[0-9](?: _?[0-9] )* )?\\n|\\n[0-9](?: _?[0-9] )* (?: [eE][+-]?[0-9](?: _?[0-9] )* )\\n)([jJ])?\\\\b\\n\",\n      \"name\": \"constant.numeric.float.python\"\n    },\n    \"number-hex\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"storage.type.number.python\"\n        }\n      },\n      \"match\": \"(?x)\\n(?<![\\\\w\\\\.])\\n(0[xX]) (_?[0-9a-fA-F])+\\n\\\\b\\n\",\n      \"name\": \"constant.numeric.hex.python\"\n    },\n    \"number-long\": {\n      \"captures\": {\n        \"2\": {\n          \"name\": \"storage.type.number.python\"\n        }\n      },\n      \"comment\": \"this is to support python2 syntax for long ints\",\n      \"match\": \"(?x)\\n(?<![\\\\w\\\\.])\\n([1-9][0-9]* | 0) ([lL])\\n\\\\b\\n\",\n      \"name\": \"constant.numeric.bin.python\"\n    },\n    \"number-oct\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"storage.type.number.python\"\n        }\n      },\n      \"match\": \"(?x)\\n(?<![\\\\w\\\\.])\\n(0[oO]) (_?[0-7])+\\n\\\\b\\n\",\n      \"name\": \"constant.numeric.oct.python\"\n    },\n    \"odd-function-call\": {\n      \"begin\": \"(?x)\\n(?<= \\\\] | \\\\) ) \\\\s*\\n(?=\\\\()\\n\",\n      \"comment\": 'A bit obscured function call where there may have been an\\narbitrary number of other operations to get the function.\\nE.g. \"arr[idx](args)\"\\n',\n      \"end\": \"(\\\\))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.arguments.end.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#function-arguments\"\n      }]\n    },\n    \"operator\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.logical.python\"\n        },\n        \"2\": {\n          \"name\": \"keyword.control.flow.python\"\n        },\n        \"3\": {\n          \"name\": \"keyword.operator.bitwise.python\"\n        },\n        \"4\": {\n          \"name\": \"keyword.operator.arithmetic.python\"\n        },\n        \"5\": {\n          \"name\": \"keyword.operator.comparison.python\"\n        },\n        \"6\": {\n          \"name\": \"keyword.operator.assignment.python\"\n        }\n      },\n      \"match\": \"(?x)\\n\\\\b(?<!\\\\.)\\n(?:\\n(and | or | not | in | is)                         (?# 1)\\n|\\n(for | if | else | await | (?:yield(?:\\\\s+from)?))  (?# 2)\\n)\\n(?!\\\\s*:)\\\\b\\n\\n| (<< | >> | & | \\\\| | \\\\^ | ~)                          (?# 3)\\n\\n| (\\\\*\\\\* | \\\\* | \\\\+ | - | % | // | / | @)                (?# 4)\\n\\n| (!= | == | >= | <= | < | >)                          (?# 5)\\n\\n| (:=)                                                 (?# 6)\\n\"\n    },\n    \"parameter-special\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"variable.parameter.function.language.python\"\n        },\n        \"2\": {\n          \"name\": \"variable.parameter.function.language.special.self.python\"\n        },\n        \"3\": {\n          \"name\": \"variable.parameter.function.language.special.cls.python\"\n        },\n        \"4\": {\n          \"name\": \"punctuation.separator.parameters.python\"\n        }\n      },\n      \"match\": \"(?x)\\n\\\\b ((self)|(cls)) \\\\b \\\\s*(?:(,)|(?=\\\\)))\\n\"\n    },\n    \"parameters\": {\n      \"begin\": \"(\\\\()\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.parameters.begin.python\"\n        }\n      },\n      \"end\": \"(\\\\))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.parameters.end.python\"\n        }\n      },\n      \"name\": \"meta.function.parameters.python\",\n      \"patterns\": [{\n        \"match\": \"\\\\b(owned|borrowed|inout)\\\\b\",\n        \"name\": \"storage.modifier\"\n      }, {\n        \"match\": \"/\",\n        \"name\": \"keyword.operator.positional.parameter.python\"\n      }, {\n        \"match\": \"(\\\\*\\\\*|\\\\*)\",\n        \"name\": \"keyword.operator.unpacking.parameter.python\"\n      }, {\n        \"include\": \"#lambda-incomplete\"\n      }, {\n        \"include\": \"#illegal-names\"\n      }, {\n        \"include\": \"#illegal-object-name\"\n      }, {\n        \"include\": \"#parameter-special\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"variable.parameter.function.language.python\"\n          },\n          \"2\": {\n            \"name\": \"punctuation.separator.parameters.python\"\n          }\n        },\n        \"match\": \"(?x)\\n([[:alpha:]_]\\\\w*)\\n\\\\s* (?: (,) | (?=[)#\\\\n=]))\\n\"\n      }, {\n        \"include\": \"#comments\"\n      }, {\n        \"include\": \"#loose-default\"\n      }, {\n        \"include\": \"#annotated-parameter\"\n      }]\n    },\n    \"punctuation\": {\n      \"patterns\": [{\n        \"match\": \":\",\n        \"name\": \"punctuation.separator.colon.python\"\n      }, {\n        \"match\": \",\",\n        \"name\": \"punctuation.separator.element.python\"\n      }]\n    },\n    \"regexp\": {\n      \"patterns\": [{\n        \"include\": \"#regexp-single-three-line\"\n      }, {\n        \"include\": \"#regexp-double-three-line\"\n      }, {\n        \"include\": \"#regexp-single-one-line\"\n      }, {\n        \"include\": \"#regexp-double-one-line\"\n      }]\n    },\n    \"regexp-backreference\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.begin.regexp\"\n        },\n        \"2\": {\n          \"name\": \"entity.name.tag.named.backreference.regexp\"\n        },\n        \"3\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.end.regexp\"\n        }\n      },\n      \"match\": \"(?x)\\n(\\\\()  (\\\\?P= \\\\w+(?:\\\\s+[[:alnum:]]+)?)  (\\\\))\\n\",\n      \"name\": \"meta.backreference.named.regexp\"\n    },\n    \"regexp-backreference-number\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"entity.name.tag.backreference.regexp\"\n        }\n      },\n      \"match\": \"(\\\\\\\\[1-9]\\\\d?)\",\n      \"name\": \"meta.backreference.regexp\"\n    },\n    \"regexp-base-common\": {\n      \"patterns\": [{\n        \"match\": \"\\\\.\",\n        \"name\": \"support.other.match.any.regexp\"\n      }, {\n        \"match\": \"\\\\^\",\n        \"name\": \"support.other.match.begin.regexp\"\n      }, {\n        \"match\": \"\\\\$\",\n        \"name\": \"support.other.match.end.regexp\"\n      }, {\n        \"match\": \"[+*?]\\\\??\",\n        \"name\": \"keyword.operator.quantifier.regexp\"\n      }, {\n        \"match\": \"\\\\|\",\n        \"name\": \"keyword.operator.disjunction.regexp\"\n      }, {\n        \"include\": \"#regexp-escape-sequence\"\n      }]\n    },\n    \"regexp-base-expression\": {\n      \"patterns\": [{\n        \"include\": \"#regexp-quantifier\"\n      }, {\n        \"include\": \"#regexp-base-common\"\n      }]\n    },\n    \"regexp-charecter-set-escapes\": {\n      \"patterns\": [{\n        \"match\": \"\\\\\\\\[abfnrtv\\\\\\\\]\",\n        \"name\": \"constant.character.escape.regexp\"\n      }, {\n        \"include\": \"#regexp-escape-special\"\n      }, {\n        \"match\": \"\\\\\\\\([0-7]{1,3})\",\n        \"name\": \"constant.character.escape.regexp\"\n      }, {\n        \"include\": \"#regexp-escape-character\"\n      }, {\n        \"include\": \"#regexp-escape-unicode\"\n      }, {\n        \"include\": \"#regexp-escape-catchall\"\n      }]\n    },\n    \"regexp-double-one-line\": {\n      \"begin\": '\\\\b(([uU]r)|([bB]r)|(r[bB]?))(\")',\n      \"beginCaptures\": {\n        \"2\": {\n          \"name\": \"invalid.deprecated.prefix.python\"\n        },\n        \"3\": {\n          \"name\": \"storage.type.string.python\"\n        },\n        \"4\": {\n          \"name\": \"storage.type.string.python\"\n        },\n        \"5\": {\n          \"name\": \"punctuation.definition.string.begin.python\"\n        }\n      },\n      \"end\": '(\")|(?<!\\\\\\\\)(\\\\n)',\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.string.end.python\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"string.regexp.quoted.single.python\",\n      \"patterns\": [{\n        \"include\": \"#double-one-regexp-expression\"\n      }]\n    },\n    \"regexp-double-three-line\": {\n      \"begin\": '\\\\b(([uU]r)|([bB]r)|(r[bB]?))(\"\"\")',\n      \"beginCaptures\": {\n        \"2\": {\n          \"name\": \"invalid.deprecated.prefix.python\"\n        },\n        \"3\": {\n          \"name\": \"storage.type.string.python\"\n        },\n        \"4\": {\n          \"name\": \"storage.type.string.python\"\n        },\n        \"5\": {\n          \"name\": \"punctuation.definition.string.begin.python\"\n        }\n      },\n      \"end\": '(\"\"\")',\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.string.end.python\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"string.regexp.quoted.multi.python\",\n      \"patterns\": [{\n        \"include\": \"#double-three-regexp-expression\"\n      }]\n    },\n    \"regexp-escape-catchall\": {\n      \"match\": \"\\\\\\\\(.|\\\\n)\",\n      \"name\": \"constant.character.escape.regexp\"\n    },\n    \"regexp-escape-character\": {\n      \"match\": \"(?x)\\n\\\\\\\\ (\\nx[0-9A-Fa-f]{2}\\n| 0[0-7]{1,2}\\n| [0-7]{3}\\n)\\n\",\n      \"name\": \"constant.character.escape.regexp\"\n    },\n    \"regexp-escape-sequence\": {\n      \"patterns\": [{\n        \"include\": \"#regexp-escape-special\"\n      }, {\n        \"include\": \"#regexp-escape-character\"\n      }, {\n        \"include\": \"#regexp-escape-unicode\"\n      }, {\n        \"include\": \"#regexp-backreference-number\"\n      }, {\n        \"include\": \"#regexp-escape-catchall\"\n      }]\n    },\n    \"regexp-escape-special\": {\n      \"match\": \"\\\\\\\\([AbBdDsSwWZ])\",\n      \"name\": \"support.other.escape.special.regexp\"\n    },\n    \"regexp-escape-unicode\": {\n      \"match\": \"(?x)\\n\\\\\\\\ (\\nu[0-9A-Fa-f]{4}\\n| U[0-9A-Fa-f]{8}\\n)\\n\",\n      \"name\": \"constant.character.unicode.regexp\"\n    },\n    \"regexp-flags\": {\n      \"match\": \"\\\\(\\\\?[aiLmsux]+\\\\)\",\n      \"name\": \"storage.modifier.flag.regexp\"\n    },\n    \"regexp-quantifier\": {\n      \"match\": \"(?x)\\n\\\\{(\\n\\\\d+ | \\\\d+,(\\\\d+)? | ,\\\\d+\\n)\\\\}\\n\",\n      \"name\": \"keyword.operator.quantifier.regexp\"\n    },\n    \"regexp-single-one-line\": {\n      \"begin\": \"\\\\b(([uU]r)|([bB]r)|(r[bB]?))(\\\\')\",\n      \"beginCaptures\": {\n        \"2\": {\n          \"name\": \"invalid.deprecated.prefix.python\"\n        },\n        \"3\": {\n          \"name\": \"storage.type.string.python\"\n        },\n        \"4\": {\n          \"name\": \"storage.type.string.python\"\n        },\n        \"5\": {\n          \"name\": \"punctuation.definition.string.begin.python\"\n        }\n      },\n      \"end\": \"(\\\\')|(?<!\\\\\\\\)(\\\\n)\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.string.end.python\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"string.regexp.quoted.single.python\",\n      \"patterns\": [{\n        \"include\": \"#single-one-regexp-expression\"\n      }]\n    },\n    \"regexp-single-three-line\": {\n      \"begin\": \"\\\\b(([uU]r)|([bB]r)|(r[bB]?))(\\\\'\\\\'\\\\')\",\n      \"beginCaptures\": {\n        \"2\": {\n          \"name\": \"invalid.deprecated.prefix.python\"\n        },\n        \"3\": {\n          \"name\": \"storage.type.string.python\"\n        },\n        \"4\": {\n          \"name\": \"storage.type.string.python\"\n        },\n        \"5\": {\n          \"name\": \"punctuation.definition.string.begin.python\"\n        }\n      },\n      \"end\": \"(\\\\'\\\\'\\\\')\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.string.end.python\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"string.regexp.quoted.multi.python\",\n      \"patterns\": [{\n        \"include\": \"#single-three-regexp-expression\"\n      }]\n    },\n    \"return-annotation\": {\n      \"begin\": \"(->)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.separator.annotation.result.python\"\n        }\n      },\n      \"end\": \"(?=:)\",\n      \"patterns\": [{\n        \"include\": \"#expression\"\n      }]\n    },\n    \"round-braces\": {\n      \"begin\": \"\\\\(\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.parenthesis.begin.python\"\n        }\n      },\n      \"end\": \"\\\\)\",\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.parenthesis.end.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#expression\"\n      }]\n    },\n    \"semicolon\": {\n      \"patterns\": [{\n        \"match\": \"\\\\;$\",\n        \"name\": \"invalid.deprecated.semicolon.python\"\n      }]\n    },\n    \"single-one-regexp-character-set\": {\n      \"patterns\": [{\n        \"match\": \"(?x)\\n\\\\[ \\\\^? \\\\] (?! .*?\\\\])\\n\"\n      }, {\n        \"begin\": \"(\\\\[)(\\\\^)?(\\\\])?\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.character.set.begin.regexp constant.other.set.regexp\"\n          },\n          \"2\": {\n            \"name\": \"keyword.operator.negation.regexp\"\n          },\n          \"3\": {\n            \"name\": \"constant.character.set.regexp\"\n          }\n        },\n        \"end\": \"(\\\\]|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n        \"endCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.character.set.end.regexp constant.other.set.regexp\"\n          },\n          \"2\": {\n            \"name\": \"invalid.illegal.newline.python\"\n          }\n        },\n        \"name\": \"meta.character.set.regexp\",\n        \"patterns\": [{\n          \"include\": \"#regexp-charecter-set-escapes\"\n        }, {\n          \"match\": \"[^\\\\n]\",\n          \"name\": \"constant.character.set.regexp\"\n        }]\n      }]\n    },\n    \"single-one-regexp-comments\": {\n      \"begin\": \"\\\\(\\\\?#\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.comment.begin.regexp\"\n        }\n      },\n      \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.comment.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"comment.regexp\",\n      \"patterns\": [{\n        \"include\": \"#codetags\"\n      }]\n    },\n    \"single-one-regexp-conditional\": {\n      \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.conditional.regexp\"\n        },\n        \"1\": {\n          \"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\n        }\n      },\n      \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#single-one-regexp-expression\"\n      }]\n    },\n    \"single-one-regexp-expression\": {\n      \"patterns\": [{\n        \"include\": \"#regexp-base-expression\"\n      }, {\n        \"include\": \"#single-one-regexp-character-set\"\n      }, {\n        \"include\": \"#single-one-regexp-comments\"\n      }, {\n        \"include\": \"#regexp-flags\"\n      }, {\n        \"include\": \"#single-one-regexp-named-group\"\n      }, {\n        \"include\": \"#regexp-backreference\"\n      }, {\n        \"include\": \"#single-one-regexp-lookahead\"\n      }, {\n        \"include\": \"#single-one-regexp-lookahead-negative\"\n      }, {\n        \"include\": \"#single-one-regexp-lookbehind\"\n      }, {\n        \"include\": \"#single-one-regexp-lookbehind-negative\"\n      }, {\n        \"include\": \"#single-one-regexp-conditional\"\n      }, {\n        \"include\": \"#single-one-regexp-parentheses-non-capturing\"\n      }, {\n        \"include\": \"#single-one-regexp-parentheses\"\n      }]\n    },\n    \"single-one-regexp-lookahead\": {\n      \"begin\": \"(\\\\()\\\\?=\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.lookahead.regexp\"\n        },\n        \"1\": {\n          \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\n        }\n      },\n      \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#single-one-regexp-expression\"\n      }]\n    },\n    \"single-one-regexp-lookahead-negative\": {\n      \"begin\": \"(\\\\()\\\\?!\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.lookahead.negative.regexp\"\n        },\n        \"1\": {\n          \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\n        }\n      },\n      \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#single-one-regexp-expression\"\n      }]\n    },\n    \"single-one-regexp-lookbehind\": {\n      \"begin\": \"(\\\\()\\\\?<=\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.lookbehind.regexp\"\n        },\n        \"1\": {\n          \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\n        }\n      },\n      \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#single-one-regexp-expression\"\n      }]\n    },\n    \"single-one-regexp-lookbehind-negative\": {\n      \"begin\": \"(\\\\()\\\\?<!\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.lookbehind.negative.regexp\"\n        },\n        \"1\": {\n          \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\n        }\n      },\n      \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#single-one-regexp-expression\"\n      }]\n    },\n    \"single-one-regexp-named-group\": {\n      \"begin\": \"(?x)\\n(\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\n        },\n        \"2\": {\n          \"name\": \"entity.name.tag.named.group.regexp\"\n        }\n      },\n      \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"meta.named.regexp\",\n      \"patterns\": [{\n        \"include\": \"#single-one-regexp-expression\"\n      }]\n    },\n    \"single-one-regexp-parentheses\": {\n      \"begin\": \"\\\\(\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\n        }\n      },\n      \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#single-one-regexp-expression\"\n      }]\n    },\n    \"single-one-regexp-parentheses-non-capturing\": {\n      \"begin\": \"\\\\(\\\\?:\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\n        }\n      },\n      \"end\": \"(\\\\)|(?=\\\\'))|((?=(?<!\\\\\\\\)\\\\n))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#single-one-regexp-expression\"\n      }]\n    },\n    \"single-three-regexp-character-set\": {\n      \"patterns\": [{\n        \"match\": \"(?x)\\n\\\\[ \\\\^? \\\\] (?! .*?\\\\])\\n\"\n      }, {\n        \"begin\": \"(\\\\[)(\\\\^)?(\\\\])?\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.character.set.begin.regexp constant.other.set.regexp\"\n          },\n          \"2\": {\n            \"name\": \"keyword.operator.negation.regexp\"\n          },\n          \"3\": {\n            \"name\": \"constant.character.set.regexp\"\n          }\n        },\n        \"end\": \"(\\\\]|(?=\\\\'\\\\'\\\\'))\",\n        \"endCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.character.set.end.regexp constant.other.set.regexp\"\n          },\n          \"2\": {\n            \"name\": \"invalid.illegal.newline.python\"\n          }\n        },\n        \"name\": \"meta.character.set.regexp\",\n        \"patterns\": [{\n          \"include\": \"#regexp-charecter-set-escapes\"\n        }, {\n          \"match\": \"[^\\\\n]\",\n          \"name\": \"constant.character.set.regexp\"\n        }]\n      }]\n    },\n    \"single-three-regexp-comments\": {\n      \"begin\": \"\\\\(\\\\?#\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.comment.begin.regexp\"\n        }\n      },\n      \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.comment.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"comment.regexp\",\n      \"patterns\": [{\n        \"include\": \"#codetags\"\n      }]\n    },\n    \"single-three-regexp-conditional\": {\n      \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.conditional.regexp\"\n        },\n        \"1\": {\n          \"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\n        }\n      },\n      \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#single-three-regexp-expression\"\n      }, {\n        \"include\": \"#comments-string-single-three\"\n      }]\n    },\n    \"single-three-regexp-expression\": {\n      \"patterns\": [{\n        \"include\": \"#regexp-base-expression\"\n      }, {\n        \"include\": \"#single-three-regexp-character-set\"\n      }, {\n        \"include\": \"#single-three-regexp-comments\"\n      }, {\n        \"include\": \"#regexp-flags\"\n      }, {\n        \"include\": \"#single-three-regexp-named-group\"\n      }, {\n        \"include\": \"#regexp-backreference\"\n      }, {\n        \"include\": \"#single-three-regexp-lookahead\"\n      }, {\n        \"include\": \"#single-three-regexp-lookahead-negative\"\n      }, {\n        \"include\": \"#single-three-regexp-lookbehind\"\n      }, {\n        \"include\": \"#single-three-regexp-lookbehind-negative\"\n      }, {\n        \"include\": \"#single-three-regexp-conditional\"\n      }, {\n        \"include\": \"#single-three-regexp-parentheses-non-capturing\"\n      }, {\n        \"include\": \"#single-three-regexp-parentheses\"\n      }, {\n        \"include\": \"#comments-string-single-three\"\n      }]\n    },\n    \"single-three-regexp-lookahead\": {\n      \"begin\": \"(\\\\()\\\\?=\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.lookahead.regexp\"\n        },\n        \"1\": {\n          \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\n        }\n      },\n      \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#single-three-regexp-expression\"\n      }, {\n        \"include\": \"#comments-string-single-three\"\n      }]\n    },\n    \"single-three-regexp-lookahead-negative\": {\n      \"begin\": \"(\\\\()\\\\?!\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.lookahead.negative.regexp\"\n        },\n        \"1\": {\n          \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\n        }\n      },\n      \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#single-three-regexp-expression\"\n      }, {\n        \"include\": \"#comments-string-single-three\"\n      }]\n    },\n    \"single-three-regexp-lookbehind\": {\n      \"begin\": \"(\\\\()\\\\?<=\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.lookbehind.regexp\"\n        },\n        \"1\": {\n          \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\n        }\n      },\n      \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#single-three-regexp-expression\"\n      }, {\n        \"include\": \"#comments-string-single-three\"\n      }]\n    },\n    \"single-three-regexp-lookbehind-negative\": {\n      \"begin\": \"(\\\\()\\\\?<!\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.lookbehind.negative.regexp\"\n        },\n        \"1\": {\n          \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\n        }\n      },\n      \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#single-three-regexp-expression\"\n      }, {\n        \"include\": \"#comments-string-single-three\"\n      }]\n    },\n    \"single-three-regexp-named-group\": {\n      \"begin\": \"(?x)\\n(\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\n        },\n        \"2\": {\n          \"name\": \"entity.name.tag.named.group.regexp\"\n        }\n      },\n      \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"meta.named.regexp\",\n      \"patterns\": [{\n        \"include\": \"#single-three-regexp-expression\"\n      }, {\n        \"include\": \"#comments-string-single-three\"\n      }]\n    },\n    \"single-three-regexp-parentheses\": {\n      \"begin\": \"\\\\(\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\n        }\n      },\n      \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#single-three-regexp-expression\"\n      }, {\n        \"include\": \"#comments-string-single-three\"\n      }]\n    },\n    \"single-three-regexp-parentheses-non-capturing\": {\n      \"begin\": \"\\\\(\\\\?:\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\n        }\n      },\n      \"end\": \"(\\\\)|(?=\\\\'\\\\'\\\\'))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#single-three-regexp-expression\"\n      }, {\n        \"include\": \"#comments-string-single-three\"\n      }]\n    },\n    \"special-names\": {\n      \"match\": \"(?x)\\n\\\\b\\n\\n\\n\\n\\n\\n(\\n_* [[:upper:]] [_\\\\d]* [[:upper:]]\\n)\\n[[:upper:]\\\\d]* (_\\\\w*)?\\n\\\\b\\n\",\n      \"name\": \"constant.other.caps.python\"\n    },\n    \"special-variables\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"variable.language.special.self.python\"\n        },\n        \"2\": {\n          \"name\": \"variable.language.special.cls.python\"\n        }\n      },\n      \"match\": \"(?x)\\n\\\\b (?<!\\\\.) (?:\\n(self) | (cls)\\n)\\\\b\\n\"\n    },\n    \"statement\": {\n      \"patterns\": [{\n        \"include\": \"#import\"\n      }, {\n        \"include\": \"#class-declaration\"\n      }, {\n        \"include\": \"#function-declaration\"\n      }, {\n        \"include\": \"#generator\"\n      }, {\n        \"include\": \"#statement-keyword\"\n      }, {\n        \"include\": \"#assignment-operator\"\n      }, {\n        \"include\": \"#decorator\"\n      }, {\n        \"include\": \"#semicolon\"\n      }]\n    },\n    \"statement-keyword\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b((async\\\\s+)?\\\\s*(def|fn))\\\\b\",\n        \"name\": \"storage.type.function.python\"\n      }, {\n        \"comment\": \"if `as` is eventually followed by `:` or line continuation\\nit's probably control flow like:\\n    with foo as bar, \\\\\\n         Foo as Bar:\\n      try:\\n        do_stuff()\\n      except Exception as e:\\n        pass\\n\",\n        \"match\": \"\\\\b(?<!\\\\.)as\\\\b(?=.*[:\\\\\\\\])\",\n        \"name\": \"keyword.control.flow.python\"\n      }, {\n        \"comment\": \"other legal use of `as` is in an import\",\n        \"match\": \"\\\\b(?<!\\\\.)as\\\\b\",\n        \"name\": \"keyword.control.import.python\"\n      }, {\n        \"match\": \"(?x)\\n\\\\b(?<!\\\\.)(\\nasync | continue | del | assert | break | finally | for\\n| from | elif | else | if | except | pass | raise\\n| return | try | while | with\\n)\\\\b\\n\",\n        \"name\": \"keyword.control.flow.python\"\n      }, {\n        \"match\": \"(?x)\\n\\\\b(?<!\\\\.)(\\nglobal | nonlocal\\n)\\\\b\\n\",\n        \"name\": \"storage.modifier.declaration.python\"\n      }, {\n        \"match\": \"\\\\b(?<!\\\\.)(class|struct|trait)\\\\b\",\n        \"name\": \"storage.type.class.python\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.control.flow.python\"\n          }\n        },\n        \"match\": `(?x)\n^\\\\s*(\ncase | match\n)(?=\\\\s*([-+\\\\w\\\\d(\\\\[{'\":#]|$))\\\\b\n`\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"storage.modifier.declaration.python\"\n          },\n          \"2\": {\n            \"name\": \"variable.other.python\"\n          }\n        },\n        \"match\": \"\\\\b(var|let|alias) \\\\s*([[:alpha:]_]\\\\w*)\\\\b\"\n      }]\n    },\n    \"string\": {\n      \"patterns\": [{\n        \"include\": \"#string-quoted-multi-line\"\n      }, {\n        \"include\": \"#string-quoted-single-line\"\n      }, {\n        \"include\": \"#string-bin-quoted-multi-line\"\n      }, {\n        \"include\": \"#string-bin-quoted-single-line\"\n      }, {\n        \"include\": \"#string-raw-quoted-multi-line\"\n      }, {\n        \"include\": \"#string-raw-quoted-single-line\"\n      }, {\n        \"include\": \"#string-raw-bin-quoted-multi-line\"\n      }, {\n        \"include\": \"#string-raw-bin-quoted-single-line\"\n      }, {\n        \"include\": \"#fstring-fnorm-quoted-multi-line\"\n      }, {\n        \"include\": \"#fstring-fnorm-quoted-single-line\"\n      }, {\n        \"include\": \"#fstring-normf-quoted-multi-line\"\n      }, {\n        \"include\": \"#fstring-normf-quoted-single-line\"\n      }, {\n        \"include\": \"#fstring-raw-quoted-multi-line\"\n      }, {\n        \"include\": \"#fstring-raw-quoted-single-line\"\n      }]\n    },\n    \"string-bin-quoted-multi-line\": {\n      \"begin\": `(\\\\b[bB])('''|\"\"\")`,\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"storage.type.string.python\"\n        },\n        \"2\": {\n          \"name\": \"punctuation.definition.string.begin.python\"\n        }\n      },\n      \"end\": \"(\\\\2)\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.string.end.python\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"string.quoted.binary.multi.python\",\n      \"patterns\": [{\n        \"include\": \"#string-entity\"\n      }]\n    },\n    \"string-bin-quoted-single-line\": {\n      \"begin\": `(\\\\b[bB])((['\"]))`,\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"storage.type.string.python\"\n        },\n        \"2\": {\n          \"name\": \"punctuation.definition.string.begin.python\"\n        }\n      },\n      \"end\": \"(\\\\2)|((?<!\\\\\\\\)\\\\n)\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.string.end.python\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"string.quoted.binary.single.python\",\n      \"patterns\": [{\n        \"include\": \"#string-entity\"\n      }]\n    },\n    \"string-brace-formatting\": {\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"name\": \"constant.character.format.placeholder.other.python\"\n          },\n          \"3\": {\n            \"name\": \"storage.type.format.python\"\n          },\n          \"4\": {\n            \"name\": \"storage.type.format.python\"\n          }\n        },\n        \"match\": `(?x)\n(\n{{ | }}\n| (?:\n{\n\\\\w* (\\\\.[[:alpha:]_]\\\\w* | \\\\[[^\\\\]'\"]+\\\\])*\n(![rsa])?\n( : \\\\w? [<>=^]? [-+ ]? \\\\#?\n\\\\d* ,? (\\\\.\\\\d+)? [bcdeEfFgGnosxX%]? )?\n})\n)\n`,\n        \"name\": \"meta.format.brace.python\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"constant.character.format.placeholder.other.python\"\n          },\n          \"3\": {\n            \"name\": \"storage.type.format.python\"\n          },\n          \"4\": {\n            \"name\": \"storage.type.format.python\"\n          }\n        },\n        \"match\": `(?x)\n(\n{\n\\\\w* (\\\\.[[:alpha:]_]\\\\w* | \\\\[[^\\\\]'\"]+\\\\])*\n(![rsa])?\n(:)\n[^'\"{}\\\\n]* (?:\n\\\\{ [^'\"}\\\\n]*? \\\\} [^'\"{}\\\\n]*\n)*\n}\n)\n`,\n        \"name\": \"meta.format.brace.python\"\n      }]\n    },\n    \"string-consume-escape\": {\n      \"match\": `\\\\\\\\['\"\\\\n\\\\\\\\]`\n    },\n    \"string-entity\": {\n      \"patterns\": [{\n        \"include\": \"#escape-sequence\"\n      }, {\n        \"include\": \"#string-line-continuation\"\n      }, {\n        \"include\": \"#string-formatting\"\n      }]\n    },\n    \"string-formatting\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"constant.character.format.placeholder.other.python\"\n        }\n      },\n      \"match\": \"(?x)\\n(\\n% (\\\\([\\\\w\\\\s]*\\\\))?\\n[-+#0 ]*\\n(\\\\d+|\\\\*)? (\\\\.(\\\\d+|\\\\*))?\\n([hlL])?\\n[diouxXeEfFgGcrsab%]\\n)\\n\",\n      \"name\": \"meta.format.percent.python\"\n    },\n    \"string-line-continuation\": {\n      \"match\": \"\\\\\\\\$\",\n      \"name\": \"constant.language.python\"\n    },\n    \"string-mojo-code-block\": {\n      \"begin\": \"^(\\\\s*\\\\`{3,})(mojo)$\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"string.quoted.single.python\"\n        },\n        \"2\": {\n          \"name\": \"string.quoted.single.python\"\n        }\n      },\n      \"contentName\": \"source.mojo\",\n      \"end\": \"^(\\\\1)$\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"string.quoted.single.python\"\n        }\n      },\n      \"name\": \"meta.embedded.block.mojo\",\n      \"patterns\": [{\n        \"include\": \"source.mojo\"\n      }]\n    },\n    \"string-multi-bad-brace1-formatting-raw\": {\n      \"begin\": `(?x)\n(?= \\\\{%\n( .*? (?!'''|\"\"\") )\n%\\\\}\n)\n`,\n      \"comment\": \"template using {% ... %}\",\n      \"end\": `(?='''|\"\"\")`,\n      \"patterns\": [{\n        \"include\": \"#string-consume-escape\"\n      }]\n    },\n    \"string-multi-bad-brace1-formatting-unicode\": {\n      \"begin\": `(?x)\n(?= \\\\{%\n( .*? (?!'''|\"\"\") )\n%\\\\}\n)\n`,\n      \"comment\": \"template using {% ... %}\",\n      \"end\": `(?='''|\"\"\")`,\n      \"patterns\": [{\n        \"include\": \"#escape-sequence-unicode\"\n      }, {\n        \"include\": \"#escape-sequence\"\n      }, {\n        \"include\": \"#string-line-continuation\"\n      }]\n    },\n    \"string-multi-bad-brace2-formatting-raw\": {\n      \"begin\": `(?x)\n(?!\\\\{\\\\{)\n(?= \\\\{ (\n\\\\w*? (?!'''|\"\"\") [^!:\\\\.\\\\[}\\\\w]\n)\n.*?(?!'''|\"\"\")\n\\\\}\n)\n`,\n      \"comment\": \"odd format or format-like syntax\",\n      \"end\": `(?='''|\"\"\")`,\n      \"patterns\": [{\n        \"include\": \"#string-consume-escape\"\n      }, {\n        \"include\": \"#string-formatting\"\n      }]\n    },\n    \"string-multi-bad-brace2-formatting-unicode\": {\n      \"begin\": `(?x)\n(?!\\\\{\\\\{)\n(?= \\\\{ (\n\\\\w*? (?!'''|\"\"\") [^!:\\\\.\\\\[}\\\\w]\n)\n.*?(?!'''|\"\"\")\n\\\\}\n)\n`,\n      \"comment\": \"odd format or format-like syntax\",\n      \"end\": `(?='''|\"\"\")`,\n      \"patterns\": [{\n        \"include\": \"#escape-sequence-unicode\"\n      }, {\n        \"include\": \"#string-entity\"\n      }]\n    },\n    \"string-quoted-multi-line\": {\n      \"begin\": `(?:\\\\b([rR])(?=[uU]))?([uU])?('''|\"\"\")`,\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"invalid.illegal.prefix.python\"\n        },\n        \"2\": {\n          \"name\": \"storage.type.string.python\"\n        },\n        \"3\": {\n          \"name\": \"punctuation.definition.string.begin.python\"\n        }\n      },\n      \"end\": \"(\\\\3)\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.string.end.python\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"string.quoted.multi.python\",\n      \"patterns\": [{\n        \"include\": \"#string-multi-bad-brace1-formatting-unicode\"\n      }, {\n        \"include\": \"#string-multi-bad-brace2-formatting-unicode\"\n      }, {\n        \"include\": \"#string-unicode-guts\"\n      }]\n    },\n    \"string-quoted-single-line\": {\n      \"begin\": `(?:\\\\b([rR])(?=[uU]))?([uU])?((['\"]))`,\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"invalid.illegal.prefix.python\"\n        },\n        \"2\": {\n          \"name\": \"storage.type.string.python\"\n        },\n        \"3\": {\n          \"name\": \"punctuation.definition.string.begin.python\"\n        }\n      },\n      \"end\": \"(\\\\3)|((?<!\\\\\\\\)\\\\n)\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.string.end.python\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"string.quoted.single.python\",\n      \"patterns\": [{\n        \"include\": \"#string-single-bad-brace1-formatting-unicode\"\n      }, {\n        \"include\": \"#string-single-bad-brace2-formatting-unicode\"\n      }, {\n        \"include\": \"#string-unicode-guts\"\n      }]\n    },\n    \"string-raw-bin-guts\": {\n      \"patterns\": [{\n        \"include\": \"#string-consume-escape\"\n      }, {\n        \"include\": \"#string-formatting\"\n      }]\n    },\n    \"string-raw-bin-quoted-multi-line\": {\n      \"begin\": `(\\\\b(?:R[bB]|[bB]R))('''|\"\"\")`,\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"storage.type.string.python\"\n        },\n        \"2\": {\n          \"name\": \"punctuation.definition.string.begin.python\"\n        }\n      },\n      \"end\": \"(\\\\2)\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.string.end.python\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"string.quoted.raw.binary.multi.python\",\n      \"patterns\": [{\n        \"include\": \"#string-raw-bin-guts\"\n      }]\n    },\n    \"string-raw-bin-quoted-single-line\": {\n      \"begin\": `(\\\\b(?:R[bB]|[bB]R))((['\"]))`,\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"storage.type.string.python\"\n        },\n        \"2\": {\n          \"name\": \"punctuation.definition.string.begin.python\"\n        }\n      },\n      \"end\": \"(\\\\2)|((?<!\\\\\\\\)\\\\n)\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.string.end.python\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"string.quoted.raw.binary.single.python\",\n      \"patterns\": [{\n        \"include\": \"#string-raw-bin-guts\"\n      }]\n    },\n    \"string-raw-guts\": {\n      \"patterns\": [{\n        \"include\": \"#string-consume-escape\"\n      }, {\n        \"include\": \"#string-formatting\"\n      }, {\n        \"include\": \"#string-brace-formatting\"\n      }]\n    },\n    \"string-raw-quoted-multi-line\": {\n      \"begin\": `\\\\b(([uU]R)|(R))('''|\"\"\")`,\n      \"beginCaptures\": {\n        \"2\": {\n          \"name\": \"invalid.deprecated.prefix.python\"\n        },\n        \"3\": {\n          \"name\": \"storage.type.string.python\"\n        },\n        \"4\": {\n          \"name\": \"punctuation.definition.string.begin.python\"\n        }\n      },\n      \"end\": \"(\\\\4)\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.string.end.python\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"string.quoted.raw.multi.python\",\n      \"patterns\": [{\n        \"include\": \"#string-multi-bad-brace1-formatting-raw\"\n      }, {\n        \"include\": \"#string-multi-bad-brace2-formatting-raw\"\n      }, {\n        \"include\": \"#string-raw-guts\"\n      }]\n    },\n    \"string-raw-quoted-single-line\": {\n      \"begin\": `\\\\b(([uU]R)|(R))((['\"]))`,\n      \"beginCaptures\": {\n        \"2\": {\n          \"name\": \"invalid.deprecated.prefix.python\"\n        },\n        \"3\": {\n          \"name\": \"storage.type.string.python\"\n        },\n        \"4\": {\n          \"name\": \"punctuation.definition.string.begin.python\"\n        }\n      },\n      \"end\": \"(\\\\4)|((?<!\\\\\\\\)\\\\n)\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.string.end.python\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"string.quoted.raw.single.python\",\n      \"patterns\": [{\n        \"include\": \"#string-single-bad-brace1-formatting-raw\"\n      }, {\n        \"include\": \"#string-single-bad-brace2-formatting-raw\"\n      }, {\n        \"include\": \"#string-raw-guts\"\n      }]\n    },\n    \"string-single-bad-brace1-formatting-raw\": {\n      \"begin\": `(?x)\n(?= \\\\{%\n( .*? (?!(['\"])|((?<!\\\\\\\\)\\\\n)) )\n%\\\\}\n)\n`,\n      \"comment\": \"template using {% ... %}\",\n      \"end\": `(?=(['\"])|((?<!\\\\\\\\)\\\\n))`,\n      \"patterns\": [{\n        \"include\": \"#string-consume-escape\"\n      }]\n    },\n    \"string-single-bad-brace1-formatting-unicode\": {\n      \"begin\": `(?x)\n(?= \\\\{%\n( .*? (?!(['\"])|((?<!\\\\\\\\)\\\\n)) )\n%\\\\}\n)\n`,\n      \"comment\": \"template using {% ... %}\",\n      \"end\": `(?=(['\"])|((?<!\\\\\\\\)\\\\n))`,\n      \"patterns\": [{\n        \"include\": \"#escape-sequence-unicode\"\n      }, {\n        \"include\": \"#escape-sequence\"\n      }, {\n        \"include\": \"#string-line-continuation\"\n      }]\n    },\n    \"string-single-bad-brace2-formatting-raw\": {\n      \"begin\": `(?x)\n(?!\\\\{\\\\{)\n(?= \\\\{ (\n\\\\w*? (?!(['\"])|((?<!\\\\\\\\)\\\\n)) [^!:\\\\.\\\\[}\\\\w]\n)\n.*?(?!(['\"])|((?<!\\\\\\\\)\\\\n))\n\\\\}\n)\n`,\n      \"comment\": \"odd format or format-like syntax\",\n      \"end\": `(?=(['\"])|((?<!\\\\\\\\)\\\\n))`,\n      \"patterns\": [{\n        \"include\": \"#string-consume-escape\"\n      }, {\n        \"include\": \"#string-formatting\"\n      }]\n    },\n    \"string-single-bad-brace2-formatting-unicode\": {\n      \"begin\": `(?x)\n(?!\\\\{\\\\{)\n(?= \\\\{ (\n\\\\w*? (?!(['\"])|((?<!\\\\\\\\)\\\\n)) [^!:\\\\.\\\\[}\\\\w]\n)\n.*?(?!(['\"])|((?<!\\\\\\\\)\\\\n))\n\\\\}\n)\n`,\n      \"comment\": \"odd format or format-like syntax\",\n      \"end\": `(?=(['\"])|((?<!\\\\\\\\)\\\\n))`,\n      \"patterns\": [{\n        \"include\": \"#escape-sequence-unicode\"\n      }, {\n        \"include\": \"#string-entity\"\n      }]\n    },\n    \"string-unicode-guts\": {\n      \"patterns\": [{\n        \"include\": \"#string-mojo-code-block\"\n      }, {\n        \"include\": \"#escape-sequence-unicode\"\n      }, {\n        \"include\": \"#string-entity\"\n      }, {\n        \"include\": \"#string-brace-formatting\"\n      }]\n    }\n  },\n  \"scopeName\": \"source.mojo\"\n});\nvar mojo = [lang];\nexport { mojo as default };"],
  "mappings": "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",
  "names": []
}
