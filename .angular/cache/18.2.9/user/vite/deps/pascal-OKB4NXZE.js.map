{
  "version": 3,
  "sources": ["../../../../../../node_modules/shiki/dist/langs/pascal.mjs"],
  "sourcesContent": ["const lang = Object.freeze({\n  \"displayName\": \"Pascal\",\n  \"fileTypes\": [\"pas\", \"p\", \"pp\", \"dfm\", \"fmx\", \"dpr\", \"dpk\", \"lfm\", \"lpr\"],\n  \"name\": \"pascal\",\n  \"patterns\": [{\n    \"match\": \"\\\\b(?i:(absolute|abstract|add|all|and_then|array|as|asc|asm|assembler|async|attribute|autoreleasepool|await|begin|bindable|block|by|case|cdecl|class|concat|const|constref|copy|cppdecl|contains|default|delegate|deprecated|desc|distinct|div|each|else|empty|end|ensure|enum|equals|event|except|export|exports|extension|external|far|file|finalization|finalizer|finally|flags|forward|from|future|generic|goto|group|has|helper|if|implements|implies|import|in|index|inherited|initialization|inline|interrupt|into|invariants|is|iterator|label|library|join|lazy|lifetimestrategy|locked|locking|loop|mapped|matching|message|method|mod|module|name|namespace|near|nested|new|nostackframe|not|notify|nullable|object|of|old|oldfpccall|on|only|operator|optional|or_else|order|otherwise|out|override|package|packed|parallel|params|partial|pascal|pinned|platform|pow|private|program|protected|public|published|interface|implementation|qualified|queryable|raises|read|readonly|record|reference|register|remove|resident|require|requires|resourcestring|restricted|result|reverse|safecall|sealed|segment|select|selector|sequence|set|shl|shr|skip|specialize|soft|static|stored|stdcall|step|strict|strong|take|then|threadvar|to|try|tuple|type|unconstrained|unit|unmanaged|unretained|unsafe|uses|using|var|view|virtual|volatile|weak|dynamic|overload|reintroduce|where|with|write|xor|yield))\\\\b\",\n    \"name\": \"keyword.pascal\"\n  }, {\n    \"captures\": {\n      \"1\": {\n        \"name\": \"storage.type.prototype.pascal\"\n      },\n      \"2\": {\n        \"name\": \"entity.name.function.prototype.pascal\"\n      }\n    },\n    \"match\": \"\\\\b(?i:(function|procedure|constructor|destructor))\\\\b\\\\s+(\\\\w+(\\\\.\\\\w+)?)(\\\\(.*?\\\\))?;\\\\s*(?=(?i:attribute|forward|external))\",\n    \"name\": \"meta.function.prototype.pascal\"\n  }, {\n    \"captures\": {\n      \"1\": {\n        \"name\": \"storage.type.function.pascal\"\n      },\n      \"2\": {\n        \"name\": \"entity.name.function.pascal\"\n      }\n    },\n    \"match\": \"\\\\b(?i:(function|procedure|constructor|destructor|property|read|write))\\\\b\\\\s+(\\\\w+(\\\\.\\\\w+)?)\",\n    \"name\": \"meta.function.pascal\"\n  }, {\n    \"match\": \"\\\\b(?i:(self|result))\\\\b\",\n    \"name\": \"token.variable\"\n  }, {\n    \"match\": \"\\\\b(?i:(and|or))\\\\b\",\n    \"name\": \"keyword.operator.pascal\"\n  }, {\n    \"match\": \"\\\\b(?i:(break|continue|exit|abort|while|do|downto|for|raise|repeat|until))\\\\b\",\n    \"name\": \"keyword.control.pascal\"\n  }, {\n    \"begin\": \"\\\\{\\\\$\",\n    \"captures\": {\n      \"0\": {\n        \"name\": \"string.regexp\"\n      }\n    },\n    \"end\": \"\\\\}\",\n    \"name\": \"string.regexp\"\n  }, {\n    \"match\": \"\\\\b(?i:(ansichar|ansistring|boolean|byte|cardinal|char|comp|currency|double|dword|extended|file|integer|int8|int16|int32|int64|longint|longword|nativeint|nativeuint|olevariant|pansichar|pchar|pwidechar|pointer|real|shortint|shortstring|single|smallint|string|uint8|uint16|uint32|uint64|variant|widechar|widestring|word|wordbool|uintptr|intptr))\\\\b\",\n    \"name\": \"storage.support.type.pascal\"\n  }, {\n    \"match\": \"\\\\b(\\\\d+)|(\\\\d*\\\\.\\\\d+([eE][\\\\-+]?\\\\d+)?)\\\\b\",\n    \"name\": \"constant.numeric.pascal\"\n  }, {\n    \"match\": \"\\\\$[0-9a-fA-F]{1,16}\\\\b\",\n    \"name\": \"constant.numeric.hex.pascal\"\n  }, {\n    \"match\": \"\\\\b(?i:(true|false|nil))\\\\b\",\n    \"name\": \"constant.language.pascal\"\n  }, {\n    \"match\": \"\\\\b(?i:(Assert))\\\\b\",\n    \"name\": \"keyword.control\"\n  }, {\n    \"begin\": \"(^[ \\\\t]+)?(?=//)\",\n    \"beginCaptures\": {\n      \"1\": {\n        \"name\": \"punctuation.whitespace.comment.leading.pascal\"\n      }\n    },\n    \"end\": \"(?!\\\\G)\",\n    \"patterns\": [{\n      \"begin\": \"//\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.comment.pascal\"\n        }\n      },\n      \"end\": \"\\\\n\",\n      \"name\": \"comment.line.double-slash.pascal.two\"\n    }]\n  }, {\n    \"begin\": \"\\\\(\\\\*\",\n    \"captures\": {\n      \"0\": {\n        \"name\": \"punctuation.definition.comment.pascal\"\n      }\n    },\n    \"end\": \"\\\\*\\\\)\",\n    \"name\": \"comment.block.pascal.one\"\n  }, {\n    \"begin\": \"\\\\{(?!\\\\$)\",\n    \"captures\": {\n      \"0\": {\n        \"name\": \"punctuation.definition.comment.pascal\"\n      }\n    },\n    \"end\": \"\\\\}\",\n    \"name\": \"comment.block.pascal.two\"\n  }, {\n    \"begin\": \"'\",\n    \"beginCaptures\": {\n      \"0\": {\n        \"name\": \"punctuation.definition.string.begin.pascal\"\n      }\n    },\n    \"end\": \"'\",\n    \"endCaptures\": {\n      \"0\": {\n        \"name\": \"punctuation.definition.string.end.pascal\"\n      }\n    },\n    \"name\": \"string.quoted.single.pascal\",\n    \"patterns\": [{\n      \"match\": \"''\",\n      \"name\": \"constant.character.escape.apostrophe.pascal\"\n    }]\n  }, {\n    \"match\": \"\\\\#\\\\d+\",\n    \"name\": \"string.other.pascal\"\n  }],\n  \"scopeName\": \"source.pascal\"\n});\nvar pascal = [lang];\nexport { pascal as default };"],
  "mappings": ";;;AAAA,IAAM,OAAO,OAAO,OAAO;AAAA,EACzB,eAAe;AAAA,EACf,aAAa,CAAC,OAAO,KAAK,MAAM,OAAO,OAAO,OAAO,OAAO,OAAO,KAAK;AAAA,EACxE,QAAQ;AAAA,EACR,YAAY,CAAC;AAAA,IACX,SAAS;AAAA,IACT,QAAQ;AAAA,EACV,GAAG;AAAA,IACD,YAAY;AAAA,MACV,KAAK;AAAA,QACH,QAAQ;AAAA,MACV;AAAA,MACA,KAAK;AAAA,QACH,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,SAAS;AAAA,IACT,QAAQ;AAAA,EACV,GAAG;AAAA,IACD,YAAY;AAAA,MACV,KAAK;AAAA,QACH,QAAQ;AAAA,MACV;AAAA,MACA,KAAK;AAAA,QACH,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,SAAS;AAAA,IACT,QAAQ;AAAA,EACV,GAAG;AAAA,IACD,SAAS;AAAA,IACT,QAAQ;AAAA,EACV,GAAG;AAAA,IACD,SAAS;AAAA,IACT,QAAQ;AAAA,EACV,GAAG;AAAA,IACD,SAAS;AAAA,IACT,QAAQ;AAAA,EACV,GAAG;AAAA,IACD,SAAS;AAAA,IACT,YAAY;AAAA,MACV,KAAK;AAAA,QACH,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,OAAO;AAAA,IACP,QAAQ;AAAA,EACV,GAAG;AAAA,IACD,SAAS;AAAA,IACT,QAAQ;AAAA,EACV,GAAG;AAAA,IACD,SAAS;AAAA,IACT,QAAQ;AAAA,EACV,GAAG;AAAA,IACD,SAAS;AAAA,IACT,QAAQ;AAAA,EACV,GAAG;AAAA,IACD,SAAS;AAAA,IACT,QAAQ;AAAA,EACV,GAAG;AAAA,IACD,SAAS;AAAA,IACT,QAAQ;AAAA,EACV,GAAG;AAAA,IACD,SAAS;AAAA,IACT,iBAAiB;AAAA,MACf,KAAK;AAAA,QACH,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,OAAO;AAAA,IACP,YAAY,CAAC;AAAA,MACX,SAAS;AAAA,MACT,iBAAiB;AAAA,QACf,KAAK;AAAA,UACH,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,MACA,OAAO;AAAA,MACP,QAAQ;AAAA,IACV,CAAC;AAAA,EACH,GAAG;AAAA,IACD,SAAS;AAAA,IACT,YAAY;AAAA,MACV,KAAK;AAAA,QACH,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,OAAO;AAAA,IACP,QAAQ;AAAA,EACV,GAAG;AAAA,IACD,SAAS;AAAA,IACT,YAAY;AAAA,MACV,KAAK;AAAA,QACH,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,OAAO;AAAA,IACP,QAAQ;AAAA,EACV,GAAG;AAAA,IACD,SAAS;AAAA,IACT,iBAAiB;AAAA,MACf,KAAK;AAAA,QACH,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,OAAO;AAAA,IACP,eAAe;AAAA,MACb,KAAK;AAAA,QACH,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,IACA,QAAQ;AAAA,IACR,YAAY,CAAC;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,IACV,CAAC;AAAA,EACH,GAAG;AAAA,IACD,SAAS;AAAA,IACT,QAAQ;AAAA,EACV,CAAC;AAAA,EACD,aAAa;AACf,CAAC;AACD,IAAI,SAAS,CAAC,IAAI;",
  "names": []
}
