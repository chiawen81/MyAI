{
  "version": 3,
  "sources": ["../../../../../../node_modules/shiki/dist/langs/regexp.mjs"],
  "sourcesContent": ["const lang = Object.freeze({\n  \"displayName\": \"RegExp\",\n  \"fileTypes\": [\"re\"],\n  \"name\": \"regexp\",\n  \"patterns\": [{\n    \"include\": \"#regexp-expression\"\n  }],\n  \"repository\": {\n    \"codetags\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"keyword.codetag.notation.python\"\n        }\n      },\n      \"match\": \"(?:\\\\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\\\\b)\"\n    },\n    \"fregexp-base-expression\": {\n      \"patterns\": [{\n        \"include\": \"#fregexp-quantifier\"\n      }, {\n        \"include\": \"#fstring-formatting-braces\"\n      }, {\n        \"match\": \"\\\\{.*?\\\\}\"\n      }, {\n        \"include\": \"#regexp-base-common\"\n      }]\n    },\n    \"fregexp-quantifier\": {\n      \"match\": \"(?x)\\n\\\\{\\\\{(\\n\\\\d+ | \\\\d+,(\\\\d+)? | ,\\\\d+\\n)\\\\}\\\\}\\n\",\n      \"name\": \"keyword.operator.quantifier.regexp\"\n    },\n    \"fstring-formatting-braces\": {\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"name\": \"constant.character.format.placeholder.other.python\"\n          },\n          \"2\": {\n            \"name\": \"invalid.illegal.brace.python\"\n          },\n          \"3\": {\n            \"name\": \"constant.character.format.placeholder.other.python\"\n          }\n        },\n        \"comment\": \"empty braces are illegal\",\n        \"match\": \"({)(\\\\s*?)(})\"\n      }, {\n        \"match\": \"({{|}})\",\n        \"name\": \"constant.character.escape.python\"\n      }]\n    },\n    \"regexp-backreference\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.begin.regexp\"\n        },\n        \"2\": {\n          \"name\": \"entity.name.tag.named.backreference.regexp\"\n        },\n        \"3\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.backreference.named.end.regexp\"\n        }\n      },\n      \"match\": \"(?x)\\n(\\\\()  (\\\\?P= \\\\w+(?:\\\\s+[[:alnum:]]+)?)  (\\\\))\\n\",\n      \"name\": \"meta.backreference.named.regexp\"\n    },\n    \"regexp-backreference-number\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"entity.name.tag.backreference.regexp\"\n        }\n      },\n      \"match\": \"(\\\\\\\\[1-9]\\\\d?)\",\n      \"name\": \"meta.backreference.regexp\"\n    },\n    \"regexp-base-common\": {\n      \"patterns\": [{\n        \"match\": \"\\\\.\",\n        \"name\": \"support.other.match.any.regexp\"\n      }, {\n        \"match\": \"\\\\^\",\n        \"name\": \"support.other.match.begin.regexp\"\n      }, {\n        \"match\": \"\\\\$\",\n        \"name\": \"support.other.match.end.regexp\"\n      }, {\n        \"match\": \"[+*?]\\\\??\",\n        \"name\": \"keyword.operator.quantifier.regexp\"\n      }, {\n        \"match\": \"\\\\|\",\n        \"name\": \"keyword.operator.disjunction.regexp\"\n      }, {\n        \"include\": \"#regexp-escape-sequence\"\n      }]\n    },\n    \"regexp-base-expression\": {\n      \"patterns\": [{\n        \"include\": \"#regexp-quantifier\"\n      }, {\n        \"include\": \"#regexp-base-common\"\n      }]\n    },\n    \"regexp-character-set\": {\n      \"patterns\": [{\n        \"match\": \"(?x)\\n\\\\[ \\\\^? \\\\] (?! .*?\\\\])\\n\"\n      }, {\n        \"begin\": \"(\\\\[)(\\\\^)?(\\\\])?\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.character.set.begin.regexp constant.other.set.regexp\"\n          },\n          \"2\": {\n            \"name\": \"keyword.operator.negation.regexp\"\n          },\n          \"3\": {\n            \"name\": \"constant.character.set.regexp\"\n          }\n        },\n        \"end\": \"(\\\\])\",\n        \"endCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.character.set.end.regexp constant.other.set.regexp\"\n          },\n          \"2\": {\n            \"name\": \"invalid.illegal.newline.python\"\n          }\n        },\n        \"name\": \"meta.character.set.regexp\",\n        \"patterns\": [{\n          \"include\": \"#regexp-charecter-set-escapes\"\n        }, {\n          \"match\": \"[^\\\\n]\",\n          \"name\": \"constant.character.set.regexp\"\n        }]\n      }]\n    },\n    \"regexp-charecter-set-escapes\": {\n      \"patterns\": [{\n        \"match\": \"\\\\\\\\[abfnrtv\\\\\\\\]\",\n        \"name\": \"constant.character.escape.regexp\"\n      }, {\n        \"include\": \"#regexp-escape-special\"\n      }, {\n        \"match\": \"\\\\\\\\([0-7]{1,3})\",\n        \"name\": \"constant.character.escape.regexp\"\n      }, {\n        \"include\": \"#regexp-escape-character\"\n      }, {\n        \"include\": \"#regexp-escape-unicode\"\n      }, {\n        \"include\": \"#regexp-escape-catchall\"\n      }]\n    },\n    \"regexp-comments\": {\n      \"begin\": \"\\\\(\\\\?#\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.comment.begin.regexp\"\n        }\n      },\n      \"end\": \"(\\\\))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.comment.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"comment.regexp\",\n      \"patterns\": [{\n        \"include\": \"#codetags\"\n      }]\n    },\n    \"regexp-conditional\": {\n      \"begin\": \"(\\\\()\\\\?\\\\((\\\\w+(?:\\\\s+[[:alnum:]]+)?|\\\\d+)\\\\)\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.conditional.regexp\"\n        },\n        \"1\": {\n          \"name\": \"punctuation.parenthesis.conditional.begin.regexp\"\n        }\n      },\n      \"end\": \"(\\\\))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.conditional.negative.regexp punctuation.parenthesis.conditional.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#regexp-expression\"\n      }]\n    },\n    \"regexp-escape-catchall\": {\n      \"match\": \"\\\\\\\\(.|\\\\n)\",\n      \"name\": \"constant.character.escape.regexp\"\n    },\n    \"regexp-escape-character\": {\n      \"match\": \"(?x)\\n\\\\\\\\ (\\nx[0-9A-Fa-f]{2}\\n| 0[0-7]{1,2}\\n| [0-7]{3}\\n)\\n\",\n      \"name\": \"constant.character.escape.regexp\"\n    },\n    \"regexp-escape-sequence\": {\n      \"patterns\": [{\n        \"include\": \"#regexp-escape-special\"\n      }, {\n        \"include\": \"#regexp-escape-character\"\n      }, {\n        \"include\": \"#regexp-escape-unicode\"\n      }, {\n        \"include\": \"#regexp-backreference-number\"\n      }, {\n        \"include\": \"#regexp-escape-catchall\"\n      }]\n    },\n    \"regexp-escape-special\": {\n      \"match\": \"\\\\\\\\([AbBdDsSwWZ])\",\n      \"name\": \"support.other.escape.special.regexp\"\n    },\n    \"regexp-escape-unicode\": {\n      \"match\": \"(?x)\\n\\\\\\\\ (\\nu[0-9A-Fa-f]{4}\\n| U[0-9A-Fa-f]{8}\\n)\\n\",\n      \"name\": \"constant.character.unicode.regexp\"\n    },\n    \"regexp-expression\": {\n      \"patterns\": [{\n        \"include\": \"#regexp-base-expression\"\n      }, {\n        \"include\": \"#regexp-character-set\"\n      }, {\n        \"include\": \"#regexp-comments\"\n      }, {\n        \"include\": \"#regexp-flags\"\n      }, {\n        \"include\": \"#regexp-named-group\"\n      }, {\n        \"include\": \"#regexp-backreference\"\n      }, {\n        \"include\": \"#regexp-lookahead\"\n      }, {\n        \"include\": \"#regexp-lookahead-negative\"\n      }, {\n        \"include\": \"#regexp-lookbehind\"\n      }, {\n        \"include\": \"#regexp-lookbehind-negative\"\n      }, {\n        \"include\": \"#regexp-conditional\"\n      }, {\n        \"include\": \"#regexp-parentheses-non-capturing\"\n      }, {\n        \"include\": \"#regexp-parentheses\"\n      }]\n    },\n    \"regexp-flags\": {\n      \"match\": \"\\\\(\\\\?[aiLmsux]+\\\\)\",\n      \"name\": \"storage.modifier.flag.regexp\"\n    },\n    \"regexp-lookahead\": {\n      \"begin\": \"(\\\\()\\\\?=\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.lookahead.regexp\"\n        },\n        \"1\": {\n          \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\n        }\n      },\n      \"end\": \"(\\\\))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.lookahead.regexp punctuation.parenthesis.lookahead.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#regexp-expression\"\n      }]\n    },\n    \"regexp-lookahead-negative\": {\n      \"begin\": \"(\\\\()\\\\?!\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.lookahead.negative.regexp\"\n        },\n        \"1\": {\n          \"name\": \"punctuation.parenthesis.lookahead.begin.regexp\"\n        }\n      },\n      \"end\": \"(\\\\))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.lookahead.negative.regexp punctuation.parenthesis.lookahead.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#regexp-expression\"\n      }]\n    },\n    \"regexp-lookbehind\": {\n      \"begin\": \"(\\\\()\\\\?<=\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.lookbehind.regexp\"\n        },\n        \"1\": {\n          \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\n        }\n      },\n      \"end\": \"(\\\\))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.lookbehind.regexp punctuation.parenthesis.lookbehind.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#regexp-expression\"\n      }]\n    },\n    \"regexp-lookbehind-negative\": {\n      \"begin\": \"(\\\\()\\\\?<!\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.lookbehind.negative.regexp\"\n        },\n        \"1\": {\n          \"name\": \"punctuation.parenthesis.lookbehind.begin.regexp\"\n        }\n      },\n      \"end\": \"(\\\\))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.lookbehind.negative.regexp punctuation.parenthesis.lookbehind.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#regexp-expression\"\n      }]\n    },\n    \"regexp-named-group\": {\n      \"begin\": \"(?x)\\n(\\\\()  (\\\\?P <\\\\w+(?:\\\\s+[[:alnum:]]+)?>)\\n\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.begin.regexp\"\n        },\n        \"2\": {\n          \"name\": \"entity.name.tag.named.group.regexp\"\n        }\n      },\n      \"end\": \"(\\\\))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.named.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"name\": \"meta.named.regexp\",\n      \"patterns\": [{\n        \"include\": \"#regexp-expression\"\n      }]\n    },\n    \"regexp-parentheses\": {\n      \"begin\": \"\\\\(\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.begin.regexp\"\n        }\n      },\n      \"end\": \"(\\\\))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#regexp-expression\"\n      }]\n    },\n    \"regexp-parentheses-non-capturing\": {\n      \"begin\": \"\\\\(\\\\?:\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.begin.regexp\"\n        }\n      },\n      \"end\": \"(\\\\))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"support.other.parenthesis.regexp punctuation.parenthesis.non-capturing.end.regexp\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.python\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#regexp-expression\"\n      }]\n    },\n    \"regexp-quantifier\": {\n      \"match\": \"(?x)\\n\\\\{(\\n\\\\d+ | \\\\d+,(\\\\d+)? | ,\\\\d+\\n)\\\\}\\n\",\n      \"name\": \"keyword.operator.quantifier.regexp\"\n    }\n  },\n  \"scopeName\": \"source.regexp.python\",\n  \"aliases\": [\"regex\"]\n});\nvar regexp = [lang];\nexport { regexp as default };"],
  "mappings": "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",
  "names": []
}
