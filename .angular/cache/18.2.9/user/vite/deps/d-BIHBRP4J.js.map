{
  "version": 3,
  "sources": ["../../../../../../node_modules/shiki/dist/langs/d.mjs"],
  "sourcesContent": ["const lang = Object.freeze({\n  \"displayName\": \"D\",\n  \"fileTypes\": [\"d\", \"di\", \"dpp\"],\n  \"name\": \"d\",\n  \"patterns\": [{\n    \"include\": \"#comment\"\n  }, {\n    \"include\": \"#type\"\n  }, {\n    \"include\": \"#statement\"\n  }, {\n    \"include\": \"#expression\"\n  }],\n  \"repository\": {\n    \"aggregate-declaration\": {\n      \"patterns\": [{\n        \"include\": \"#class-declaration\"\n      }, {\n        \"include\": \"#interface-declaration\"\n      }, {\n        \"include\": \"#struct-declaration\"\n      }, {\n        \"include\": \"#union-declaration\"\n      }, {\n        \"include\": \"#mixin-template-declaration\"\n      }, {\n        \"include\": \"#template-declaration\"\n      }]\n    },\n    \"alias-declaration\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\b(alias)\\\\b\\\\s*\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.other.alias.d\"\n          }\n        },\n        \"end\": \";\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"meta.alias.end.d\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#type\"\n        }, {\n          \"match\": \"=(?![=>])\",\n          \"name\": \"keyword.operator.equal.alias.d\"\n        }, {\n          \"include\": \"#expression\"\n        }]\n      }]\n    },\n    \"align-attribute\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\balign\\\\s*\\\\(\",\n        \"end\": \"\\\\)\",\n        \"name\": \"storage.modifier.align-attribute.d\",\n        \"patterns\": [{\n          \"include\": \"#integer-literal\"\n        }]\n      }, {\n        \"match\": \"\\\\balign\\\\b\\\\s*(?!\\\\()\",\n        \"name\": \"storage.modifier.align-attribute.d\"\n      }]\n    },\n    \"alternate-wysiwyg-string\": {\n      \"patterns\": [{\n        \"begin\": \"`\",\n        \"end\": \"`[cwd]?\",\n        \"name\": \"string.alternate-wysiwyg-string.d\",\n        \"patterns\": [{\n          \"include\": \"#wysiwyg-characters\"\n        }]\n      }]\n    },\n    \"arbitrary-delimited-string\": {\n      \"begin\": 'q\"(\\\\w+)',\n      \"end\": '\\\\1\"',\n      \"name\": \"string.delimited.d\",\n      \"patterns\": [{\n        \"match\": \".\",\n        \"name\": \"string.delimited.d\"\n      }]\n    },\n    \"arithmetic-expression\": {\n      \"patterns\": [{\n        \"match\": \"\\\\^\\\\^|\\\\+\\\\+|--|(?<!/)\\\\+(?!/)|-|~|(?<!/)\\\\*(?!/)|(?<![+*/])/(?![+*/])|%\",\n        \"name\": \"keyword.operator.numeric.d\"\n      }]\n    },\n    \"asm-instruction\": {\n      \"patterns\": [{\n        \"include\": \"#comment\"\n      }, {\n        \"match\": \"\\\\b(align|even|naked|db|ds|di|dl|df|dd|de)\\\\b|:\",\n        \"name\": \"keyword.asm-instruction.d\"\n      }, {\n        \"match\": \"\\\\b__LOCAL_SIZE\\\\b\",\n        \"name\": \"constant.language.assembly.d\"\n      }, {\n        \"match\": \"\\\\b(offsetof|seg)\\\\b\",\n        \"name\": \"support.type.assembly.d\"\n      }, {\n        \"include\": \"#asm-type-prefix\"\n      }, {\n        \"include\": \"#asm-primary-expression\"\n      }, {\n        \"include\": \"#operands\"\n      }, {\n        \"include\": \"#register\"\n      }, {\n        \"include\": \"#register-64\"\n      }, {\n        \"include\": \"#float-literal\"\n      }, {\n        \"include\": \"#integer-literal\"\n      }, {\n        \"include\": \"#identifier\"\n      }]\n    },\n    \"asm-statement\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\b(asm)\\\\b\\\\s*(?=\\\\{)\",\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.control.switch.d\"\n          }\n        },\n        \"end\": \"(?<=\\\\})\",\n        \"patterns\": [{\n          \"begin\": \"\\\\{\",\n          \"beginCaptures\": {\n            \"0\": {\n              \"name\": \"keyword.control.asm.begin.d\"\n            }\n          },\n          \"contentName\": \"gfm.markup.raw.assembly.d\",\n          \"end\": \"\\\\}\",\n          \"endCaptures\": {\n            \"0\": {\n              \"name\": \"keyword.control.asm.end.d\"\n            }\n          },\n          \"patterns\": [{\n            \"include\": \"#asm-instruction\"\n          }]\n        }]\n      }]\n    },\n    \"asm-type-prefix\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b((near\\\\s+ptr)|(far\\\\s+ptr)|(byte\\\\s+ptr)|(short\\\\s+ptr)|(int\\\\s+ptr)|(word\\\\s+ptr)|(dword\\\\s+ptr)|(qword\\\\s+ptr)|(float\\\\s+ptr)|(double\\\\s+ptr)|(real\\\\s+ptr))\\\\b\",\n        \"name\": \"support.type.asm-type-prefix.d\"\n      }]\n    },\n    \"assert-expression\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\bassert\\\\s*\\\\(\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.other.assert.begin.d\"\n          }\n        },\n        \"end\": \"\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.other.assert.end.d\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#comment\"\n        }, {\n          \"include\": \"#expression\"\n        }, {\n          \"include\": \"#comma\"\n        }]\n      }]\n    },\n    \"assign-expression\": {\n      \"patterns\": [{\n        \"match\": \">>>=|\\\\^\\\\^=|>>=|<<=|~=|\\\\^=|\\\\|=|&=|%=|/=|\\\\*=|-=|\\\\+=|=(?!>)\",\n        \"name\": \"keyword.operator.assign.d\"\n      }]\n    },\n    \"attribute\": {\n      \"patterns\": [{\n        \"include\": \"#linkage-attribute\"\n      }, {\n        \"include\": \"#align-attribute\"\n      }, {\n        \"include\": \"#deprecated-attribute\"\n      }, {\n        \"include\": \"#protection-attribute\"\n      }, {\n        \"include\": \"#pragma\"\n      }, {\n        \"match\": \"\\\\b(static|extern|abstract|final|override|synchronized|auto|scope|const|immutable|inout|shared|__gshared|nothrow|pure|ref)\\\\b\",\n        \"name\": \"entity.other.attribute-name.d\"\n      }, {\n        \"include\": \"#property\"\n      }]\n    },\n    \"base-type\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b(auto|bool|byte|ubyte|short|ushort|int|uint|long|ulong|char|wchar|dchar|float|double|real|ifloat|idouble|ireal|cfloat|cdouble|creal|void|noreturn)\\\\b\",\n        \"name\": \"storage.type.basic-type.d\"\n      }, {\n        \"match\": \"\\\\b(string|wstring|dstring|size_t|ptrdiff_t)\\\\b(?!\\\\s*=)\",\n        \"name\": \"storage.type.basic-type.d\"\n      }]\n    },\n    \"binary-integer\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b(0b|0B)[0-1_]+(Lu|LU|uL|UL|L|u|U)?\\\\b\",\n        \"name\": \"constant.numeric.integer.binary.d\"\n      }]\n    },\n    \"bitwise-expression\": {\n      \"patterns\": [{\n        \"match\": \"\\\\||\\\\^|&\",\n        \"name\": \"keyword.operator.bitwise.d\"\n      }]\n    },\n    \"block-comment\": {\n      \"patterns\": [{\n        \"begin\": \"/((?!\\\\*/)\\\\*)+\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"comment.block.begin.d\"\n          }\n        },\n        \"end\": \"\\\\*+/\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"comment.block.end.d\"\n          }\n        },\n        \"name\": \"comment.block.content.d\"\n      }]\n    },\n    \"break-statement\": {\n      \"patterns\": [{\n        \"match\": \"\\\\bbreak\\\\b\",\n        \"name\": \"keyword.control.break.d\"\n      }]\n    },\n    \"case-statement\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\b(case)\\\\b\\\\s*\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.control.case.range.d\"\n          }\n        },\n        \"end\": \":\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"meta.case.end.d\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#comment\"\n        }, {\n          \"include\": \"#expression\"\n        }, {\n          \"include\": \"#comma\"\n        }]\n      }]\n    },\n    \"cast-expression\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\b(cast)\\\\s*(\\\\()\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.operator.cast.d\"\n          },\n          \"2\": {\n            \"name\": \"keyword.operator.cast.begin.d\"\n          }\n        },\n        \"end\": \"\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.operator.cast.end.d\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#type\"\n        }, {\n          \"include\": \"#extended-type\"\n        }]\n      }]\n    },\n    \"catch\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\b(catch)\\\\b\\\\s*(?=\\\\()\",\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.control.catch.d\"\n          }\n        },\n        \"end\": \"(?<=\\\\))\",\n        \"patterns\": [{\n          \"begin\": \"\\\\(\",\n          \"end\": \"\\\\)\",\n          \"patterns\": [{\n            \"include\": \"source.d\"\n          }]\n        }]\n      }]\n    },\n    \"catches\": {\n      \"patterns\": [{\n        \"include\": \"#catch\"\n      }]\n    },\n    \"character\": {\n      \"patterns\": [{\n        \"match\": \"[\\\\w\\\\s]+\",\n        \"name\": \"string.character.d\"\n      }]\n    },\n    \"character-literal\": {\n      \"patterns\": [{\n        \"begin\": \"'\",\n        \"end\": \"'\",\n        \"name\": \"string.character-literal.d\",\n        \"patterns\": [{\n          \"include\": \"#character\"\n        }, {\n          \"include\": \"#escape-sequence\"\n        }]\n      }]\n    },\n    \"class-declaration\": {\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"name\": \"storage.type.class.d\"\n          },\n          \"2\": {\n            \"name\": \"entity.name.class.d\"\n          }\n        },\n        \"match\": \"\\\\b(class)(?:\\\\s+([A-Za-z_][\\\\w_\\\\d]*))?\\\\b\"\n      }, {\n        \"include\": \"#protection-attribute\"\n      }, {\n        \"include\": \"#class-members\"\n      }]\n    },\n    \"class-members\": {\n      \"patterns\": [{\n        \"include\": \"#shared-static-constructor\"\n      }, {\n        \"include\": \"#shared-static-destructor\"\n      }, {\n        \"include\": \"#constructor\"\n      }, {\n        \"include\": \"#destructor\"\n      }, {\n        \"include\": \"#postblit\"\n      }, {\n        \"include\": \"#invariant\"\n      }, {\n        \"include\": \"#member-function-attribute\"\n      }]\n    },\n    \"colon\": {\n      \"patterns\": [{\n        \"match\": \":\",\n        \"name\": \"support.type.colon.d\"\n      }]\n    },\n    \"comma\": {\n      \"patterns\": [{\n        \"match\": \",\",\n        \"name\": \"keyword.operator.comma.d\"\n      }]\n    },\n    \"comment\": {\n      \"patterns\": [{\n        \"include\": \"#block-comment\"\n      }, {\n        \"include\": \"#line-comment\"\n      }, {\n        \"include\": \"#nesting-block-comment\"\n      }]\n    },\n    \"condition\": {\n      \"patterns\": [{\n        \"include\": \"#version-condition\"\n      }, {\n        \"include\": \"#debug-condition\"\n      }, {\n        \"include\": \"#static-if-condition\"\n      }]\n    },\n    \"conditional-declaration\": {\n      \"patterns\": [{\n        \"include\": \"#condition\"\n      }, {\n        \"match\": \"\\\\belse\\\\b\",\n        \"name\": \"keyword.control.else.d\"\n      }, {\n        \"include\": \"#colon\"\n      }, {\n        \"include\": \"#decl-defs\"\n      }]\n    },\n    \"conditional-expression\": {\n      \"patterns\": [{\n        \"match\": \"\\\\s(\\\\?|:)\\\\s\",\n        \"name\": \"keyword.operator.ternary.d\"\n      }]\n    },\n    \"conditional-statement\": {\n      \"patterns\": [{\n        \"include\": \"#condition\"\n      }, {\n        \"include\": \"#no-scope-non-empty-statement\"\n      }, {\n        \"match\": \"\\\\belse\\\\b\",\n        \"name\": \"keyword.control.else.d\"\n      }]\n    },\n    \"constructor\": {\n      \"patterns\": [{\n        \"match\": \"\\\\bthis\\\\b\",\n        \"name\": \"entity.name.function.constructor.d\"\n      }]\n    },\n    \"continue-statement\": {\n      \"patterns\": [{\n        \"match\": \"\\\\bcontinue\\\\b\",\n        \"name\": \"keyword.control.continue.d\"\n      }]\n    },\n    \"debug-condition\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\bdebug\\\\s*\\\\(\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.other.debug.identifier.begin.d\"\n          }\n        },\n        \"end\": \"\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.other.debug.identifier.end.d\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#integer-literal\"\n        }, {\n          \"include\": \"#identifier\"\n        }]\n      }, {\n        \"match\": \"\\\\bdebug\\\\b\\\\s*(?!\\\\()\",\n        \"name\": \"keyword.other.debug.plain.d\"\n      }]\n    },\n    \"debug-specification\": {\n      \"patterns\": [{\n        \"match\": \"\\\\bdebug\\\\b\\\\s*(?==)\",\n        \"name\": \"keyword.other.debug-specification.d\"\n      }]\n    },\n    \"decimal-float\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b((\\\\.[0-9])|(0\\\\.)|(([1-9]|(0[1-9_]))[0-9_]*\\\\.))[0-9_]*((e-|E-|e\\\\+|E\\\\+|e|E)[0-9][0-9_]*)?[LfF]?i?\\\\b\",\n        \"name\": \"constant.numeric.float.decimal.d\"\n      }]\n    },\n    \"decimal-integer\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b(0(?=[^\\\\dxXbB]))|([1-9][0-9_]*)(Lu|LU|uL|UL|L|u|U)?\\\\b\",\n        \"name\": \"constant.numeric.integer.decimal.d\"\n      }]\n    },\n    \"declaration\": {\n      \"patterns\": [{\n        \"include\": \"#alias-declaration\"\n      }, {\n        \"include\": \"#aggregate-declaration\"\n      }, {\n        \"include\": \"#enum-declaration\"\n      }, {\n        \"include\": \"#import-declaration\"\n      }, {\n        \"include\": \"#storage-class\"\n      }, {\n        \"include\": \"#void-initializer\"\n      }, {\n        \"include\": \"#mixin-declaration\"\n      }]\n    },\n    \"declaration-statement\": {\n      \"patterns\": [{\n        \"include\": \"#declaration\"\n      }]\n    },\n    \"default-statement\": {\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.control.case.default.d\"\n          },\n          \"2\": {\n            \"name\": \"meta.default.colon.d\"\n          }\n        },\n        \"match\": \"\\\\b(default)\\\\s*(:)\"\n      }]\n    },\n    \"delete-expression\": {\n      \"patterns\": [{\n        \"match\": \"\\\\bdelete\\\\s+\",\n        \"name\": \"keyword.other.delete.d\"\n      }]\n    },\n    \"delimited-string\": {\n      \"begin\": 'q\"',\n      \"end\": '\"',\n      \"name\": \"string.delimited.d\",\n      \"patterns\": [{\n        \"include\": \"#delimited-string-bracket\"\n      }, {\n        \"include\": \"#delimited-string-parens\"\n      }, {\n        \"include\": \"#delimited-string-angle-brackets\"\n      }, {\n        \"include\": \"#delimited-string-braces\"\n      }]\n    },\n    \"delimited-string-angle-brackets\": {\n      \"patterns\": [{\n        \"begin\": \"<\",\n        \"end\": \">\",\n        \"name\": \"constant.character.angle-brackets.d\",\n        \"patterns\": [{\n          \"include\": \"#wysiwyg-characters\"\n        }]\n      }]\n    },\n    \"delimited-string-braces\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\{\",\n        \"end\": \"\\\\}\",\n        \"name\": \"constant.character.delimited.braces.d\",\n        \"patterns\": [{\n          \"include\": \"#wysiwyg-characters\"\n        }]\n      }]\n    },\n    \"delimited-string-bracket\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\[\",\n        \"end\": \"\\\\]\",\n        \"name\": \"constant.characters.delimited.brackets.d\",\n        \"patterns\": [{\n          \"include\": \"#wysiwyg-characters\"\n        }]\n      }]\n    },\n    \"delimited-string-parens\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\(\",\n        \"end\": \"\\\\)\",\n        \"name\": \"constant.character.delimited.parens.d\",\n        \"patterns\": [{\n          \"include\": \"#wysiwyg-characters\"\n        }]\n      }]\n    },\n    \"deprecated-statement\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\bdeprecated\\\\s*\\\\(\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.other.deprecated.begin.d\"\n          }\n        },\n        \"end\": \"\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.other.deprecated.end.d\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#comment\"\n        }, {\n          \"include\": \"#expression\"\n        }, {\n          \"include\": \"#comma\"\n        }]\n      }, {\n        \"match\": \"\\\\bdeprecated\\\\b\\\\s*(?!\\\\()\",\n        \"name\": \"keyword.other.deprecated.plain.d\"\n      }]\n    },\n    \"destructor\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b~this\\\\s*\\\\(\\\\s*\\\\)\",\n        \"name\": \"entity.name.class.destructor.d\"\n      }]\n    },\n    \"do-statement\": {\n      \"patterns\": [{\n        \"match\": \"\\\\bdo\\\\b\",\n        \"name\": \"keyword.control.do.d\"\n      }]\n    },\n    \"double-quoted-characters\": {\n      \"patterns\": [{\n        \"include\": \"#character\"\n      }, {\n        \"include\": \"#end-of-line\"\n      }, {\n        \"include\": \"#escape-sequence\"\n      }]\n    },\n    \"double-quoted-string\": {\n      \"patterns\": [{\n        \"begin\": '\"',\n        \"end\": '\"[cwd]?',\n        \"name\": \"string.double-quoted-string.d\",\n        \"patterns\": [{\n          \"include\": \"#double-quoted-characters\"\n        }]\n      }]\n    },\n    \"end-of-line\": {\n      \"patterns\": [{\n        \"match\": \"\\\\n+\",\n        \"name\": \"string.character.end-of-line.d\"\n      }]\n    },\n    \"enum-declaration\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\b(enum)\\\\b\\\\s+(?=.*[=;])\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"storage.type.enum.d\"\n          }\n        },\n        \"end\": \"([A-Za-z_][\\\\w_\\\\d]*)\\\\s*(?=;|=|\\\\()(;)?\",\n        \"endCaptures\": {\n          \"1\": {\n            \"name\": \"entity.name.type.enum.d\"\n          },\n          \"2\": {\n            \"name\": \"meta.enum.end.d\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#type\"\n        }, {\n          \"include\": \"#extended-type\"\n        }, {\n          \"match\": \"=(?![=>])\",\n          \"name\": \"keyword.operator.equal.alias.d\"\n        }]\n      }]\n    },\n    \"eof\": {\n      \"patterns\": [{\n        \"begin\": \"__EOF__\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"comment.block.documentation.eof.start.d\"\n          }\n        },\n        \"end\": \"(?!__NEVER_MATCH__)__NEVER_MATCH__\",\n        \"name\": \"text.eof.d\"\n      }]\n    },\n    \"equal\": {\n      \"patterns\": [{\n        \"match\": \"=(?![=>])\",\n        \"name\": \"keyword.operator.equal.d\"\n      }]\n    },\n    \"escape-sequence\": {\n      \"patterns\": [{\n        \"match\": \"(\\\\\\\\(?:quot|amp|lt|gt|OElig|oelig|Scaron|scaron|Yuml|circ|tilde|ensp|emsp|thinsp|zwnj|zwj|lrm|rlm|ndash|mdash|lsquo|rsquo|sbquo|ldquo|rdquo|bdquo|dagger|Dagger|permil|lsaquo|rsaquo|euro|nbsp|iexcl|cent|pound|curren|yen|brvbar|sect|uml|copy|ordf|laquo|not|shy|reg|macr|deg|plusmn|sup2|sup3|acute|micro|para|middot|cedil|sup1|ordm|raquo|frac14|frac12|frac34|iquest|Agrave|Aacute|Acirc|Atilde|Auml|Aring|Aelig|Ccedil|egrave|eacute|ecirc|iuml|eth|ntilde|ograve|oacute|ocirc|otilde|ouml|divide|oslash|ugrave|uacute|ucirc|uuml|yacute|thorn|yuml|fnof|Alpha|Beta|Gamma|Delta|Epsilon|Zeta|Eta|Theta|Iota|Kappa|Lambda|Mu|Nu|Xi|Omicron|Pi|Rho|Sigma|Tau|Upsilon|Phi|Chi|Psi|Omega|alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigmaf|sigma|tau|upsilon|phi|chi|psi|omega|thetasym|upsih|piv|bull|hellip|prime|Prime|oline|frasl|weierp|image|real|trade|alefsym|larr|uarr|rarr|darr|harr|crarr|lArr|uArr|rArr|dArr|hArr|forall|part|exist|empty|nabla|isin|notin|ni|prod|sum|minux|lowast|radic|prop|infin|ang|and|or|cap|cup|int|there4|sim|cong|asymp|ne|equiv|le|ge|sub|sup|nsub|sube|supe|oplus|otimes|perp|sdot|lceil|rceil|lfloor|rfloor|loz|spades|clubs|hearts|diams|lang|rang))\",\n        \"name\": \"constant.character.escape-sequence.entity.d\"\n      }, {\n        \"match\": \"(\\\\\\\\x[0-9a-fA-F_]{2}|\\\\\\\\u[0-9a-fA-F_]{4}|\\\\\\\\U[0-9a-fA-F_]{8}|\\\\\\\\[0-7]{1,3})\",\n        \"name\": \"constant.character.escape-sequence.number.d\"\n      }, {\n        \"match\": `(\\\\\\\\t|\\\\\\\\'|\\\\\\\\\"|\\\\\\\\\\\\?|\\\\\\\\0|\\\\\\\\a|\\\\\\\\b|\\\\\\\\f|\\\\\\\\n|\\\\\\\\r|\\\\\\\\v|\\\\\\\\\\\\\\\\)`,\n        \"name\": \"constant.character.escape-sequence.d\"\n      }]\n    },\n    \"expression\": {\n      \"patterns\": [{\n        \"include\": \"#index-expression\"\n      }, {\n        \"include\": \"#expression-no-index\"\n      }]\n    },\n    \"expression-no-index\": {\n      \"patterns\": [{\n        \"include\": \"#function-literal\"\n      }, {\n        \"include\": \"#assert-expression\"\n      }, {\n        \"include\": \"#assign-expression\"\n      }, {\n        \"include\": \"#mixin-expression\"\n      }, {\n        \"include\": \"#import-expression\"\n      }, {\n        \"include\": \"#traits-expression\"\n      }, {\n        \"include\": \"#is-expression\"\n      }, {\n        \"include\": \"#typeid-expression\"\n      }, {\n        \"include\": \"#shift-expression\"\n      }, {\n        \"include\": \"#logical-expression\"\n      }, {\n        \"include\": \"#rel-expression\"\n      }, {\n        \"include\": \"#bitwise-expression\"\n      }, {\n        \"include\": \"#identity-expression\"\n      }, {\n        \"include\": \"#in-expression\"\n      }, {\n        \"include\": \"#conditional-expression\"\n      }, {\n        \"include\": \"#arithmetic-expression\"\n      }, {\n        \"include\": \"#new-expression\"\n      }, {\n        \"include\": \"#delete-expression\"\n      }, {\n        \"include\": \"#cast-expression\"\n      }, {\n        \"include\": \"#type-specialization\"\n      }, {\n        \"include\": \"#comma\"\n      }, {\n        \"include\": \"#special-keyword\"\n      }, {\n        \"include\": \"#functions\"\n      }, {\n        \"include\": \"#type\"\n      }, {\n        \"include\": \"#parentheses-expression\"\n      }, {\n        \"include\": \"#lexical\"\n      }]\n    },\n    \"extended-type\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b((\\\\.\\\\s*)?[_\\\\w][_\\\\d\\\\w]*)(\\\\s*\\\\.\\\\s*[_\\\\w][_\\\\d\\\\w]*)*\\\\b\",\n        \"name\": \"entity.name.type.d\"\n      }, {\n        \"begin\": \"\\\\[\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"storage.type.array.expression.begin.d\"\n          }\n        },\n        \"end\": \"\\\\]\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"storage.type.array.expression.end.d\"\n          }\n        },\n        \"patterns\": [{\n          \"match\": \"\\\\.\\\\.|\\\\$\",\n          \"name\": \"keyword.operator.slice.d\"\n        }, {\n          \"include\": \"#type\"\n        }, {\n          \"include\": \"#expression\"\n        }]\n      }]\n    },\n    \"final-switch-statement\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\b(final\\\\s+switch)\\\\b\\\\s*\",\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.control.final.switch.d\"\n          }\n        },\n        \"end\": \"(?<=\\\\))\",\n        \"patterns\": [{\n          \"begin\": \"\\\\(\",\n          \"end\": \"\\\\)\",\n          \"patterns\": [{\n            \"include\": \"source.d\"\n          }]\n        }]\n      }]\n    },\n    \"finally-statement\": {\n      \"patterns\": [{\n        \"match\": \"\\\\bfinally\\\\b\",\n        \"name\": \"keyword.control.throw.d\"\n      }]\n    },\n    \"float-literal\": {\n      \"patterns\": [{\n        \"include\": \"#decimal-float\"\n      }, {\n        \"include\": \"#hexadecimal-float\"\n      }]\n    },\n    \"for-statement\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\b(for)\\\\b\\\\s*\",\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.control.for.d\"\n          }\n        },\n        \"end\": \"(?<=\\\\))\",\n        \"patterns\": [{\n          \"begin\": \"\\\\(\",\n          \"end\": \"\\\\)\",\n          \"patterns\": [{\n            \"include\": \"source.d\"\n          }]\n        }]\n      }]\n    },\n    \"foreach-reverse-statement\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\b(foreach_reverse)\\\\b\\\\s*\",\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.control.foreach_reverse.d\"\n          }\n        },\n        \"end\": \"(?<=\\\\))\",\n        \"patterns\": [{\n          \"begin\": \"\\\\(\",\n          \"end\": \"\\\\)\",\n          \"patterns\": [{\n            \"match\": \";\",\n            \"name\": \"keyword.operator.semi-colon.d\"\n          }, {\n            \"include\": \"source.d\"\n          }]\n        }]\n      }]\n    },\n    \"foreach-statement\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\b(foreach)\\\\b\\\\s*\",\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.control.foreach.d\"\n          }\n        },\n        \"end\": \"(?<=\\\\))\",\n        \"patterns\": [{\n          \"begin\": \"\\\\(\",\n          \"end\": \"\\\\)\",\n          \"patterns\": [{\n            \"match\": \";\",\n            \"name\": \"keyword.operator.semi-colon.d\"\n          }, {\n            \"include\": \"source.d\"\n          }]\n        }]\n      }]\n    },\n    \"function-attribute\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b(nothrow|pure)\\\\b\",\n        \"name\": \"storage.type.modifier.function-attribute.d\"\n      }, {\n        \"include\": \"#property\"\n      }]\n    },\n    \"function-body\": {\n      \"patterns\": [{\n        \"include\": \"#in-statement\"\n      }, {\n        \"include\": \"#out-statement\"\n      }, {\n        \"include\": \"#block-statement\"\n      }]\n    },\n    \"function-literal\": {\n      \"patterns\": [{\n        \"match\": \"=>\",\n        \"name\": \"keyword.operator.lambda.d\"\n      }, {\n        \"match\": \"\\\\b(function|delegate)\\\\b\",\n        \"name\": \"keyword.other.function-literal.d\"\n      }, {\n        \"begin\": \"\\\\b([_\\\\w][_\\\\d\\\\w]*)\\\\s*(=>)\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"variable.parameter.d\"\n          },\n          \"2\": {\n            \"name\": \"meta.lexical.token.symbolic.d\"\n          }\n        },\n        \"end\": \"(?=[\\\\);,\\\\]}])\",\n        \"patterns\": [{\n          \"include\": \"source.d\"\n        }]\n      }, {\n        \"begin\": \"(?<=\\\\)|\\\\()(\\\\s*)({)\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"source.d\"\n          },\n          \"2\": {\n            \"name\": \"source.d\"\n          }\n        },\n        \"end\": \"}\",\n        \"patterns\": [{\n          \"include\": \"source.d\"\n        }]\n      }]\n    },\n    \"function-prelude\": {\n      \"patterns\": [{\n        \"match\": \"(?!typeof|typeid)((\\\\.\\\\s*)?[_\\\\w][_\\\\d\\\\w]*)(\\\\s*\\\\.\\\\s*[_\\\\w][_\\\\d\\\\w]*)*\\\\s*(?=\\\\()\",\n        \"name\": \"entity.name.function.d\"\n      }]\n    },\n    \"functions\": {\n      \"patterns\": [{\n        \"include\": \"#function-attribute\"\n      }, {\n        \"include\": \"#function-prelude\"\n      }]\n    },\n    \"goto-statement\": {\n      \"patterns\": [{\n        \"match\": \"\\\\bgoto\\\\s+default\\\\b\",\n        \"name\": \"keyword.control.goto.d\"\n      }, {\n        \"match\": \"\\\\bgoto\\\\s+case\\\\b\",\n        \"name\": \"keyword.control.goto.d\"\n      }, {\n        \"match\": \"\\\\bgoto\\\\b\",\n        \"name\": \"keyword.control.goto.d\"\n      }]\n    },\n    \"hex-string\": {\n      \"patterns\": [{\n        \"begin\": 'x\"',\n        \"end\": '\"[cwd]?',\n        \"name\": \"string.hex-string.d\",\n        \"patterns\": [{\n          \"match\": \"[a-fA-F0-9_s]+\",\n          \"name\": \"constant.character.hex-string.d\"\n        }]\n      }]\n    },\n    \"hexadecimal-float\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b0[xX][0-9a-fA-F_]*(\\\\.[0-9a-fA-F_]*)?(p-|P-|p\\\\+|P\\\\+|p|P)[0-9][0-9_]*[LfF]?i?\\\\b\",\n        \"name\": \"constant.numeric.float.hexadecimal.d\"\n      }]\n    },\n    \"hexadecimal-integer\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b(0x|0X)([0-9a-fA-F][0-9a-fA-F_]*)(Lu|LU|uL|UL|L|u|U)?\\\\b\",\n        \"name\": \"constant.numeric.integer.hexadecimal.d\"\n      }]\n    },\n    \"identifier\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b((\\\\.\\\\s*)?[_\\\\w][_\\\\d\\\\w]*)(\\\\s*\\\\.\\\\s*[_\\\\w][_\\\\d\\\\w]*)*\\\\b\",\n        \"name\": \"variable.d\"\n      }]\n    },\n    \"identifier-list\": {\n      \"patterns\": [{\n        \"match\": \",\",\n        \"name\": \"keyword.other.comma.d\"\n      }, {\n        \"include\": \"#identifier\"\n      }]\n    },\n    \"identity-expression\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b(is|!is)\\\\b\",\n        \"name\": \"keyword.operator.identity.d\"\n      }]\n    },\n    \"if-statement\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\b(if)\\\\b\\\\s*\",\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.control.if.d\"\n          }\n        },\n        \"end\": \"(?<=\\\\))\",\n        \"patterns\": [{\n          \"begin\": \"\\\\(\",\n          \"end\": \"\\\\)\",\n          \"patterns\": [{\n            \"include\": \"source.d\"\n          }]\n        }]\n      }, {\n        \"match\": \"\\\\belse\\\\b\\\\s*\",\n        \"name\": \"keyword.control.else.d\"\n      }]\n    },\n    \"import-declaration\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\b(static\\\\s+)?(import)\\\\s+(?!\\\\()\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.package.import.d\"\n          },\n          \"2\": {\n            \"name\": \"keyword.package.import.d\"\n          }\n        },\n        \"end\": \";\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"meta.import.end.d\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#import-identifier\"\n        }, {\n          \"include\": \"#comma\"\n        }, {\n          \"include\": \"#comment\"\n        }]\n      }]\n    },\n    \"import-expression\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\b(import)\\\\s*(\\\\()\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.other.import.d\"\n          },\n          \"2\": {\n            \"name\": \"keyword.other.import.begin.d\"\n          }\n        },\n        \"end\": \"\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.other.import.end.d\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#comment\"\n        }, {\n          \"include\": \"#expression\"\n        }, {\n          \"include\": \"#comma\"\n        }]\n      }]\n    },\n    \"import-identifier\": {\n      \"patterns\": [{\n        \"match\": \"([_a-zA-Z][_\\\\d\\\\w]*)(\\\\s*\\\\.\\\\s*[_a-zA-Z][_\\\\d\\\\w]*)*\",\n        \"name\": \"variable.parameter.import.d\"\n      }]\n    },\n    \"in-expression\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b(in|!in)\\\\b\",\n        \"name\": \"keyword.operator.in.d\"\n      }]\n    },\n    \"in-statement\": {\n      \"patterns\": [{\n        \"match\": \"\\\\bin\\\\b\",\n        \"name\": \"keyword.control.in.d\"\n      }]\n    },\n    \"index-expression\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\[\",\n        \"end\": \"\\\\]\",\n        \"patterns\": [{\n          \"match\": \"\\\\.\\\\.|\\\\$\",\n          \"name\": \"keyword.operator.slice.d\"\n        }, {\n          \"include\": \"#expression-no-index\"\n        }]\n      }]\n    },\n    \"integer-literal\": {\n      \"patterns\": [{\n        \"include\": \"#decimal-integer\"\n      }, {\n        \"include\": \"#binary-integer\"\n      }, {\n        \"include\": \"#hexadecimal-integer\"\n      }]\n    },\n    \"interface-declaration\": {\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"name\": \"storage.type.interface.d\"\n          },\n          \"2\": {\n            \"name\": \"entity.name.type.interface.d\"\n          }\n        },\n        \"match\": \"\\\\b(interface)(?:\\\\s+([A-Za-z_][\\\\w_\\\\d]*))?\\\\b\"\n      }]\n    },\n    \"invariant\": {\n      \"patterns\": [{\n        \"match\": \"\\\\binvariant\\\\s*\\\\(\\\\s*\\\\)\",\n        \"name\": \"entity.name.class.invariant.d\"\n      }]\n    },\n    \"is-expression\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\bis\\\\s*\\\\(\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.token.is.begin.d\"\n          }\n        },\n        \"end\": \"\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.token.is.end.d\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#comment\"\n        }, {\n          \"include\": \"#expression\"\n        }, {\n          \"include\": \"#comma\"\n        }]\n      }]\n    },\n    \"keyword\": {\n      \"patterns\": [{\n        \"match\": \"\\\\babstract\\\\b\",\n        \"name\": \"keyword.token.abstract.d\"\n      }, {\n        \"match\": \"\\\\balias\\\\b\",\n        \"name\": \"keyword.token.alias.d\"\n      }, {\n        \"match\": \"\\\\balign\\\\b\",\n        \"name\": \"keyword.token.align.d\"\n      }, {\n        \"match\": \"\\\\basm\\\\b\",\n        \"name\": \"keyword.token.asm.d\"\n      }, {\n        \"match\": \"\\\\bassert\\\\b\",\n        \"name\": \"keyword.token.assert.d\"\n      }, {\n        \"match\": \"\\\\bauto\\\\b\",\n        \"name\": \"keyword.token.auto.d\"\n      }, {\n        \"match\": \"\\\\bbool\\\\b\",\n        \"name\": \"keyword.token.bool.d\"\n      }, {\n        \"match\": \"\\\\bbreak\\\\b\",\n        \"name\": \"keyword.token.break.d\"\n      }, {\n        \"match\": \"\\\\bbyte\\\\b\",\n        \"name\": \"keyword.token.byte.d\"\n      }, {\n        \"match\": \"\\\\bcase\\\\b\",\n        \"name\": \"keyword.token.case.d\"\n      }, {\n        \"match\": \"\\\\bcast\\\\b\",\n        \"name\": \"keyword.token.cast.d\"\n      }, {\n        \"match\": \"\\\\bcatch\\\\b\",\n        \"name\": \"keyword.token.catch.d\"\n      }, {\n        \"match\": \"\\\\bcdouble\\\\b\",\n        \"name\": \"keyword.token.cdouble.d\"\n      }, {\n        \"match\": \"\\\\bcent\\\\b\",\n        \"name\": \"keyword.token.cent.d\"\n      }, {\n        \"match\": \"\\\\bcfloat\\\\b\",\n        \"name\": \"keyword.token.cfloat.d\"\n      }, {\n        \"match\": \"\\\\bchar\\\\b\",\n        \"name\": \"keyword.token.char.d\"\n      }, {\n        \"match\": \"\\\\bclass\\\\b\",\n        \"name\": \"keyword.token.class.d\"\n      }, {\n        \"match\": \"\\\\bconst\\\\b\",\n        \"name\": \"keyword.token.const.d\"\n      }, {\n        \"match\": \"\\\\bcontinue\\\\b\",\n        \"name\": \"keyword.token.continue.d\"\n      }, {\n        \"match\": \"\\\\bcreal\\\\b\",\n        \"name\": \"keyword.token.creal.d\"\n      }, {\n        \"match\": \"\\\\bdchar\\\\b\",\n        \"name\": \"keyword.token.dchar.d\"\n      }, {\n        \"match\": \"\\\\bdebug\\\\b\",\n        \"name\": \"keyword.token.debug.d\"\n      }, {\n        \"match\": \"\\\\bdefault\\\\b\",\n        \"name\": \"keyword.token.default.d\"\n      }, {\n        \"match\": \"\\\\bdelegate\\\\b\",\n        \"name\": \"keyword.token.delegate.d\"\n      }, {\n        \"match\": \"\\\\bdelete\\\\b\",\n        \"name\": \"keyword.token.delete.d\"\n      }, {\n        \"match\": \"\\\\bdeprecated\\\\b\",\n        \"name\": \"keyword.token.deprecated.d\"\n      }, {\n        \"match\": \"\\\\bdo\\\\b\",\n        \"name\": \"keyword.token.do.d\"\n      }, {\n        \"match\": \"\\\\bdouble\\\\b\",\n        \"name\": \"keyword.token.double.d\"\n      }, {\n        \"match\": \"\\\\belse\\\\b\",\n        \"name\": \"keyword.token.else.d\"\n      }, {\n        \"match\": \"\\\\benum\\\\b\",\n        \"name\": \"keyword.token.enum.d\"\n      }, {\n        \"match\": \"\\\\bexport\\\\b\",\n        \"name\": \"keyword.token.export.d\"\n      }, {\n        \"match\": \"\\\\bextern\\\\b\",\n        \"name\": \"keyword.token.extern.d\"\n      }, {\n        \"match\": \"\\\\bfalse\\\\b\",\n        \"name\": \"constant.language.boolean.false.d\"\n      }, {\n        \"match\": \"\\\\bfinal\\\\b\",\n        \"name\": \"keyword.token.final.d\"\n      }, {\n        \"match\": \"\\\\bfinally\\\\b\",\n        \"name\": \"keyword.token.finally.d\"\n      }, {\n        \"match\": \"\\\\bfloat\\\\b\",\n        \"name\": \"keyword.token.float.d\"\n      }, {\n        \"match\": \"\\\\bfor\\\\b\",\n        \"name\": \"keyword.token.for.d\"\n      }, {\n        \"match\": \"\\\\bforeach\\\\b\",\n        \"name\": \"keyword.token.foreach.d\"\n      }, {\n        \"match\": \"\\\\bforeach_reverse\\\\b\",\n        \"name\": \"keyword.token.foreach_reverse.d\"\n      }, {\n        \"match\": \"\\\\bfunction\\\\b\",\n        \"name\": \"keyword.token.function.d\"\n      }, {\n        \"match\": \"\\\\bgoto\\\\b\",\n        \"name\": \"keyword.token.goto.d\"\n      }, {\n        \"match\": \"\\\\bidouble\\\\b\",\n        \"name\": \"keyword.token.idouble.d\"\n      }, {\n        \"match\": \"\\\\bif\\\\b\",\n        \"name\": \"keyword.token.if.d\"\n      }, {\n        \"match\": \"\\\\bifloat\\\\b\",\n        \"name\": \"keyword.token.ifloat.d\"\n      }, {\n        \"match\": \"\\\\bimmutable\\\\b\",\n        \"name\": \"keyword.token.immutable.d\"\n      }, {\n        \"match\": \"\\\\bimport\\\\b\",\n        \"name\": \"keyword.token.import.d\"\n      }, {\n        \"match\": \"\\\\bin\\\\b\",\n        \"name\": \"keyword.token.in.d\"\n      }, {\n        \"match\": \"\\\\binout\\\\b\",\n        \"name\": \"keyword.token.inout.d\"\n      }, {\n        \"match\": \"\\\\bint\\\\b\",\n        \"name\": \"keyword.token.int.d\"\n      }, {\n        \"match\": \"\\\\binterface\\\\b\",\n        \"name\": \"keyword.token.interface.d\"\n      }, {\n        \"match\": \"\\\\binvariant\\\\b\",\n        \"name\": \"keyword.token.invariant.d\"\n      }, {\n        \"match\": \"\\\\bireal\\\\b\",\n        \"name\": \"keyword.token.ireal.d\"\n      }, {\n        \"match\": \"\\\\bis\\\\b\",\n        \"name\": \"keyword.token.is.d\"\n      }, {\n        \"match\": \"\\\\blazy\\\\b\",\n        \"name\": \"keyword.token.lazy.d\"\n      }, {\n        \"match\": \"\\\\blong\\\\b\",\n        \"name\": \"keyword.token.long.d\"\n      }, {\n        \"match\": \"\\\\bmacro\\\\b\",\n        \"name\": \"keyword.token.macro.d\"\n      }, {\n        \"match\": \"\\\\bmixin\\\\b\",\n        \"name\": \"keyword.token.mixin.d\"\n      }, {\n        \"match\": \"\\\\bmodule\\\\b\",\n        \"name\": \"keyword.token.module.d\"\n      }, {\n        \"match\": \"\\\\bnew\\\\b\",\n        \"name\": \"keyword.token.new.d\"\n      }, {\n        \"match\": \"\\\\bnothrow\\\\b\",\n        \"name\": \"keyword.token.nothrow.d\"\n      }, {\n        \"match\": \"\\\\bnull\\\\b\",\n        \"name\": \"constant.language.null.d\"\n      }, {\n        \"match\": \"\\\\bout\\\\b\",\n        \"name\": \"keyword.token.out.d\"\n      }, {\n        \"match\": \"\\\\boverride\\\\b\",\n        \"name\": \"keyword.token.override.d\"\n      }, {\n        \"match\": \"\\\\bpackage\\\\b\",\n        \"name\": \"keyword.token.package.d\"\n      }, {\n        \"match\": \"\\\\bpragma\\\\b\",\n        \"name\": \"keyword.token.pragma.d\"\n      }, {\n        \"match\": \"\\\\bprivate\\\\b\",\n        \"name\": \"keyword.token.private.d\"\n      }, {\n        \"match\": \"\\\\bprotected\\\\b\",\n        \"name\": \"keyword.token.protected.d\"\n      }, {\n        \"match\": \"\\\\bpublic\\\\b\",\n        \"name\": \"keyword.token.public.d\"\n      }, {\n        \"match\": \"\\\\bpure\\\\b\",\n        \"name\": \"keyword.token.pure.d\"\n      }, {\n        \"match\": \"\\\\breal\\\\b\",\n        \"name\": \"keyword.token.real.d\"\n      }, {\n        \"match\": \"\\\\bref\\\\b\",\n        \"name\": \"keyword.token.ref.d\"\n      }, {\n        \"match\": \"\\\\breturn\\\\b\",\n        \"name\": \"keyword.token.return.d\"\n      }, {\n        \"match\": \"\\\\bscope\\\\b\",\n        \"name\": \"keyword.token.scope.d\"\n      }, {\n        \"match\": \"\\\\bshared\\\\b\",\n        \"name\": \"keyword.token.shared.d\"\n      }, {\n        \"match\": \"\\\\bshort\\\\b\",\n        \"name\": \"keyword.token.short.d\"\n      }, {\n        \"match\": \"\\\\bstatic\\\\b\",\n        \"name\": \"keyword.token.static.d\"\n      }, {\n        \"match\": \"\\\\bstruct\\\\b\",\n        \"name\": \"keyword.token.struct.d\"\n      }, {\n        \"match\": \"\\\\bsuper\\\\b\",\n        \"name\": \"keyword.token.super.d\"\n      }, {\n        \"match\": \"\\\\bswitch\\\\b\",\n        \"name\": \"keyword.token.switch.d\"\n      }, {\n        \"match\": \"\\\\bsynchronized\\\\b\",\n        \"name\": \"keyword.token.synchronized.d\"\n      }, {\n        \"match\": \"\\\\btemplate\\\\b\",\n        \"name\": \"keyword.token.template.d\"\n      }, {\n        \"match\": \"\\\\bthis\\\\b\",\n        \"name\": \"keyword.token.this.d\"\n      }, {\n        \"match\": \"\\\\bthrow\\\\b\",\n        \"name\": \"keyword.token.throw.d\"\n      }, {\n        \"match\": \"\\\\btrue\\\\b\",\n        \"name\": \"constant.language.boolean.true.d\"\n      }, {\n        \"match\": \"\\\\btry\\\\b\",\n        \"name\": \"keyword.token.try.d\"\n      }, {\n        \"match\": \"\\\\btypedef\\\\b\",\n        \"name\": \"keyword.token.typedef.d\"\n      }, {\n        \"match\": \"\\\\btypeid\\\\b\",\n        \"name\": \"keyword.token.typeid.d\"\n      }, {\n        \"match\": \"\\\\btypeof\\\\b\",\n        \"name\": \"keyword.token.typeof.d\"\n      }, {\n        \"match\": \"\\\\bubyte\\\\b\",\n        \"name\": \"keyword.token.ubyte.d\"\n      }, {\n        \"match\": \"\\\\bucent\\\\b\",\n        \"name\": \"keyword.token.ucent.d\"\n      }, {\n        \"match\": \"\\\\buint\\\\b\",\n        \"name\": \"keyword.token.uint.d\"\n      }, {\n        \"match\": \"\\\\bulong\\\\b\",\n        \"name\": \"keyword.token.ulong.d\"\n      }, {\n        \"match\": \"\\\\bunion\\\\b\",\n        \"name\": \"keyword.token.union.d\"\n      }, {\n        \"match\": \"\\\\bunittest\\\\b\",\n        \"name\": \"keyword.token.unittest.d\"\n      }, {\n        \"match\": \"\\\\bushort\\\\b\",\n        \"name\": \"keyword.token.ushort.d\"\n      }, {\n        \"match\": \"\\\\bversion\\\\b\",\n        \"name\": \"keyword.token.version.d\"\n      }, {\n        \"match\": \"\\\\bvoid\\\\b\",\n        \"name\": \"keyword.token.void.d\"\n      }, {\n        \"match\": \"\\\\bvolatile\\\\b\",\n        \"name\": \"keyword.token.volatile.d\"\n      }, {\n        \"match\": \"\\\\bwchar\\\\b\",\n        \"name\": \"keyword.token.wchar.d\"\n      }, {\n        \"match\": \"\\\\bwhile\\\\b\",\n        \"name\": \"keyword.token.while.d\"\n      }, {\n        \"match\": \"\\\\bwith\\\\b\",\n        \"name\": \"keyword.token.with.d\"\n      }, {\n        \"match\": \"\\\\b__FILE__\\\\b\",\n        \"name\": \"keyword.token.__FILE__.d\"\n      }, {\n        \"match\": \"\\\\b__MODULE__\\\\b\",\n        \"name\": \"keyword.token.__MODULE__.d\"\n      }, {\n        \"match\": \"\\\\b__LINE__\\\\b\",\n        \"name\": \"keyword.token.__LINE__.d\"\n      }, {\n        \"match\": \"\\\\b__FUNCTION__\\\\b\",\n        \"name\": \"keyword.token.__FUNCTION__.d\"\n      }, {\n        \"match\": \"\\\\b__PRETTY_FUNCTION__\\\\b\",\n        \"name\": \"keyword.token.__PRETTY_FUNCTION__.d\"\n      }, {\n        \"match\": \"\\\\b__gshared\\\\b\",\n        \"name\": \"keyword.token.__gshared.d\"\n      }, {\n        \"match\": \"\\\\b__traits\\\\b\",\n        \"name\": \"keyword.token.__traits.d\"\n      }, {\n        \"match\": \"\\\\b__vector\\\\b\",\n        \"name\": \"keyword.token.__vector.d\"\n      }, {\n        \"match\": \"\\\\b__parameters\\\\b\",\n        \"name\": \"keyword.token.__parameters.d\"\n      }]\n    },\n    \"labeled-statement\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b(?!abstract|alias|align|asm|assert|auto|bool|break|byte|case|cast|catch|cdouble|cent|cfloat|char|class|const|continue|creal|dchar|debug|default|delegate|delete|deprecated|do|double|else|enum|export|extern|false|final|finally|float|for|foreach|foreach_reverse|function|goto|idouble|if|ifloat|immutable|import|in|inout|int|interface|invariant|ireal|is|lazy|long|macro|mixin|module|new|nothrow|noreturn|null|out|override|package|pragma|private|protected|public|pure|real|ref|return|scope|shared|short|static|struct|super|switch|synchronized|template|this|throw|true|try|typedef|typeid|typeof|ubyte|ucent|uint|ulong|union|unittest|ushort|version|void|volatile|wchar|while|with|__FILE__|__MODULE__|__LINE__|__FUNCTION__|__PRETTY_FUNCTION__|__gshared|__traits|__vector|__parameters)[a-zA-Z_][a-zA-Z_0-9]*\\\\s*:\",\n        \"name\": \"entity.name.d\"\n      }]\n    },\n    \"lexical\": {\n      \"patterns\": [{\n        \"include\": \"#comment\"\n      }, {\n        \"include\": \"#string-literal\"\n      }, {\n        \"include\": \"#character-literal\"\n      }, {\n        \"include\": \"#float-literal\"\n      }, {\n        \"include\": \"#integer-literal\"\n      }, {\n        \"include\": \"#eof\"\n      }, {\n        \"include\": \"#special-tokens\"\n      }, {\n        \"include\": \"#special-token-sequence\"\n      }, {\n        \"include\": \"#keyword\"\n      }, {\n        \"include\": \"#identifier\"\n      }]\n    },\n    \"line-comment\": {\n      \"patterns\": [{\n        \"match\": \"//+.*$\",\n        \"name\": \"comment.line.d\"\n      }]\n    },\n    \"linkage-attribute\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\bextern\\\\s*\\\\(\\\\s*C\\\\+\\\\+\\\\s*,\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.other.extern.cplusplus.begin.d\"\n          }\n        },\n        \"end\": \"\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.other.extern.cplusplus.end.d\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#identifier\"\n        }, {\n          \"include\": \"#comma\"\n        }]\n      }, {\n        \"begin\": \"\\\\bextern\\\\s*\\\\(\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.other.extern.begin.d\"\n          }\n        },\n        \"end\": \"\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.other.extern.end.d\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#linkage-type\"\n        }]\n      }]\n    },\n    \"linkage-type\": {\n      \"patterns\": [{\n        \"match\": \"C|C\\\\+\\\\+|D|Windows|Pascal|System\",\n        \"name\": \"storage.modifier.linkage-type.d\"\n      }]\n    },\n    \"logical-expression\": {\n      \"patterns\": [{\n        \"match\": \"\\\\|\\\\||&&|==|!=|!\",\n        \"name\": \"keyword.operator.logical.d\"\n      }]\n    },\n    \"member-function-attribute\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b(const|immutable|inout|shared)\\\\b\",\n        \"name\": \"storage.type.modifier.member-function-attribute\"\n      }]\n    },\n    \"mixin-declaration\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\bmixin\\\\s*\\\\(\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.mixin.begin.d\"\n          }\n        },\n        \"end\": \"\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.mixin.end.d\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#comment\"\n        }, {\n          \"include\": \"#expression\"\n        }, {\n          \"include\": \"#comma\"\n        }]\n      }]\n    },\n    \"mixin-expression\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\bmixin\\\\s*\\\\(\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.other.mixin.begin.d\"\n          }\n        },\n        \"end\": \"\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.other.mixin.end.d\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#comment\"\n        }, {\n          \"include\": \"#expression\"\n        }, {\n          \"include\": \"#comma\"\n        }]\n      }]\n    },\n    \"mixin-statement\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\bmixin\\\\s*\\\\(\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.control.mixin.begin.d\"\n          }\n        },\n        \"end\": \"\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.control.mixin.end.d\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#comment\"\n        }, {\n          \"include\": \"#expression\"\n        }, {\n          \"include\": \"#comma\"\n        }]\n      }]\n    },\n    \"mixin-template-declaration\": {\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"name\": \"storage.type.mixintemplate.d\"\n          },\n          \"2\": {\n            \"name\": \"entity.name.type.mixintemplate.d\"\n          }\n        },\n        \"match\": \"\\\\b(mixin\\\\s*template)(?:\\\\s+([A-Za-z_][\\\\w_\\\\d]*))?\\\\b\"\n      }]\n    },\n    \"module\": {\n      \"packages\": [{\n        \"import\": \"#module-declaration\"\n      }]\n    },\n    \"module-declaration\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\b(module)\\\\s+\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.package.module.d\"\n          }\n        },\n        \"end\": \";\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"meta.module.end.d\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#module-identifier\"\n        }, {\n          \"include\": \"#comment\"\n        }]\n      }]\n    },\n    \"module-identifier\": {\n      \"patterns\": [{\n        \"match\": \"([_a-zA-Z][_\\\\d\\\\w]*)(\\\\s*\\\\.\\\\s*[_a-zA-Z][_\\\\d\\\\w]*)*\",\n        \"name\": \"variable.parameter.module.d\"\n      }]\n    },\n    \"nesting-block-comment\": {\n      \"patterns\": [{\n        \"begin\": \"/((?!\\\\+/)\\\\+)+\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"comment.block.documentation.begin.d\"\n          }\n        },\n        \"end\": \"\\\\++/\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"comment.block.documentation.end.d\"\n          }\n        },\n        \"name\": \"comment.block.documentation.content.d\",\n        \"patterns\": [{\n          \"include\": \"#nesting-block-comment\"\n        }]\n      }]\n    },\n    \"new-expression\": {\n      \"patterns\": [{\n        \"match\": \"\\\\bnew\\\\s+\",\n        \"name\": \"keyword.other.new.d\"\n      }]\n    },\n    \"non-block-statement\": {\n      \"patterns\": [{\n        \"include\": \"#module-declaration\"\n      }, {\n        \"include\": \"#labeled-statement\"\n      }, {\n        \"include\": \"#if-statement\"\n      }, {\n        \"include\": \"#while-statement\"\n      }, {\n        \"include\": \"#do-statement\"\n      }, {\n        \"include\": \"#for-statement\"\n      }, {\n        \"include\": \"#static-foreach\"\n      }, {\n        \"include\": \"#static-foreach-reverse\"\n      }, {\n        \"include\": \"#foreach-statement\"\n      }, {\n        \"include\": \"#foreach-reverse-statement\"\n      }, {\n        \"include\": \"#switch-statement\"\n      }, {\n        \"include\": \"#final-switch-statement\"\n      }, {\n        \"include\": \"#case-statement\"\n      }, {\n        \"include\": \"#default-statement\"\n      }, {\n        \"include\": \"#continue-statement\"\n      }, {\n        \"include\": \"#break-statement\"\n      }, {\n        \"include\": \"#return-statement\"\n      }, {\n        \"include\": \"#goto-statement\"\n      }, {\n        \"include\": \"#with-statement\"\n      }, {\n        \"include\": \"#synchronized-statement\"\n      }, {\n        \"include\": \"#try-statement\"\n      }, {\n        \"include\": \"#catches\"\n      }, {\n        \"include\": \"#scope-guard-statement\"\n      }, {\n        \"include\": \"#throw-statement\"\n      }, {\n        \"include\": \"#finally-statement\"\n      }, {\n        \"include\": \"#asm-statement\"\n      }, {\n        \"include\": \"#pragma-statement\"\n      }, {\n        \"include\": \"#mixin-statement\"\n      }, {\n        \"include\": \"#conditional-statement\"\n      }, {\n        \"include\": \"#static-assert\"\n      }, {\n        \"include\": \"#deprecated-statement\"\n      }, {\n        \"include\": \"#unit-test\"\n      }, {\n        \"include\": \"#declaration-statement\"\n      }]\n    },\n    \"operands\": {\n      \"patterns\": [{\n        \"match\": \"\\\\?|:\",\n        \"name\": \"keyword.operator.ternary.assembly.d\"\n      }, {\n        \"match\": \"\\\\]|\\\\[\",\n        \"name\": \"keyword.operator.bracket.assembly.d\"\n      }, {\n        \"match\": \">>>|\\\\|\\\\||&&|==|!=|<=|>=|<<|>>|\\\\||\\\\^|&|<|>|\\\\+|-|\\\\*|/|%|~|!\",\n        \"name\": \"keyword.operator.assembly.d\"\n      }]\n    },\n    \"out-statement\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\bout\\\\s*\\\\(\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.control.out.begin.d\"\n          }\n        },\n        \"end\": \"\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.control.out.end.d\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#identifier\"\n        }]\n      }, {\n        \"match\": \"\\\\bout\\\\b\",\n        \"name\": \"keyword.control.out.d\"\n      }]\n    },\n    \"parentheses-expression\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\(\",\n        \"end\": \"\\\\)\",\n        \"patterns\": [{\n          \"include\": \"#expression\"\n        }]\n      }]\n    },\n    \"postblit\": {\n      \"patterns\": [{\n        \"match\": \"\\\\bthis\\\\s*\\\\(\\\\s*this\\\\s*\\\\)\\\\s\",\n        \"name\": \"entity.name.class.postblit.d\"\n      }]\n    },\n    \"pragma\": {\n      \"patterns\": [{\n        \"match\": \"\\\\bpragma\\\\s*\\\\(\\\\s*[_\\\\w][_\\\\d\\\\w]*\\\\s*\\\\)\",\n        \"name\": \"keyword.other.pragma.d\"\n      }, {\n        \"begin\": \"\\\\bpragma\\\\s*\\\\(\\\\s*[_\\\\w][_\\\\d\\\\w]*\\\\s*,\",\n        \"end\": \"\\\\)\",\n        \"name\": \"keyword.other.pragma.d\",\n        \"patterns\": [{\n          \"include\": \"#expression\"\n        }]\n      }, {\n        \"match\": \"^#!.+\",\n        \"name\": \"gfm.markup.header.preprocessor.script-tag.d\"\n      }]\n    },\n    \"pragma-statement\": {\n      \"patterns\": [{\n        \"include\": \"#pragma\"\n      }]\n    },\n    \"property\": {\n      \"patterns\": [{\n        \"match\": \"@(property|safe|trusted|system|disable|nogc)\\\\b\",\n        \"name\": \"entity.name.tag.property.d\"\n      }, {\n        \"include\": \"#user-defined-attribute\"\n      }]\n    },\n    \"protection-attribute\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b(private|package|protected|public|export)\\\\b\",\n        \"name\": \"keyword.other.protections.d\"\n      }]\n    },\n    \"register\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b(XMM0|XMM1|XMM2|XMM3|XMM4|XMM5|XMM6|XMM7|MM0|MM1|MM2|MM3|MM4|MM5|MM6|MM7|ST\\\\(0\\\\)|ST\\\\(1\\\\)|ST\\\\(2\\\\)|ST\\\\(3\\\\)|ST\\\\(4\\\\)|ST\\\\(5\\\\)|ST\\\\(6\\\\)|ST\\\\(7\\\\)|ST|TR1|TR2|TR3|TR4|TR5|TR6|TR7|DR0|DR1|DR2|DR3|DR4|DR5|DR6|DR7|CR0|CR2|CR3|CR4|EAX|EBX|ECX|EDX|EBP|ESP|EDI|ESI|AL|AH|AX|BL|BH|BX|CL|CH|CX|DL|DH|DX|BP|SP|DI|SI|ES|CS|SS|DS|GS|FS)\\\\b\",\n        \"name\": \"storage.type.assembly.register.d\"\n      }]\n    },\n    \"register-64\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b(RAX|RBX|RCX|RDX|BPL|RBP|SPL|RSP|DIL|RDI|SIL|RSI|R8B|R8W|R8D|R8|R9B|R9W|R9D|R9|R10B|R10W|R10D|R10|R11B|R11W|R11D|R11|R12B|R12W|R12D|R12|R13B|R13W|R13D|R13|R14B|R14W|R14D|R14|R15B|R15W|R15D|R15|XMM8|XMM9|XMM10|XMM11|XMM12|XMM13|XMM14|XMM15|YMM0|YMM1|YMM2|YMM3|YMM4|YMM5|YMM6|YMM7|YMM8|YMM9|YMM10|YMM11|YMM12|YMM13|YMM14|YMM15)\\\\b\",\n        \"name\": \"storage.type.assembly.register-64.d\"\n      }]\n    },\n    \"rel-expression\": {\n      \"patterns\": [{\n        \"match\": \"!<>=|!<>|<>=|!>=|!<=|<=|>=|<>|!>|!<|<|>\",\n        \"name\": \"keyword.operator.rel.d\"\n      }]\n    },\n    \"return-statement\": {\n      \"patterns\": [{\n        \"match\": \"\\\\breturn\\\\b\",\n        \"name\": \"keyword.control.return.d\"\n      }]\n    },\n    \"scope-guard-statement\": {\n      \"patterns\": [{\n        \"match\": \"\\\\bscope\\\\s*\\\\((exit|success|failure)\\\\)\",\n        \"name\": \"keyword.control.scope.d\"\n      }]\n    },\n    \"semi-colon\": {\n      \"patterns\": [{\n        \"match\": \";\",\n        \"name\": \"meta.statement.end.d\"\n      }]\n    },\n    \"shared-static-constructor\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b(shared\\\\s+)?static\\\\s+this\\\\s*\\\\(\\\\s*\\\\)\",\n        \"name\": \"entity.name.class.constructor.shared-static.d\"\n      }, {\n        \"include\": \"#function-body\"\n      }]\n    },\n    \"shared-static-destructor\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b(shared\\\\s+)?static\\\\s+~this\\\\s*\\\\(\\\\s*\\\\)\",\n        \"name\": \"entity.name.class.destructor.static.d\"\n      }]\n    },\n    \"shift-expression\": {\n      \"patterns\": [{\n        \"match\": \"<<|>>|>>>\",\n        \"name\": \"keyword.operator.shift.d\"\n      }, {\n        \"include\": \"#add-expression\"\n      }]\n    },\n    \"special-keyword\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b(__FILE__|__FILE_FULL_PATH__|__MODULE__|__LINE__|__FUNCTION__|__PRETTY_FUNCTION__)\\\\b\",\n        \"name\": \"constant.language.special-keyword.d\"\n      }]\n    },\n    \"special-token-sequence\": {\n      \"patterns\": [{\n        \"match\": \"#\\\\s*line.*\",\n        \"name\": \"gfm.markup.italic.special-token-sequence.d\"\n      }]\n    },\n    \"special-tokens\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b(__DATE__|__TIME__|__TIMESTAMP__|__VENDOR__|__VERSION__)\\\\b\",\n        \"name\": \"gfm.markup.raw.special-tokens.d\"\n      }]\n    },\n    \"statement\": {\n      \"patterns\": [{\n        \"include\": \"#non-block-statement\"\n      }, {\n        \"include\": \"#semi-colon\"\n      }]\n    },\n    \"static-assert\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\bstatic\\\\s+assert\\\\b\\\\s*\\\\(\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.other.static-assert.begin.d\"\n          }\n        },\n        \"end\": \"\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.other.static-assert.end.d\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#expression\"\n        }]\n      }]\n    },\n    \"static-foreach\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\b(static\\\\s+foreach)\\\\b\\\\s*\",\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.control.static-foreach.d\"\n          }\n        },\n        \"end\": \"(?<=\\\\))\",\n        \"patterns\": [{\n          \"begin\": \"\\\\(\",\n          \"end\": \"\\\\)\",\n          \"patterns\": [{\n            \"match\": \";\",\n            \"name\": \"keyword.operator.semi-colon.d\"\n          }, {\n            \"include\": \"source.d\"\n          }]\n        }]\n      }]\n    },\n    \"static-foreach-reverse\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\b(static\\\\s+foreach_reverse)\\\\b\\\\s*\",\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.control.static-foreach.d\"\n          }\n        },\n        \"end\": \"(?<=\\\\))\",\n        \"patterns\": [{\n          \"begin\": \"\\\\(\",\n          \"end\": \"\\\\)\",\n          \"patterns\": [{\n            \"match\": \";\",\n            \"name\": \"keyword.operator.semi-colon.d\"\n          }, {\n            \"include\": \"source.d\"\n          }]\n        }]\n      }]\n    },\n    \"static-if-condition\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\bstatic\\\\s+if\\\\b\\\\s*\\\\(\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.control.static-if.begin.d\"\n          }\n        },\n        \"end\": \"\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.control.static-if.end.d\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#comment\"\n        }, {\n          \"include\": \"#expression\"\n        }]\n      }]\n    },\n    \"storage-class\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b(deprecated|enum|static|extern|abstract|final|override|synchronized|auto|scope|const|immutable|inout|shared|__gshared|nothrow|pure|ref)\\\\b\",\n        \"name\": \"storage.class.d\"\n      }, {\n        \"include\": \"#linkage-attribute\"\n      }, {\n        \"include\": \"#align-attribute\"\n      }, {\n        \"include\": \"#property\"\n      }]\n    },\n    \"string-literal\": {\n      \"patterns\": [{\n        \"include\": \"#wysiwyg-string\"\n      }, {\n        \"include\": \"#alternate-wysiwyg-string\"\n      }, {\n        \"include\": \"#hex-string\"\n      }, {\n        \"include\": \"#arbitrary-delimited-string\"\n      }, {\n        \"include\": \"#delimited-string\"\n      }, {\n        \"include\": \"#double-quoted-string\"\n      }, {\n        \"include\": \"#token-string\"\n      }]\n    },\n    \"struct-declaration\": {\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"name\": \"storage.type.struct.d\"\n          },\n          \"2\": {\n            \"name\": \"entity.name.type.struct.d\"\n          }\n        },\n        \"match\": \"\\\\b(struct)(?:\\\\s+([A-Za-z_][\\\\w_\\\\d]*))?\\\\b\"\n      }]\n    },\n    \"switch-statement\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\b(switch)\\\\b\\\\s*\",\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.control.switch.d\"\n          }\n        },\n        \"end\": \"(?<=\\\\))\",\n        \"patterns\": [{\n          \"begin\": \"\\\\(\",\n          \"end\": \"\\\\)\",\n          \"patterns\": [{\n            \"include\": \"source.d\"\n          }]\n        }]\n      }]\n    },\n    \"synchronized-statement\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\b(synchronized)\\\\b\\\\s*(?=\\\\()\",\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.control.synchronized.d\"\n          }\n        },\n        \"end\": \"(?<=\\\\))\",\n        \"patterns\": [{\n          \"begin\": \"\\\\(\",\n          \"end\": \"\\\\)\",\n          \"patterns\": [{\n            \"include\": \"source.d\"\n          }]\n        }]\n      }]\n    },\n    \"template-declaration\": {\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"name\": \"storage.type.template.d\"\n          },\n          \"2\": {\n            \"name\": \"entity.name.type.template.d\"\n          }\n        },\n        \"match\": \"\\\\b(template)(?:\\\\s+([A-Za-z_][\\\\w_\\\\d]*))?\\\\b\"\n      }]\n    },\n    \"throw-statement\": {\n      \"patterns\": [{\n        \"match\": \"\\\\bthrow\\\\b\",\n        \"name\": \"keyword.control.throw.d\"\n      }]\n    },\n    \"token-string\": {\n      \"begin\": \"q\\\\{\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"string.quoted.token.d\"\n        }\n      },\n      \"end\": \"\\\\}[cdw]?\",\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"string.quoted.token.d\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#token-string-content\"\n      }]\n    },\n    \"token-string-content\": {\n      \"patterns\": [{\n        \"begin\": \"{\",\n        \"end\": \"}\",\n        \"patterns\": [{\n          \"include\": \"#token-string-content\"\n        }]\n      }, {\n        \"include\": \"#comment\"\n      }, {\n        \"include\": \"#tokens\"\n      }]\n    },\n    \"tokens\": {\n      \"patterns\": [{\n        \"include\": \"#string-literal\"\n      }, {\n        \"include\": \"#character-literal\"\n      }, {\n        \"include\": \"#integer-literal\"\n      }, {\n        \"include\": \"#float-literal\"\n      }, {\n        \"include\": \"#keyword\"\n      }, {\n        \"match\": \"~=|~|>>>|>>=|>>|>=|>|=>|==|=|<>|<=|<<|<|%=|%|#|&=|&&|&|\\\\$|\\\\|=|\\\\|\\\\||\\\\||\\\\+=|\\\\+\\\\+|\\\\+|\\\\^=|\\\\^\\\\^=|\\\\^\\\\^|\\\\^|\\\\*=|\\\\*|\\\\}|\\\\{|\\\\]|\\\\[|\\\\)|\\\\(|\\\\.\\\\.\\\\.|\\\\.\\\\.|\\\\.|\\\\?|\\\\!>=|\\\\!>|\\\\!=|\\\\!<>=|\\\\!<>|\\\\!<=|\\\\!<|\\\\!|/=|/|@|:|;|,|-=|--|-\",\n        \"name\": \"meta.lexical.token.symbolic.d\"\n      }, {\n        \"include\": \"#identifier\"\n      }]\n    },\n    \"traits-argument\": {\n      \"patterns\": [{\n        \"include\": \"#expression\"\n      }, {\n        \"include\": \"#type\"\n      }]\n    },\n    \"traits-arguments\": {\n      \"patterns\": [{\n        \"include\": \"#traits-argument\"\n      }, {\n        \"include\": \"#comma\"\n      }]\n    },\n    \"traits-expression\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\b__traits\\\\s*\\\\(\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.other.traits.begin.d\"\n          }\n        },\n        \"end\": \"\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.other.traits.end.d\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#traits-keyword\"\n        }, {\n          \"include\": \"#comma\"\n        }, {\n          \"include\": \"#traits-argument\"\n        }]\n      }]\n    },\n    \"traits-keyword\": {\n      \"patterns\": [{\n        \"match\": \"isAbstractClass|isArithmetic|isAssociativeArray|isFinalClass|isPOD|isNested|isFloating|isIntegral|isScalar|isStaticArray|isUnsigned|isVirtualFunction|isVirtualMethod|isAbstractFunction|isFinalFunction|isStaticFunction|isOverrideFunction|isRef|isOut|isLazy|hasMember|identifier|getAliasThis|getAttributes|getMember|getOverloads|getProtection|getVirtualFunctions|getVirtualMethods|getUnitTests|parent|classInstanceSize|getVirtualIndex|allMembers|derivedMembers|isSame|compiles\",\n        \"name\": \"support.constant.traits-keyword.d\"\n      }]\n    },\n    \"try-statement\": {\n      \"patterns\": [{\n        \"match\": \"\\\\btry\\\\b\",\n        \"name\": \"keyword.control.try.d\"\n      }]\n    },\n    \"type\": {\n      \"patterns\": [{\n        \"include\": \"#typeof\"\n      }, {\n        \"include\": \"#base-type\"\n      }, {\n        \"include\": \"#type-ctor\"\n      }, {\n        \"begin\": \"!\\\\(\",\n        \"end\": \"\\\\)\",\n        \"patterns\": [{\n          \"include\": \"#type\"\n        }, {\n          \"include\": \"#expression\"\n        }]\n      }]\n    },\n    \"type-ctor\": {\n      \"patterns\": [{\n        \"match\": \"(const|immutable|inout|shared)\\\\b\",\n        \"name\": \"storage.type.modifier.d\"\n      }]\n    },\n    \"type-specialization\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b(struct|union|class|interface|enum|function|delegate|super|const|immutable|inout|shared|return|__parameters)\\\\b\",\n        \"name\": \"keyword.other.storage.type-specialization.d\"\n      }]\n    },\n    \"typeid-expression\": {\n      \"patterns\": [{\n        \"match\": \"\\\\btypeid\\\\s*(?=\\\\()\",\n        \"name\": \"keyword.other.typeid.d\"\n      }]\n    },\n    \"typeof\": {\n      \"begin\": \"typeof\\\\s*\\\\(\",\n      \"end\": \"\\\\)\",\n      \"name\": \"keyword.token.typeof.d\",\n      \"patterns\": [{\n        \"match\": \"return\",\n        \"name\": \"keyword.control.return.d\"\n      }, {\n        \"include\": \"#expression\"\n      }]\n    },\n    \"union-declaration\": {\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"name\": \"storage.type.union.d\"\n          },\n          \"2\": {\n            \"name\": \"entity.name.type.union.d\"\n          }\n        },\n        \"match\": \"\\\\b(union)(?:\\\\s+([A-Za-z_][\\\\w_\\\\d]*))?\\\\b\"\n      }]\n    },\n    \"user-defined-attribute\": {\n      \"patterns\": [{\n        \"match\": \"@([_\\\\w][_\\\\d\\\\w]*)\\\\b\",\n        \"name\": \"entity.name.tag.user-defined-property.d\"\n      }, {\n        \"begin\": \"@([_\\\\w][_\\\\d\\\\w]*)?\\\\(\",\n        \"end\": \"\\\\)\",\n        \"name\": \"entity.name.tag.user-defined-property.d\",\n        \"patterns\": [{\n          \"include\": \"#expression\"\n        }]\n      }]\n    },\n    \"version-condition\": {\n      \"patterns\": [{\n        \"match\": \"\\\\bversion\\\\s*\\\\(\\\\s*unittest\\\\s*\\\\)\",\n        \"name\": \"keyword.other.version.unittest.d\"\n      }, {\n        \"match\": \"\\\\bversion\\\\s*\\\\(\\\\s*assert\\\\s*\\\\)\",\n        \"name\": \"keyword.other.version.assert.d\"\n      }, {\n        \"begin\": \"\\\\bversion\\\\s*\\\\(\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.other.version.identifier.begin.d\"\n          }\n        },\n        \"end\": \"\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.other.version.identifer.end.d\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#integer-literal\"\n        }, {\n          \"include\": \"#identifier\"\n        }]\n      }, {\n        \"include\": \"#version-specification\"\n      }]\n    },\n    \"version-specification\": {\n      \"patterns\": [{\n        \"match\": \"\\\\bversion\\\\b\\\\s*(?==)\",\n        \"name\": \"keyword.other.version-specification.d\"\n      }]\n    },\n    \"void-initializer\": {\n      \"patterns\": [{\n        \"match\": \"\\\\bvoid\\\\b\",\n        \"name\": \"support.type.void.d\"\n      }]\n    },\n    \"while-statement\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\b(while)\\\\b\\\\s*\",\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.control.while.d\"\n          }\n        },\n        \"end\": \"(?<=\\\\))\",\n        \"patterns\": [{\n          \"begin\": \"\\\\(\",\n          \"end\": \"\\\\)\",\n          \"patterns\": [{\n            \"include\": \"source.d\"\n          }]\n        }]\n      }]\n    },\n    \"with-statement\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\b(with)\\\\b\\\\s*(?=\\\\()\",\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.control.with.d\"\n          }\n        },\n        \"end\": \"(?<=\\\\))\",\n        \"patterns\": [{\n          \"begin\": \"\\\\(\",\n          \"end\": \"\\\\)\",\n          \"patterns\": [{\n            \"include\": \"source.d\"\n          }]\n        }]\n      }]\n    },\n    \"wysiwyg-characters\": {\n      \"patterns\": [{\n        \"include\": \"#character\"\n      }, {\n        \"include\": \"#end-of-line\"\n      }]\n    },\n    \"wysiwyg-string\": {\n      \"patterns\": [{\n        \"begin\": 'r\\\\\"',\n        \"end\": '\\\\\"[cwd]?',\n        \"name\": \"string.wysiwyg-string.d\",\n        \"patterns\": [{\n          \"include\": \"#wysiwyg-characters\"\n        }]\n      }]\n    }\n  },\n  \"scopeName\": \"source.d\"\n});\nvar d = [lang];\nexport { d as default };"],
  "mappings": "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,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,GAAG;AAAA,QACD,SAAS;AAAA,QACT,QAAQ;AAAA,MACV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",
  "names": []
}
