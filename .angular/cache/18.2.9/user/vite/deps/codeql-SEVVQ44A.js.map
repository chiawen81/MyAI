{
  "version": 3,
  "sources": ["../../../../../../node_modules/shiki/dist/langs/codeql.mjs"],
  "sourcesContent": ["const lang = Object.freeze({\n  \"displayName\": \"CodeQL\",\n  \"fileTypes\": [\"ql\", \"qll\"],\n  \"name\": \"codeql\",\n  \"patterns\": [{\n    \"include\": \"#module-member\"\n  }],\n  \"repository\": {\n    \"abstract\": {\n      \"match\": \"(?x)\\\\b(?:abstract)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"storage.modifier.abstract.ql\"\n    },\n    \"additional\": {\n      \"match\": \"(?x)\\\\b(?:additional)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"storage.modifier.additional.ql\"\n    },\n    \"and\": {\n      \"match\": \"(?x)\\\\b(?:and)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.other.and.ql\"\n    },\n    \"annotation\": {\n      \"patterns\": [{\n        \"include\": \"#bindingset-annotation\"\n      }, {\n        \"include\": \"#language-annotation\"\n      }, {\n        \"include\": \"#pragma-annotation\"\n      }, {\n        \"include\": \"#annotation-keyword\"\n      }]\n    },\n    \"annotation-keyword\": {\n      \"patterns\": [{\n        \"include\": \"#abstract\"\n      }, {\n        \"include\": \"#additional\"\n      }, {\n        \"include\": \"#bindingset\"\n      }, {\n        \"include\": \"#cached\"\n      }, {\n        \"include\": \"#default\"\n      }, {\n        \"include\": \"#deprecated\"\n      }, {\n        \"include\": \"#external\"\n      }, {\n        \"include\": \"#final\"\n      }, {\n        \"include\": \"#language\"\n      }, {\n        \"include\": \"#library\"\n      }, {\n        \"include\": \"#override\"\n      }, {\n        \"include\": \"#pragma\"\n      }, {\n        \"include\": \"#private\"\n      }, {\n        \"include\": \"#query\"\n      }, {\n        \"include\": \"#signature\"\n      }, {\n        \"include\": \"#transient\"\n      }]\n    },\n    \"any\": {\n      \"match\": \"(?x)\\\\b(?:any)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.quantifier.any.ql\"\n    },\n    \"arithmetic-operator\": {\n      \"match\": \"(?x)\\\\+|-|\\\\*|/|%\",\n      \"name\": \"keyword.operator.arithmetic.ql\"\n    },\n    \"as\": {\n      \"match\": \"(?x)\\\\b(?:as)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.other.as.ql\"\n    },\n    \"asc\": {\n      \"match\": \"(?x)\\\\b(?:asc)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.order.asc.ql\"\n    },\n    \"at-lower-id\": {\n      \"match\": \"(?x)@[a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_])))\"\n    },\n    \"avg\": {\n      \"match\": \"(?x)\\\\b(?:avg)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.aggregate.avg.ql\"\n    },\n    \"bindingset\": {\n      \"match\": \"(?x)\\\\b(?:bindingset)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"storage.modifier.bindingset.ql\"\n    },\n    \"bindingset-annotation\": {\n      \"begin\": \"(?x)((?:\\\\b(?:bindingset)(?:(?!(?:[0-9A-Za-z_])))))\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#bindingset\"\n          }]\n        }\n      },\n      \"end\": \"(?x)(?! (?:\\\\s | $ | (?:// | /\\\\*)) | \\\\[ ) | (?<=\\\\])\",\n      \"name\": \"meta.block.bindingset-annotation.ql\",\n      \"patterns\": [{\n        \"include\": \"#bindingset-annotation-body\"\n      }, {\n        \"include\": \"#non-context-sensitive\"\n      }]\n    },\n    \"bindingset-annotation-body\": {\n      \"begin\": \"(?x)((?:\\\\[))\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#open-bracket\"\n          }]\n        }\n      },\n      \"end\": \"(?x)((?:\\\\]))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#close-bracket\"\n          }]\n        }\n      },\n      \"name\": \"meta.block.bindingset-annotation-body.ql\",\n      \"patterns\": [{\n        \"include\": \"#non-context-sensitive\"\n      }, {\n        \"match\": \"(?x)(?:\\\\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))\",\n        \"name\": \"variable.parameter.ql\"\n      }]\n    },\n    \"boolean\": {\n      \"match\": \"(?x)\\\\b(?:boolean)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.type.boolean.ql\"\n    },\n    \"by\": {\n      \"match\": \"(?x)\\\\b(?:by)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.order.by.ql\"\n    },\n    \"cached\": {\n      \"match\": \"(?x)\\\\b(?:cached)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"storage.modifier.cached.ql\"\n    },\n    \"class\": {\n      \"match\": \"(?x)\\\\b(?:class)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.other.class.ql\"\n    },\n    \"class-body\": {\n      \"begin\": \"(?x)((?:\\\\{))\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#open-brace\"\n          }]\n        }\n      },\n      \"end\": \"(?x)((?:\\\\}))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#close-brace\"\n          }]\n        }\n      },\n      \"name\": \"meta.block.class-body.ql\",\n      \"patterns\": [{\n        \"include\": \"#class-member\"\n      }]\n    },\n    \"class-declaration\": {\n      \"begin\": \"(?x)((?:\\\\b(?:class)(?:(?!(?:[0-9A-Za-z_])))))\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#class\"\n          }]\n        }\n      },\n      \"end\": \"(?x)(?<= \\\\} | ; )\",\n      \"name\": \"meta.block.class-declaration.ql\",\n      \"patterns\": [{\n        \"include\": \"#class-body\"\n      }, {\n        \"include\": \"#extends-clause\"\n      }, {\n        \"include\": \"#non-context-sensitive\"\n      }, {\n        \"match\": \"(?x)(?:\\\\b [A-Z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))\",\n        \"name\": \"entity.name.type.class.ql\"\n      }]\n    },\n    \"class-member\": {\n      \"patterns\": [{\n        \"include\": \"#predicate-or-field-declaration\"\n      }, {\n        \"include\": \"#annotation\"\n      }, {\n        \"include\": \"#non-context-sensitive\"\n      }]\n    },\n    \"close-angle\": {\n      \"match\": \"(?x)>\",\n      \"name\": \"punctuation.anglebracket.close.ql\"\n    },\n    \"close-brace\": {\n      \"match\": \"(?x)\\\\}\",\n      \"name\": \"punctuation.curlybrace.close.ql\"\n    },\n    \"close-bracket\": {\n      \"match\": \"(?x)\\\\]\",\n      \"name\": \"punctuation.squarebracket.close.ql\"\n    },\n    \"close-paren\": {\n      \"match\": \"(?x)\\\\)\",\n      \"name\": \"punctuation.parenthesis.close.ql\"\n    },\n    \"comma\": {\n      \"match\": \"(?x),\",\n      \"name\": \"punctuation.separator.comma.ql\"\n    },\n    \"comment\": {\n      \"patterns\": [{\n        \"begin\": \"(?x)/\\\\*\\\\*\",\n        \"end\": \"(?x)\\\\*/\",\n        \"name\": \"comment.block.documentation.ql\",\n        \"patterns\": [{\n          \"begin\": \"(?x)(?<=/\\\\*\\\\*)([^*]|\\\\*(?!/))*$\",\n          \"patterns\": [{\n            \"match\": \"(?x)\\\\G\\\\s* (@\\\\S+)\",\n            \"name\": \"keyword.tag.ql\"\n          }],\n          \"while\": \"(?x)(^|\\\\G)\\\\s*([^*]|\\\\*(?!/))(?=([^*]|[*](?!/))*$)\"\n        }]\n      }, {\n        \"begin\": \"(?x)/\\\\*\",\n        \"end\": \"(?x)\\\\*/\",\n        \"name\": \"comment.block.ql\"\n      }, {\n        \"match\": \"(?x)//.*$\",\n        \"name\": \"comment.line.double-slash.ql\"\n      }]\n    },\n    \"comment-start\": {\n      \"match\": \"(?x)// | /\\\\*\"\n    },\n    \"comparison-operator\": {\n      \"match\": \"(?x)=|\\\\!\\\\=\",\n      \"name\": \"keyword.operator.comparison.ql\"\n    },\n    \"concat\": {\n      \"match\": \"(?x)\\\\b(?:concat)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.aggregate.concat.ql\"\n    },\n    \"count\": {\n      \"match\": \"(?x)\\\\b(?:count)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.aggregate.count.ql\"\n    },\n    \"date\": {\n      \"match\": \"(?x)\\\\b(?:date)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.type.date.ql\"\n    },\n    \"default\": {\n      \"match\": \"(?x)\\\\b(?:default)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"storage.modifier.default.ql\"\n    },\n    \"deprecated\": {\n      \"match\": \"(?x)\\\\b(?:deprecated)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"storage.modifier.deprecated.ql\"\n    },\n    \"desc\": {\n      \"match\": \"(?x)\\\\b(?:desc)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.order.desc.ql\"\n    },\n    \"dont-care\": {\n      \"match\": \"(?x)\\\\b(?:_)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"variable.language.dont-care.ql\"\n    },\n    \"dot\": {\n      \"match\": \"(?x)\\\\.\",\n      \"name\": \"punctuation.accessor.ql\"\n    },\n    \"dotdot\": {\n      \"match\": \"(?x)\\\\.\\\\.\",\n      \"name\": \"punctuation.operator.range.ql\"\n    },\n    \"else\": {\n      \"match\": \"(?x)\\\\b(?:else)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.other.else.ql\"\n    },\n    \"end-of-as-clause\": {\n      \"match\": \"(?x)(?: (?<=(?:[0-9A-Za-z_])) (?!(?:[0-9A-Za-z_])) (?<!(?<!(?:[0-9A-Za-z_]))as)) | (?=\\\\s* (?!(?:// | /\\\\*) | (?:\\\\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))) \\\\S) | (?=\\\\s* (?:(?:(?:\\\\b(?:_)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:and)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:any)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:as)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:asc)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:avg)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:boolean)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:by)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:class)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:concat)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:count)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:date)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:desc)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:else)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:exists)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:extends)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:false)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:float)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:forall)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:forex)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:from)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:if)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:implies)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:import)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:in)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:instanceof)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:int)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:max)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:min)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:module)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:newtype)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:none)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:not)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:or)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:order)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:predicate)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:rank)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:result)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:select)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:strictconcat)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:strictcount)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:strictsum)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:string)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:sum)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:super)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:then)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:this)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:true)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:unique)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:where)(?:(?!(?:[0-9A-Za-z_])))))))\"\n    },\n    \"end-of-id\": {\n      \"match\": \"(?x)(?!(?:[0-9A-Za-z_]))\"\n    },\n    \"exists\": {\n      \"match\": \"(?x)\\\\b(?:exists)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.quantifier.exists.ql\"\n    },\n    \"expr-as-clause\": {\n      \"begin\": \"(?x)((?:\\\\b(?:as)(?:(?!(?:[0-9A-Za-z_])))))\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#as\"\n          }]\n        }\n      },\n      \"end\": \"(?x)(?:(?: (?<=(?:[0-9A-Za-z_])) (?!(?:[0-9A-Za-z_])) (?<!(?<!(?:[0-9A-Za-z_]))as)) | (?=\\\\s* (?!(?:// | /\\\\*) | (?:\\\\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))) \\\\S) | (?=\\\\s* (?:(?:(?:\\\\b(?:_)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:and)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:any)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:as)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:asc)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:avg)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:boolean)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:by)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:class)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:concat)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:count)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:date)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:desc)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:else)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:exists)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:extends)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:false)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:float)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:forall)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:forex)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:from)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:if)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:implies)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:import)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:in)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:instanceof)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:int)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:max)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:min)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:module)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:newtype)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:none)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:not)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:or)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:order)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:predicate)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:rank)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:result)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:select)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:strictconcat)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:strictcount)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:strictsum)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:string)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:sum)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:super)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:then)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:this)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:true)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:unique)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:where)(?:(?!(?:[0-9A-Za-z_]))))))))\",\n      \"name\": \"meta.block.expr-as-clause.ql\",\n      \"patterns\": [{\n        \"include\": \"#non-context-sensitive\"\n      }, {\n        \"match\": \"(?x)(?:\\\\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))\",\n        \"name\": \"variable.other.ql\"\n      }]\n    },\n    \"extends\": {\n      \"match\": \"(?x)\\\\b(?:extends)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.other.extends.ql\"\n    },\n    \"extends-clause\": {\n      \"begin\": \"(?x)((?:\\\\b(?:extends)(?:(?!(?:[0-9A-Za-z_])))))\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#extends\"\n          }]\n        }\n      },\n      \"end\": \"(?x)(?= \\\\{ )\",\n      \"name\": \"meta.block.extends-clause.ql\",\n      \"patterns\": [{\n        \"include\": \"#non-context-sensitive\"\n      }, {\n        \"match\": \"(?x)(?:\\\\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))|(?:@[a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))\",\n        \"name\": \"entity.name.type.ql\"\n      }]\n    },\n    \"external\": {\n      \"match\": \"(?x)\\\\b(?:external)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"storage.modifier.external.ql\"\n    },\n    \"false\": {\n      \"match\": \"(?x)\\\\b(?:false)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"constant.language.boolean.false.ql\"\n    },\n    \"final\": {\n      \"match\": \"(?x)\\\\b(?:final)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"storage.modifier.final.ql\"\n    },\n    \"float\": {\n      \"match\": \"(?x)\\\\b(?:float)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.type.float.ql\"\n    },\n    \"float-literal\": {\n      \"match\": \"(?x)-?[0-9]+\\\\.[0-9]+(?![0-9])\",\n      \"name\": \"constant.numeric.decimal.ql\"\n    },\n    \"forall\": {\n      \"match\": \"(?x)\\\\b(?:forall)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.quantifier.forall.ql\"\n    },\n    \"forex\": {\n      \"match\": \"(?x)\\\\b(?:forex)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.quantifier.forex.ql\"\n    },\n    \"from\": {\n      \"match\": \"(?x)\\\\b(?:from)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.other.from.ql\"\n    },\n    \"from-section\": {\n      \"begin\": \"(?x)((?:\\\\b(?:from)(?:(?!(?:[0-9A-Za-z_])))))\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#from\"\n          }]\n        }\n      },\n      \"end\": \"(?x)(?= (?:\\\\b(?:select)(?:(?!(?:[0-9A-Za-z_])))) | (?:\\\\b(?:where)(?:(?!(?:[0-9A-Za-z_])))) )\",\n      \"name\": \"meta.block.from-section.ql\",\n      \"patterns\": [{\n        \"include\": \"#non-context-sensitive\"\n      }, {\n        \"match\": \"(?x)(?:\\\\b [A-Z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))(?=\\\\s*(?:,|(?:\\\\b(?:where)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:select)(?:(?!(?:[0-9A-Za-z_]))))|$))\",\n        \"name\": \"variable.parameter.ql\"\n      }, {\n        \"include\": \"#module-qualifier\"\n      }, {\n        \"match\": \"(?x)(?:\\\\b [A-Z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))|(?:@[a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))\",\n        \"name\": \"entity.name.type.ql\"\n      }, {\n        \"match\": \"(?x)(?:\\\\b [a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))\",\n        \"name\": \"variable.parameter.ql\"\n      }]\n    },\n    \"id-character\": {\n      \"match\": \"(?x)[0-9A-Za-z_]\"\n    },\n    \"if\": {\n      \"match\": \"(?x)\\\\b(?:if)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.other.if.ql\"\n    },\n    \"implements\": {\n      \"match\": \"(?x)\\\\b(?:implements)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.other.implements.ql\"\n    },\n    \"implements-clause\": {\n      \"begin\": \"(?x)((?:\\\\b(?:implements)(?:(?!(?:[0-9A-Za-z_])))))\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#implements\"\n          }]\n        }\n      },\n      \"end\": \"(?x)(?= \\\\{ )\",\n      \"name\": \"meta.block.implements-clause.ql\",\n      \"patterns\": [{\n        \"include\": \"#non-context-sensitive\"\n      }, {\n        \"match\": \"(?x)(?:\\\\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))|(?:@[a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))\",\n        \"name\": \"entity.name.type.ql\"\n      }]\n    },\n    \"implies\": {\n      \"match\": \"(?x)\\\\b(?:implies)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.other.implies.ql\"\n    },\n    \"import\": {\n      \"match\": \"(?x)\\\\b(?:import)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.other.import.ql\"\n    },\n    \"import-as-clause\": {\n      \"begin\": \"(?x)((?:\\\\b(?:as)(?:(?!(?:[0-9A-Za-z_])))))\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#as\"\n          }]\n        }\n      },\n      \"end\": \"(?x)(?:(?: (?<=(?:[0-9A-Za-z_])) (?!(?:[0-9A-Za-z_])) (?<!(?<!(?:[0-9A-Za-z_]))as)) | (?=\\\\s* (?!(?:// | /\\\\*) | (?:\\\\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))) \\\\S) | (?=\\\\s* (?:(?:(?:\\\\b(?:_)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:and)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:any)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:as)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:asc)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:avg)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:boolean)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:by)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:class)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:concat)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:count)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:date)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:desc)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:else)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:exists)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:extends)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:false)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:float)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:forall)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:forex)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:from)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:if)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:implies)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:import)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:in)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:instanceof)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:int)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:max)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:min)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:module)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:newtype)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:none)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:not)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:or)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:order)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:predicate)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:rank)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:result)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:select)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:strictconcat)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:strictcount)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:strictsum)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:string)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:sum)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:super)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:then)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:this)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:true)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:unique)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:where)(?:(?!(?:[0-9A-Za-z_]))))))))\",\n      \"name\": \"meta.block.import-as-clause.ql\",\n      \"patterns\": [{\n        \"include\": \"#non-context-sensitive\"\n      }, {\n        \"match\": \"(?x)(?:\\\\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))\",\n        \"name\": \"entity.name.type.namespace.ql\"\n      }]\n    },\n    \"import-directive\": {\n      \"begin\": \"(?x)((?:\\\\b(?:import)(?:(?!(?:[0-9A-Za-z_])))))\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#import\"\n          }]\n        }\n      },\n      \"end\": \"(?x)(?<!\\\\bimport)(?<=(?:\\\\>)|[A-Za-z0-9_]) (?!\\\\s*(\\\\.|\\\\:\\\\:|\\\\,|(?:<)))\",\n      \"name\": \"meta.block.import-directive.ql\",\n      \"patterns\": [{\n        \"include\": \"#instantiation-args\"\n      }, {\n        \"include\": \"#non-context-sensitive\"\n      }, {\n        \"match\": \"(?x)(?:\\\\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))\",\n        \"name\": \"entity.name.type.namespace.ql\"\n      }]\n    },\n    \"in\": {\n      \"match\": \"(?x)\\\\b(?:in)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.other.in.ql\"\n    },\n    \"instanceof\": {\n      \"match\": \"(?x)\\\\b(?:instanceof)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.other.instanceof.ql\"\n    },\n    \"instantiation-args\": {\n      \"begin\": \"(?x)((?:<))\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#open-angle\"\n          }]\n        }\n      },\n      \"end\": \"(?x)((?:>))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#close-angle\"\n          }]\n        }\n      },\n      \"name\": \"meta.type.parameters.ql\",\n      \"patterns\": [{\n        \"include\": \"#instantiation-args\"\n      }, {\n        \"include\": \"#non-context-sensitive\"\n      }, {\n        \"match\": \"(?x)(?:\\\\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))\",\n        \"name\": \"entity.name.type.namespace.ql\"\n      }]\n    },\n    \"int\": {\n      \"match\": \"(?x)\\\\b(?:int)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.type.int.ql\"\n    },\n    \"int-literal\": {\n      \"match\": \"(?x)-?[0-9]+(?![0-9])\",\n      \"name\": \"constant.numeric.decimal.ql\"\n    },\n    \"keyword\": {\n      \"patterns\": [{\n        \"include\": \"#dont-care\"\n      }, {\n        \"include\": \"#and\"\n      }, {\n        \"include\": \"#any\"\n      }, {\n        \"include\": \"#as\"\n      }, {\n        \"include\": \"#asc\"\n      }, {\n        \"include\": \"#avg\"\n      }, {\n        \"include\": \"#boolean\"\n      }, {\n        \"include\": \"#by\"\n      }, {\n        \"include\": \"#class\"\n      }, {\n        \"include\": \"#concat\"\n      }, {\n        \"include\": \"#count\"\n      }, {\n        \"include\": \"#date\"\n      }, {\n        \"include\": \"#desc\"\n      }, {\n        \"include\": \"#else\"\n      }, {\n        \"include\": \"#exists\"\n      }, {\n        \"include\": \"#extends\"\n      }, {\n        \"include\": \"#false\"\n      }, {\n        \"include\": \"#float\"\n      }, {\n        \"include\": \"#forall\"\n      }, {\n        \"include\": \"#forex\"\n      }, {\n        \"include\": \"#from\"\n      }, {\n        \"include\": \"#if\"\n      }, {\n        \"include\": \"#implies\"\n      }, {\n        \"include\": \"#import\"\n      }, {\n        \"include\": \"#in\"\n      }, {\n        \"include\": \"#instanceof\"\n      }, {\n        \"include\": \"#int\"\n      }, {\n        \"include\": \"#max\"\n      }, {\n        \"include\": \"#min\"\n      }, {\n        \"include\": \"#module\"\n      }, {\n        \"include\": \"#newtype\"\n      }, {\n        \"include\": \"#none\"\n      }, {\n        \"include\": \"#not\"\n      }, {\n        \"include\": \"#or\"\n      }, {\n        \"include\": \"#order\"\n      }, {\n        \"include\": \"#predicate\"\n      }, {\n        \"include\": \"#rank\"\n      }, {\n        \"include\": \"#result\"\n      }, {\n        \"include\": \"#select\"\n      }, {\n        \"include\": \"#strictconcat\"\n      }, {\n        \"include\": \"#strictcount\"\n      }, {\n        \"include\": \"#strictsum\"\n      }, {\n        \"include\": \"#string\"\n      }, {\n        \"include\": \"#sum\"\n      }, {\n        \"include\": \"#super\"\n      }, {\n        \"include\": \"#then\"\n      }, {\n        \"include\": \"#this\"\n      }, {\n        \"include\": \"#true\"\n      }, {\n        \"include\": \"#unique\"\n      }, {\n        \"include\": \"#where\"\n      }]\n    },\n    \"language\": {\n      \"match\": \"(?x)\\\\b(?:language)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"storage.modifier.language.ql\"\n    },\n    \"language-annotation\": {\n      \"begin\": \"(?x)((?:\\\\b(?:language)(?:(?!(?:[0-9A-Za-z_])))))\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#language\"\n          }]\n        }\n      },\n      \"end\": \"(?x)(?! (?:\\\\s | $ | (?:// | /\\\\*)) | \\\\[ ) | (?<=\\\\])\",\n      \"name\": \"meta.block.language-annotation.ql\",\n      \"patterns\": [{\n        \"include\": \"#language-annotation-body\"\n      }, {\n        \"include\": \"#non-context-sensitive\"\n      }]\n    },\n    \"language-annotation-body\": {\n      \"begin\": \"(?x)((?:\\\\[))\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#open-bracket\"\n          }]\n        }\n      },\n      \"end\": \"(?x)((?:\\\\]))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#close-bracket\"\n          }]\n        }\n      },\n      \"name\": \"meta.block.language-annotation-body.ql\",\n      \"patterns\": [{\n        \"include\": \"#non-context-sensitive\"\n      }, {\n        \"match\": \"(?x)\\\\b(?:monotonicAggregates)(?:(?!(?:[0-9A-Za-z_])))\",\n        \"name\": \"storage.modifier.ql\"\n      }]\n    },\n    \"library\": {\n      \"match\": \"(?x)\\\\b(?:library)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"storage.modifier.library.ql\"\n    },\n    \"literal\": {\n      \"patterns\": [{\n        \"include\": \"#float-literal\"\n      }, {\n        \"include\": \"#int-literal\"\n      }, {\n        \"include\": \"#string-literal\"\n      }]\n    },\n    \"lower-id\": {\n      \"match\": \"(?x)\\\\b [a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_])))\"\n    },\n    \"max\": {\n      \"match\": \"(?x)\\\\b(?:max)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.aggregate.max.ql\"\n    },\n    \"min\": {\n      \"match\": \"(?x)\\\\b(?:min)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.aggregate.min.ql\"\n    },\n    \"module\": {\n      \"match\": \"(?x)\\\\b(?:module)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.other.module.ql\"\n    },\n    \"module-body\": {\n      \"begin\": \"(?x)((?:\\\\{))\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#open-brace\"\n          }]\n        }\n      },\n      \"end\": \"(?x)((?:\\\\}))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#close-brace\"\n          }]\n        }\n      },\n      \"name\": \"meta.block.module-body.ql\",\n      \"patterns\": [{\n        \"include\": \"#module-member\"\n      }]\n    },\n    \"module-declaration\": {\n      \"begin\": \"(?x)((?:\\\\b(?:module)(?:(?!(?:[0-9A-Za-z_])))))\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#module\"\n          }]\n        }\n      },\n      \"end\": \"(?x)(?<=\\\\}|;)\",\n      \"name\": \"meta.block.module-declaration.ql\",\n      \"patterns\": [{\n        \"include\": \"#module-body\"\n      }, {\n        \"include\": \"#implements-clause\"\n      }, {\n        \"include\": \"#non-context-sensitive\"\n      }, {\n        \"match\": \"(?x)(?:\\\\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))\",\n        \"name\": \"entity.name.type.namespace.ql\"\n      }]\n    },\n    \"module-member\": {\n      \"patterns\": [{\n        \"include\": \"#import-directive\"\n      }, {\n        \"include\": \"#import-as-clause\"\n      }, {\n        \"include\": \"#module-declaration\"\n      }, {\n        \"include\": \"#newtype-declaration\"\n      }, {\n        \"include\": \"#newtype-branch-name-with-prefix\"\n      }, {\n        \"include\": \"#predicate-parameter-list\"\n      }, {\n        \"include\": \"#predicate-body\"\n      }, {\n        \"include\": \"#class-declaration\"\n      }, {\n        \"include\": \"#select-clause\"\n      }, {\n        \"include\": \"#predicate-or-field-declaration\"\n      }, {\n        \"include\": \"#non-context-sensitive\"\n      }, {\n        \"include\": \"#annotation\"\n      }]\n    },\n    \"module-qualifier\": {\n      \"match\": \"(?x)(?:\\\\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_])))) (?=\\\\s*\\\\:\\\\:)\",\n      \"name\": \"entity.name.type.namespace.ql\"\n    },\n    \"newtype\": {\n      \"match\": \"(?x)\\\\b(?:newtype)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.other.newtype.ql\"\n    },\n    \"newtype-branch-name-with-prefix\": {\n      \"begin\": \"(?x)\\\\= | (?:\\\\b(?:or)(?:(?!(?:[0-9A-Za-z_]))))\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"patterns\": [{\n            \"include\": \"#or\"\n          }, {\n            \"include\": \"#comparison-operator\"\n          }]\n        }\n      },\n      \"end\": \"(?x)(?:\\\\b [A-Z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))\",\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"entity.name.type.ql\"\n        }\n      },\n      \"name\": \"meta.block.newtype-branch-name-with-prefix.ql\",\n      \"patterns\": [{\n        \"include\": \"#non-context-sensitive\"\n      }]\n    },\n    \"newtype-declaration\": {\n      \"begin\": \"(?x)((?:\\\\b(?:newtype)(?:(?!(?:[0-9A-Za-z_])))))\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#newtype\"\n          }]\n        }\n      },\n      \"end\": \"(?x)(?:\\\\b [A-Z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))\",\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"entity.name.type.ql\"\n        }\n      },\n      \"name\": \"meta.block.newtype-declaration.ql\",\n      \"patterns\": [{\n        \"include\": \"#non-context-sensitive\"\n      }]\n    },\n    \"non-context-sensitive\": {\n      \"patterns\": [{\n        \"include\": \"#comment\"\n      }, {\n        \"include\": \"#literal\"\n      }, {\n        \"include\": \"#operator-or-punctuation\"\n      }, {\n        \"include\": \"#keyword\"\n      }]\n    },\n    \"none\": {\n      \"match\": \"(?x)\\\\b(?:none)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.quantifier.none.ql\"\n    },\n    \"not\": {\n      \"match\": \"(?x)\\\\b(?:not)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.other.not.ql\"\n    },\n    \"open-angle\": {\n      \"match\": \"(?x)<\",\n      \"name\": \"punctuation.anglebracket.open.ql\"\n    },\n    \"open-brace\": {\n      \"match\": \"(?x)\\\\{\",\n      \"name\": \"punctuation.curlybrace.open.ql\"\n    },\n    \"open-bracket\": {\n      \"match\": \"(?x)\\\\[\",\n      \"name\": \"punctuation.squarebracket.open.ql\"\n    },\n    \"open-paren\": {\n      \"match\": \"(?x)\\\\(\",\n      \"name\": \"punctuation.parenthesis.open.ql\"\n    },\n    \"operator-or-punctuation\": {\n      \"patterns\": [{\n        \"include\": \"#relational-operator\"\n      }, {\n        \"include\": \"#comparison-operator\"\n      }, {\n        \"include\": \"#arithmetic-operator\"\n      }, {\n        \"include\": \"#comma\"\n      }, {\n        \"include\": \"#semicolon\"\n      }, {\n        \"include\": \"#dot\"\n      }, {\n        \"include\": \"#dotdot\"\n      }, {\n        \"include\": \"#pipe\"\n      }, {\n        \"include\": \"#open-paren\"\n      }, {\n        \"include\": \"#close-paren\"\n      }, {\n        \"include\": \"#open-brace\"\n      }, {\n        \"include\": \"#close-brace\"\n      }, {\n        \"include\": \"#open-bracket\"\n      }, {\n        \"include\": \"#close-bracket\"\n      }, {\n        \"include\": \"#open-angle\"\n      }, {\n        \"include\": \"#close-angle\"\n      }]\n    },\n    \"or\": {\n      \"match\": \"(?x)\\\\b(?:or)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.other.or.ql\"\n    },\n    \"order\": {\n      \"match\": \"(?x)\\\\b(?:order)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.order.order.ql\"\n    },\n    \"override\": {\n      \"match\": \"(?x)\\\\b(?:override)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"storage.modifier.override.ql\"\n    },\n    \"pipe\": {\n      \"match\": \"(?x)\\\\|\",\n      \"name\": \"punctuation.separator.pipe.ql\"\n    },\n    \"pragma\": {\n      \"match\": \"(?x)\\\\b(?:pragma)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"storage.modifier.pragma.ql\"\n    },\n    \"pragma-annotation\": {\n      \"begin\": \"(?x)((?:\\\\b(?:pragma)(?:(?!(?:[0-9A-Za-z_])))))\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#pragma\"\n          }]\n        }\n      },\n      \"end\": \"(?x)(?! (?:\\\\s | $ | (?:// | /\\\\*)) | \\\\[ ) | (?<=\\\\])\",\n      \"name\": \"meta.block.pragma-annotation.ql\",\n      \"patterns\": [{\n        \"include\": \"#pragma-annotation-body\"\n      }, {\n        \"include\": \"#non-context-sensitive\"\n      }]\n    },\n    \"pragma-annotation-body\": {\n      \"begin\": \"(?x)((?:\\\\[))\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#open-bracket\"\n          }]\n        }\n      },\n      \"end\": \"(?x)((?:\\\\]))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#close-bracket\"\n          }]\n        }\n      },\n      \"name\": \"meta.block.pragma-annotation-body.ql\",\n      \"patterns\": [{\n        \"match\": \"(?x)\\\\b(?:inline|noinline|nomagic|noopt)\\\\b\",\n        \"name\": \"storage.modifier.ql\"\n      }]\n    },\n    \"predicate\": {\n      \"match\": \"(?x)\\\\b(?:predicate)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.other.predicate.ql\"\n    },\n    \"predicate-body\": {\n      \"begin\": \"(?x)((?:\\\\{))\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#open-brace\"\n          }]\n        }\n      },\n      \"end\": \"(?x)((?:\\\\}))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#close-brace\"\n          }]\n        }\n      },\n      \"name\": \"meta.block.predicate-body.ql\",\n      \"patterns\": [{\n        \"include\": \"#predicate-body-contents\"\n      }]\n    },\n    \"predicate-body-contents\": {\n      \"patterns\": [{\n        \"include\": \"#expr-as-clause\"\n      }, {\n        \"include\": \"#non-context-sensitive\"\n      }, {\n        \"include\": \"#module-qualifier\"\n      }, {\n        \"match\": \"(?x)(?:\\\\b [a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))\\\\s*(?:\\\\*|\\\\+)?\\\\s*(?=\\\\()\",\n        \"name\": \"entity.name.function.ql\"\n      }, {\n        \"match\": \"(?x)(?:\\\\b [a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))\",\n        \"name\": \"variable.other.ql\"\n      }, {\n        \"match\": \"(?x)(?:\\\\b [A-Z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))|(?:@[a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))\",\n        \"name\": \"entity.name.type.ql\"\n      }]\n    },\n    \"predicate-or-field-declaration\": {\n      \"begin\": \"(?x)(?:(?=(?:\\\\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_])))))(?!(?:(?:(?:\\\\b(?:_)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:and)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:any)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:as)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:asc)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:avg)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:boolean)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:by)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:class)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:concat)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:count)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:date)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:desc)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:else)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:exists)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:extends)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:false)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:float)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:forall)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:forex)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:from)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:if)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:implies)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:import)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:in)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:instanceof)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:int)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:max)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:min)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:module)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:newtype)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:none)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:not)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:or)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:order)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:predicate)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:rank)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:result)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:select)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:strictconcat)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:strictcount)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:strictsum)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:string)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:sum)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:super)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:then)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:this)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:true)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:unique)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:where)(?:(?!(?:[0-9A-Za-z_]))))))|(?:(?:(?:\\\\b(?:abstract)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:additional)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:bindingset)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:cached)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:default)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:deprecated)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:external)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:final)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:language)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:library)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:override)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:pragma)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:private)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:query)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:signature)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:transient)(?:(?!(?:[0-9A-Za-z_])))))))) | (?=(?:(?:(?:\\\\b(?:boolean)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:date)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:float)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:int)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:predicate)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:string)(?:(?!(?:[0-9A-Za-z_]))))))) | (?=(?:@[a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_])))))\",\n      \"end\": \"(?x)(?<=\\\\}|;)\",\n      \"name\": \"meta.block.predicate-or-field-declaration.ql\",\n      \"patterns\": [{\n        \"include\": \"#predicate-parameter-list\"\n      }, {\n        \"include\": \"#predicate-body\"\n      }, {\n        \"include\": \"#non-context-sensitive\"\n      }, {\n        \"include\": \"#module-qualifier\"\n      }, {\n        \"match\": \"(?x)(?:\\\\b [a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))(?=\\\\s*;)\",\n        \"name\": \"variable.field.ql\"\n      }, {\n        \"match\": \"(?x)(?:\\\\b [a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))\",\n        \"name\": \"entity.name.function.ql\"\n      }, {\n        \"match\": \"(?x)(?:\\\\b [A-Z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))|(?:@[a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))\",\n        \"name\": \"entity.name.type.ql\"\n      }]\n    },\n    \"predicate-parameter-list\": {\n      \"begin\": \"(?x)((?:\\\\())\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#open-paren\"\n          }]\n        }\n      },\n      \"end\": \"(?x)((?:\\\\)))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#close-paren\"\n          }]\n        }\n      },\n      \"name\": \"meta.block.predicate-parameter-list.ql\",\n      \"patterns\": [{\n        \"include\": \"#non-context-sensitive\"\n      }, {\n        \"match\": \"(?x)(?:\\\\b [A-Z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))(?=\\\\s*(?:,|\\\\)))\",\n        \"name\": \"variable.parameter.ql\"\n      }, {\n        \"include\": \"#module-qualifier\"\n      }, {\n        \"match\": \"(?x)(?:\\\\b [A-Z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))|(?:@[a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))\",\n        \"name\": \"entity.name.type.ql\"\n      }, {\n        \"match\": \"(?x)(?:\\\\b [a-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))\",\n        \"name\": \"variable.parameter.ql\"\n      }]\n    },\n    \"predicate-start-keyword\": {\n      \"patterns\": [{\n        \"include\": \"#boolean\"\n      }, {\n        \"include\": \"#date\"\n      }, {\n        \"include\": \"#float\"\n      }, {\n        \"include\": \"#int\"\n      }, {\n        \"include\": \"#predicate\"\n      }, {\n        \"include\": \"#string\"\n      }]\n    },\n    \"private\": {\n      \"match\": \"(?x)\\\\b(?:private)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"storage.modifier.private.ql\"\n    },\n    \"query\": {\n      \"match\": \"(?x)\\\\b(?:query)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"storage.modifier.query.ql\"\n    },\n    \"rank\": {\n      \"match\": \"(?x)\\\\b(?:rank)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.aggregate.rank.ql\"\n    },\n    \"relational-operator\": {\n      \"match\": \"(?x)<=|<|>=|>\",\n      \"name\": \"keyword.operator.relational.ql\"\n    },\n    \"result\": {\n      \"match\": \"(?x)\\\\b(?:result)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"variable.language.result.ql\"\n    },\n    \"select\": {\n      \"match\": \"(?x)\\\\b(?:select)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.query.select.ql\"\n    },\n    \"select-as-clause\": {\n      \"begin\": \"(?x)((?:\\\\b(?:as)(?:(?!(?:[0-9A-Za-z_])))))\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#as\"\n          }]\n        }\n      },\n      \"end\": \"(?x)(?<=(?:[0-9A-Za-z_])(?:(?!(?:[0-9A-Za-z_]))))\",\n      \"match\": \"(?x)meta.block.select-as-clause.ql\",\n      \"patterns\": [{\n        \"include\": \"#non-context-sensitive\"\n      }, {\n        \"match\": \"(?x)(?:\\\\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_]))))\",\n        \"name\": \"variable.other.ql\"\n      }]\n    },\n    \"select-clause\": {\n      \"begin\": \"(?x)(?=(?:\\\\b(?:from)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:where)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:select)(?:(?!(?:[0-9A-Za-z_])))))\",\n      \"end\": \"(?x)(?!(?:\\\\b(?:from)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:where)(?:(?!(?:[0-9A-Za-z_]))))|(?:\\\\b(?:select)(?:(?!(?:[0-9A-Za-z_])))))\",\n      \"name\": \"meta.block.select-clause.ql\",\n      \"patterns\": [{\n        \"include\": \"#from-section\"\n      }, {\n        \"include\": \"#where-section\"\n      }, {\n        \"include\": \"#select-section\"\n      }]\n    },\n    \"select-section\": {\n      \"begin\": \"(?x)((?:\\\\b(?:select)(?:(?!(?:[0-9A-Za-z_])))))\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#select\"\n          }]\n        }\n      },\n      \"end\": \"(?x)(?=\\\\n)\",\n      \"name\": \"meta.block.select-section.ql\",\n      \"patterns\": [{\n        \"include\": \"#predicate-body-contents\"\n      }, {\n        \"include\": \"#select-as-clause\"\n      }]\n    },\n    \"semicolon\": {\n      \"match\": \"(?x);\",\n      \"name\": \"punctuation.separator.statement.ql\"\n    },\n    \"signature\": {\n      \"match\": \"(?x)\\\\b(?:signature)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"storage.modifier.signature.ql\"\n    },\n    \"simple-id\": {\n      \"match\": \"(?x)\\\\b [A-Za-z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_])))\"\n    },\n    \"strictconcat\": {\n      \"match\": \"(?x)\\\\b(?:strictconcat)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.aggregate.strictconcat.ql\"\n    },\n    \"strictcount\": {\n      \"match\": \"(?x)\\\\b(?:strictcount)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.aggregate.strictcount.ql\"\n    },\n    \"strictsum\": {\n      \"match\": \"(?x)\\\\b(?:strictsum)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.aggregate.strictsum.ql\"\n    },\n    \"string\": {\n      \"match\": \"(?x)\\\\b(?:string)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.type.string.ql\"\n    },\n    \"string-escape\": {\n      \"match\": '(?x)\\\\\\\\[\"\\\\\\\\nrt]',\n      \"name\": \"constant.character.escape.ql\"\n    },\n    \"string-literal\": {\n      \"begin\": '(?x)\"',\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.string.begin.ql\"\n        }\n      },\n      \"end\": '(?x)(\") | ((?:[^\\\\\\\\\\\\n])$)',\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.string.end.ql\"\n        },\n        \"2\": {\n          \"name\": \"invalid.illegal.newline.ql\"\n        }\n      },\n      \"name\": \"string.quoted.double.ql\",\n      \"patterns\": [{\n        \"include\": \"#string-escape\"\n      }]\n    },\n    \"sum\": {\n      \"match\": \"(?x)\\\\b(?:sum)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.aggregate.sum.ql\"\n    },\n    \"super\": {\n      \"match\": \"(?x)\\\\b(?:super)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"variable.language.super.ql\"\n    },\n    \"then\": {\n      \"match\": \"(?x)\\\\b(?:then)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.other.then.ql\"\n    },\n    \"this\": {\n      \"match\": \"(?x)\\\\b(?:this)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"variable.language.this.ql\"\n    },\n    \"transient\": {\n      \"match\": \"(?x)\\\\b(?:transient)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"storage.modifier.transient.ql\"\n    },\n    \"true\": {\n      \"match\": \"(?x)\\\\b(?:true)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"constant.language.boolean.true.ql\"\n    },\n    \"unique\": {\n      \"match\": \"(?x)\\\\b(?:unique)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.aggregate.unique.ql\"\n    },\n    \"upper-id\": {\n      \"match\": \"(?x)\\\\b [A-Z][0-9A-Za-z_]* (?:(?!(?:[0-9A-Za-z_])))\"\n    },\n    \"where\": {\n      \"match\": \"(?x)\\\\b(?:where)(?:(?!(?:[0-9A-Za-z_])))\",\n      \"name\": \"keyword.query.where.ql\"\n    },\n    \"where-section\": {\n      \"begin\": \"(?x)((?:\\\\b(?:where)(?:(?!(?:[0-9A-Za-z_])))))\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#where\"\n          }]\n        }\n      },\n      \"end\": \"(?x)(?=(?:\\\\b(?:select)(?:(?!(?:[0-9A-Za-z_])))))\",\n      \"name\": \"meta.block.where-section.ql\",\n      \"patterns\": [{\n        \"include\": \"#predicate-body-contents\"\n      }]\n    },\n    \"whitespace-or-comment-start\": {\n      \"match\": \"(?x)\\\\s | $ | (?:// | /\\\\*)\"\n    }\n  },\n  \"scopeName\": \"source.ql\",\n  \"aliases\": [\"ql\"]\n});\nvar codeql = [lang];\nexport { codeql as default };"],
  "mappings": "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",
  "names": []
}
