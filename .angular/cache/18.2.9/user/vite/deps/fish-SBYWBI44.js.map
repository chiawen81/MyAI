{
  "version": 3,
  "sources": ["../../../../../../node_modules/shiki/dist/langs/fish.mjs"],
  "sourcesContent": ["const lang = Object.freeze({\n  \"displayName\": \"Fish\",\n  \"fileTypes\": [\"fish\"],\n  \"firstLineMatch\": \"^#!.*\\\\bfish\\\\b\",\n  \"foldingStartMarker\": \"^\\\\s*(function|while|if|switch|for|begin)\\\\s.*$\",\n  \"foldingStopMarker\": \"^\\\\s*end\\\\s*$\",\n  \"name\": \"fish\",\n  \"patterns\": [{\n    \"begin\": '\"',\n    \"beginCaptures\": {\n      \"0\": {\n        \"name\": \"punctuation.definition.string.begin.fish\"\n      }\n    },\n    \"comment\": \"Double quoted string\",\n    \"end\": '\"',\n    \"endCaptures\": {\n      \"0\": {\n        \"name\": \"punctuation.definition.string.end.fish\"\n      }\n    },\n    \"name\": \"string.quoted.double.fish\",\n    \"patterns\": [{\n      \"include\": \"#variable\"\n    }, {\n      \"comment\": \"https://fishshell.com/docs/current/#quotes\",\n      \"match\": '\\\\\\\\(\\\\\"|\\\\$|$|\\\\\\\\)',\n      \"name\": \"constant.character.escape.fish\"\n    }]\n  }, {\n    \"begin\": \"'\",\n    \"beginCaptures\": {\n      \"0\": {\n        \"name\": \"punctuation.definition.string.begin.fish\"\n      }\n    },\n    \"comment\": \"Single quoted string\",\n    \"end\": \"'\",\n    \"endCaptures\": {\n      \"0\": {\n        \"name\": \"punctuation.definition.string.end.fish\"\n      }\n    },\n    \"name\": \"string.quoted.single.fish\",\n    \"patterns\": [{\n      \"comment\": \"https://fishshell.com/docs/current/#quotes\",\n      \"match\": \"\\\\\\\\('|`|\\\\\\\\)\",\n      \"name\": \"constant.character.escape.fish\"\n    }]\n  }, {\n    \"captures\": {\n      \"1\": {\n        \"name\": \"punctuation.definition.comment.fish\"\n      }\n    },\n    \"comment\": \"line comment\",\n    \"match\": \"(?<!\\\\$)(#)(?!\\\\{).*$\\\\n?\",\n    \"name\": \"comment.line.number-sign.fish\"\n  }, {\n    \"captures\": {\n      \"2\": {\n        \"name\": \"keyword.control.fish\"\n      },\n      \"4\": {\n        \"name\": \"support.function.command.fish\"\n      }\n    },\n    \"comment\": \"name of command, either a function or a binary\",\n    \"match\": \"(^\\\\s*|&&\\\\s*|\\\\|\\\\s*|\\\\(\\\\s*|[;]\\\\s*|\\\\b(if|while)\\\\b\\\\s+)(?!(?<!\\\\.)\\\\b(function|while|if|else|switch|case|for|in|begin|end|continue|break|return|source|exit|wait|and|or|not)\\\\b(?![?!]))([a-zA-Z_\\\\-0-9\\\\[\\\\].]+)\"\n  }, {\n    \"comment\": \"keywords that affect control flow\",\n    \"match\": \"(?<!\\\\.)\\\\b(function|while|if|else|switch|case|for|in|begin|end|continue|break|return|source|exit|wait|and|or|not)\\\\b(?![?!])\",\n    \"name\": \"keyword.control.fish\"\n  }, {\n    \"match\": \"(?<!\\\\.)\\\\bfunction\\\\b(?![?!])\",\n    \"name\": \"storage.type.fish\"\n  }, {\n    \"match\": \"\\\\|\",\n    \"name\": \"keyword.operator.pipe.fish\"\n  }, {\n    \"comment\": \"IO Redirection\",\n    \"match\": \"(?x:\\n<|# Standard Input\\n(>|\\\\^|>>|\\\\^\\\\^)(&[012\\\\-])?|\\n[012](<|>|>>)(&[012\\\\-])?\\n)\",\n    \"name\": \"keyword.operator.redirect.fish\"\n  }, {\n    \"match\": \"&\",\n    \"name\": \"keyword.operator.background.fish\"\n  }, {\n    \"match\": \"\\\\*\\\\*|\\\\*|\\\\?\",\n    \"name\": \"keyword.operator.glob.fish\"\n  }, {\n    \"captures\": {\n      \"1\": {\n        \"name\": \"source.option.fish\"\n      }\n    },\n    \"comment\": \"command short/long options\",\n    \"match\": \"\\\\s(-{1,2}[a-zA-Z_\\\\-0-9]+|-\\\\w)\\\\b\"\n  }, {\n    \"include\": \"#variable\"\n  }, {\n    \"include\": \"#escape\"\n  }],\n  \"repository\": {\n    \"escape\": {\n      \"patterns\": [{\n        \"comment\": \"single character character escape sequences\",\n        \"match\": `\\\\\\\\[abefnrtv $*?~#(){}\\\\[\\\\]<>^&|;\"']`,\n        \"name\": \"constant.character.escape.single.fish\"\n      }, {\n        \"comment\": \"escapes the ascii character with the specified value (hexadecimal)\",\n        \"match\": \"\\\\\\\\x[0-9a-fA-F]{1,2}\",\n        \"name\": \"constant.character.escape.hex-ascii.fish\"\n      }, {\n        \"comment\": \"escapes a byte of data with the specified value (hexadecimal). If you are using mutibyte encoding, this can be used to enter invalid strings. Only use this if you know what are doing.\",\n        \"match\": \"\\\\\\\\X[0-9a-fA-F]{1,2}\",\n        \"name\": \"constant.character.escape.hex-byte.fish\"\n      }, {\n        \"comment\": \"escapes the ascii character with the specified value (octal)\",\n        \"match\": \"\\\\\\\\[0-7]{1,3}\",\n        \"name\": \"constant.character.escape.octal.fish\"\n      }, {\n        \"comment\": \"escapes the 16-bit unicode character with the specified value (hexadecimal)\",\n        \"match\": \"\\\\\\\\u[0-9a-fA-F]{1,4}\",\n        \"name\": \"constant.character.escape.unicode-16-bit.fish\"\n      }, {\n        \"comment\": \"escapes the 32-bit unicode character with the specified value (hexadecimal)\",\n        \"match\": \"\\\\\\\\U[0-9a-fA-F]{1,8}\",\n        \"name\": \"constant.character.escape.unicode-32-bit.fish\"\n      }, {\n        \"comment\": \"escapes the control sequence generated by pressing the control key and the specified letter\",\n        \"match\": \"\\\\\\\\c[a-zA-Z]\",\n        \"name\": \"constant.character.escape.control.fish\"\n      }]\n    },\n    \"variable\": {\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"name\": \"punctuation.definition.variable.fish\"\n          }\n        },\n        \"comment\": \"Built-in variables visible by pressing $ TAB TAB in a new shell\",\n        \"match\": \"(\\\\$)(argv|CMD_DURATION|COLUMNS|fish_bind_mode|fish_color_autosuggestion|fish_color_cancel|fish_color_command|fish_color_comment|fish_color_cwd|fish_color_cwd_root|fish_color_end|fish_color_error|fish_color_escape|fish_color_hg_added|fish_color_hg_clean|fish_color_hg_copied|fish_color_hg_deleted|fish_color_hg_dirty|fish_color_hg_modified|fish_color_hg_renamed|fish_color_hg_unmerged|fish_color_hg_untracked|fish_color_history_current|fish_color_host|fish_color_host_remote|fish_color_match|fish_color_normal|fish_color_operator|fish_color_param|fish_color_quote|fish_color_redirection|fish_color_search_match|fish_color_selection|fish_color_status|fish_color_user|fish_color_valid_path|fish_complete_path|fish_function_path|fish_greeting|fish_key_bindings|fish_pager_color_completion|fish_pager_color_description|fish_pager_color_prefix|fish_pager_color_progress|fish_pid|fish_prompt_hg_status_added|fish_prompt_hg_status_copied|fish_prompt_hg_status_deleted|fish_prompt_hg_status_modified|fish_prompt_hg_status_order|fish_prompt_hg_status_unmerged|fish_prompt_hg_status_untracked|FISH_VERSION|history|hostname|IFS|LINES|pipestatus|status|umask|version)\\\\b\",\n        \"name\": \"variable.language.fish\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"punctuation.definition.variable.fish\"\n          }\n        },\n        \"match\": \"(\\\\$)[a-zA-Z_][a-zA-Z0-9_]*\",\n        \"name\": \"variable.other.normal.fish\"\n      }]\n    }\n  },\n  \"scopeName\": \"source.fish\"\n});\nvar fish = [lang];\nexport { fish as default };"],
  "mappings": "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",
  "names": []
}
