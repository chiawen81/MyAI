{
  "version": 3,
  "sources": ["../../../../../../node_modules/shiki/dist/langs/wasm.mjs"],
  "sourcesContent": ["const lang = Object.freeze({\n  \"displayName\": \"WebAssembly\",\n  \"name\": \"wasm\",\n  \"patterns\": [{\n    \"include\": \"#comments\"\n  }, {\n    \"include\": \"#strings\"\n  }, {\n    \"include\": \"#instructions\"\n  }, {\n    \"include\": \"#types\"\n  }, {\n    \"include\": \"#modules\"\n  }, {\n    \"include\": \"#constants\"\n  }, {\n    \"include\": \"#invalid\"\n  }],\n  \"repository\": {\n    \"comments\": {\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"name\": \"punctuation.definition.comment.wat\"\n          }\n        },\n        \"comment\": \"Line comment\",\n        \"match\": \"(;;).*$\",\n        \"name\": \"comment.line.wat\"\n      }, {\n        \"begin\": \"\\\\(;\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.comment.wat\"\n          }\n        },\n        \"comment\": \"Block comment\",\n        \"end\": \";\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.comment.wat\"\n          }\n        },\n        \"name\": \"comment.block.wat\"\n      }]\n    },\n    \"constants\": {\n      \"patterns\": [{\n        \"comment\": \"Fixed-width SIMD\",\n        \"patterns\": [{\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.type.wat\"\n            }\n          },\n          \"comment\": \"Vector literal (i8x16) [simd]\",\n          \"match\": \"\\\\b(i8x16)(?:\\\\s+0x[0-9a-fA-F]{1,2}){16}\\\\b\",\n          \"name\": \"constant.numeric.vector.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.type.wat\"\n            }\n          },\n          \"comment\": \"Vector literal (i16x8) [simd]\",\n          \"match\": \"\\\\b(i16x8)(?:\\\\s+0x[0-9a-fA-F]{1,4}){8}\\\\b\",\n          \"name\": \"constant.numeric.vector.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.type.wat\"\n            }\n          },\n          \"comment\": \"Vector literal (i32x4) [simd]\",\n          \"match\": \"\\\\b(i32x4)(?:\\\\s+0x[0-9a-fA-F]{1,8}){4}\\\\b\",\n          \"name\": \"constant.numeric.vector.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.type.wat\"\n            }\n          },\n          \"comment\": \"Vector literal (i64x2) [simd]\",\n          \"match\": \"\\\\b(i64x2)(?:\\\\s+0x[0-9a-fA-F]{1,16}){2}\\\\b\",\n          \"name\": \"constant.numeric.vector.wat\"\n        }]\n      }, {\n        \"comment\": \"MVP\",\n        \"patterns\": [{\n          \"comment\": \"Floating point literal\",\n          \"match\": \"[+-]?\\\\b[0-9][0-9]*(?:\\\\.[0-9][0-9]*)?(?:[eE][+-]?[0-9]+)?\\\\b\",\n          \"name\": \"constant.numeric.float.wat\"\n        }, {\n          \"comment\": \"Floating point hexadecimal literal\",\n          \"match\": \"[+-]?\\\\b0x([0-9a-fA-F]*\\\\.[0-9a-fA-F]+|[0-9a-fA-F]+\\\\.?)[Pp][+-]?[0-9]+\\\\b\",\n          \"name\": \"constant.numeric.float.wat\"\n        }, {\n          \"comment\": \"Floating point infinity\",\n          \"match\": \"[+-]?\\\\binf\\\\b\",\n          \"name\": \"constant.numeric.float.wat\"\n        }, {\n          \"comment\": \"Floating point literal (NaN)\",\n          \"match\": \"[+-]?\\\\bnan:0x[0-9a-fA-F][0-9a-fA-F]*\\\\b\",\n          \"name\": \"constant.numeric.float.wat\"\n        }, {\n          \"comment\": \"Integer literal\",\n          \"match\": \"[+-]?\\\\b(?:0x[0-9a-fA-F][0-9a-fA-F]*|\\\\d[\\\\d]*)\\\\b\",\n          \"name\": \"constant.numeric.integer.wat\"\n        }]\n      }]\n    },\n    \"instructions\": {\n      \"patterns\": [{\n        \"comment\": \"Non-trapping float-to-int conversions\",\n        \"patterns\": [{\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.wat\"\n            }\n          },\n          \"comment\": \"Conversion instruction [nontrapping-float-to-int-conversions]\",\n          \"match\": \"\\\\b(i32|i64)\\\\.trunc_sat_f(?:32|64)_[su]\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }]\n      }, {\n        \"comment\": \"Sign-extension operators\",\n        \"patterns\": [{\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.wat\"\n            }\n          },\n          \"comment\": \"Numeric instruction (i32) [sign-extension-ops]\",\n          \"match\": \"\\\\b(i32)\\\\.(?:extend(?:8|16)_s)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.wat\"\n            }\n          },\n          \"comment\": \"Numeric instruction (i64) [sign-extension-ops]\",\n          \"match\": \"\\\\b(i64)\\\\.(?:extend(?:8|16|32)_s)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }]\n      }, {\n        \"comment\": \"Bulk memory operations\",\n        \"patterns\": [{\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.wat\"\n            }\n          },\n          \"comment\": \"Memory instruction [bulk-memory-operations]\",\n          \"match\": \"\\\\b(memory)\\\\.(?:copy|fill|init|drop)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }]\n      }, {\n        \"comment\": \"Fixed-width SIMD\",\n        \"patterns\": [{\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.wat\"\n            }\n          },\n          \"comment\": \"Vector instruction (v128) [simd]\",\n          \"match\": \"\\\\b(v128)\\\\.(?:const|and|or|xor|not|andnot|bitselect|load|store)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.wat\"\n            }\n          },\n          \"comment\": \"Vector instruction (i8x16) [simd]\",\n          \"match\": \"\\\\b(i8x16)\\\\.(?:shuffle|swizzle|splat|replace_lane|add|sub|mul|neg|shl|shr_[su]|eq|ne|lt_[su]|le_[su]|gt_[su]|ge_[su]|min_[su]|max_[su]|any_true|all_true|extract_lane_[su]|add_saturate_[su]|sub_saturate_[su]|avgr_u|narrow_i16x8_[su])\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.wat\"\n            }\n          },\n          \"comment\": \"Vector instruction (i16x8) [simd]\",\n          \"match\": \"\\\\b(i16x8)\\\\.(?:splat|replace_lane|add|sub|mul|neg|shl|shr_[su]|eq|ne|lt_[su]|le_[su]|gt_[su]|ge_[su]|min_[su]|max_[su]|any_true|all_true|extract_lane_[su]|add_saturate_[su]|sub_saturate_[su]|avgr_u|load8x8_[su]|narrow_i32x4_[su]|widen_(low|high)_i8x16_[su])\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.wat\"\n            }\n          },\n          \"comment\": \"Vector instruction (i32x4) [simd]\",\n          \"match\": \"\\\\b(i32x4)\\\\.(?:splat|replace_lane|add|sub|mul|neg|shl|shr_[su]|eq|ne|lt_[su]|le_[su]|gt_[su]|ge_[su]|min_[su]|max_[su]|any_true|all_true|extract_lane|load16x4_[su]|trunc_sat_f32x4_[su]|widen_(low|high)_i16x8_[su])\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.wat\"\n            }\n          },\n          \"comment\": \"Vector instruction (i64x2) [simd]\",\n          \"match\": \"\\\\b(i64x2)\\\\.(?:splat|replace_lane|add|sub|mul|neg|shl|shr_[su]|extract_lane|load32x2_[su])\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.wat\"\n            }\n          },\n          \"comment\": \"Vector instruction (f32x4) [simd]\",\n          \"match\": \"\\\\b(f32x4)\\\\.(?:splat|replace_lane|add|sub|mul|neg|extract_lane|eq|ne|lt|le|gt|ge|abs|min|max|div|sqrt|convert_i32x4_[su])\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.wat\"\n            }\n          },\n          \"comment\": \"Vector instruction (f64x2) [simd]\",\n          \"match\": \"\\\\b(f64x2)\\\\.(?:splat|replace_lane|add|sub|mul|neg|extract_lane|eq|ne|lt|le|gt|ge|abs|min|max|div|sqrt)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.wat\"\n            }\n          },\n          \"comment\": \"Vector instruction (v8x16) [simd]\",\n          \"match\": \"\\\\b(v8x16)\\\\.(?:load_splat|shuffle|swizzle)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.wat\"\n            }\n          },\n          \"comment\": \"Vector instruction (v16x8) [simd]\",\n          \"match\": \"\\\\b(v16x8)\\\\.load_splat\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.wat\"\n            }\n          },\n          \"comment\": \"Vector instruction (v32x4) [simd]\",\n          \"match\": \"\\\\b(v32x4)\\\\.load_splat\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.wat\"\n            }\n          },\n          \"comment\": \"Vector instruction (v64x2) [simd]\",\n          \"match\": \"\\\\b(v64x2)\\\\.load_splat\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }]\n      }, {\n        \"comment\": \"Threads\",\n        \"patterns\": [{\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.wat\"\n            },\n            \"2\": {\n              \"name\": \"support.class.wat\"\n            },\n            \"3\": {\n              \"name\": \"support.class.wat\"\n            },\n            \"4\": {\n              \"name\": \"support.class.wat\"\n            }\n          },\n          \"comment\": \"Atomic instruction (i32) [threads]\",\n          \"match\": \"\\\\b(i32)\\\\.(atomic)\\\\.(?:load(?:8_u|16_u)?|store(?:8|16)?|wait|(rmw)\\\\.(?:add|sub|and|or|xor|xchg|cmpxchg)|(rmw8|rmw16)\\\\.(?:add_u|sub_u|and_u|or_u|xor_u|xchg_u|cmpxchg_u))\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.wat\"\n            },\n            \"2\": {\n              \"name\": \"support.class.wat\"\n            },\n            \"3\": {\n              \"name\": \"support.class.wat\"\n            },\n            \"4\": {\n              \"name\": \"support.class.wat\"\n            }\n          },\n          \"comment\": \"Atomic instruction (i64) [threads]\",\n          \"match\": \"\\\\b(i64)\\\\.(atomic)\\\\.(?:load(?:8_u|16_u|32_u)?|store(?:8|16|32)?|wait|(rmw)\\\\.(?:add|sub|and|or|xor|xchg|cmpxchg)|(rmw8|rmw16|rmw32)\\\\.(?:add_u|sub_u|and_u|or_u|xor_u|xchg_u|cmpxchg_u))\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.wat\"\n            }\n          },\n          \"comment\": \"Atomic instruction [threads]\",\n          \"match\": \"\\\\b(atomic)\\\\.(?:notify|fence)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"comment\": \"Shared modifier [threads]\",\n          \"match\": \"\\\\bshared\\\\b\",\n          \"name\": \"storage.modifier.wat\"\n        }]\n      }, {\n        \"comment\": \"Reference types\",\n        \"patterns\": [{\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.wat\"\n            }\n          },\n          \"comment\": \"Reference instruction [reference-types]\",\n          \"match\": \"\\\\b(ref)\\\\.(?:null|is_null|func|extern)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.wat\"\n            }\n          },\n          \"comment\": \"Table instruction [reference-types]\",\n          \"match\": \"\\\\b(table)\\\\.(?:get|size|grow|fill|init|copy)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"comment\": \"Type name [reference-types]\",\n          \"match\": \"\\\\b(?:externref|funcref|nullref)\\\\b\",\n          \"name\": \"entity.name.type.wat\"\n        }]\n      }, {\n        \"comment\": \"Tail Call\",\n        \"patterns\": [{\n          \"comment\": \"Control instruction [tail-call]\",\n          \"match\": \"\\\\breturn_call(?:_indirect)?\\\\b\",\n          \"name\": \"keyword.control.wat\"\n        }]\n      }, {\n        \"comment\": \"Exception handling\",\n        \"patterns\": [{\n          \"comment\": \"Control instruction [exception-handling]\",\n          \"match\": \"\\\\b(?:try|catch|throw|rethrow|br_on_exn)\\\\b\",\n          \"name\": \"keyword.control.wat\"\n        }, {\n          \"comment\": \"Module element [exception-handling]\",\n          \"match\": \"(?<=\\\\()event\\\\b\",\n          \"name\": \"storage.type.wat\"\n        }]\n      }, {\n        \"comment\": \"Binaryen extensions\",\n        \"patterns\": [{\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.wat\"\n            }\n          },\n          \"comment\": \"Pseudo stack instruction [binaryen]\",\n          \"match\": \"\\\\b(i32|i64|f32|f64|externref|funcref|nullref|exnref)\\\\.(?:push|pop)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }]\n      }, {\n        \"comment\": \"MVP\",\n        \"patterns\": [{\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.type.wat\"\n            }\n          },\n          \"comment\": \"Memory instruction (i32) [mvp]\",\n          \"match\": \"\\\\b(i32)\\\\.(?:load|load(?:8|16)(?:_[su])?|store(?:8|16)?)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.type.wat\"\n            }\n          },\n          \"comment\": \"Memory instruction (i64) [mvp]\",\n          \"match\": \"\\\\b(i64)\\\\.(?:load|load(?:8|16|32)(?:_[su])?|store(?:8|16|32)?)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.type.wat\"\n            }\n          },\n          \"comment\": \"Memory instruction (f32/f64) [mvp]\",\n          \"match\": \"\\\\b(f32|f64)\\\\.(?:load|store)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.memory.wat\"\n            }\n          },\n          \"comment\": \"Memory instruction [mvp]\",\n          \"match\": \"\\\\b(memory)\\\\.(?:size|grow)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"entity.other.attribute-name.wat\"\n            }\n          },\n          \"comment\": \"Memory instruction attribute [mvp]\",\n          \"match\": \"\\\\b(offset|align)=\\\\b\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.local.wat\"\n            }\n          },\n          \"comment\": \"Variable instruction (local) [mvp]\",\n          \"match\": \"\\\\b(local)\\\\.(?:get|set|tee)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.global.wat\"\n            }\n          },\n          \"comment\": \"Variable instruction (global) [mvp]\",\n          \"match\": \"\\\\b(global)\\\\.(?:get|set)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.type.wat\"\n            }\n          },\n          \"comment\": \"Numeric instruction (i32/i64) [mvp]\",\n          \"match\": \"\\\\b(i32|i64)\\\\.(const|eqz|eq|ne|lt_[su]|gt_[su]|le_[su]|ge_[su]|clz|ctz|popcnt|add|sub|mul|div_[su]|rem_[su]|and|or|xor|shl|shr_[su]|rotl|rotr)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.type.wat\"\n            }\n          },\n          \"comment\": \"Numeric instruction (f32/f64) [mvp]\",\n          \"match\": \"\\\\b(f32|f64)\\\\.(const|eq|ne|lt|gt|le|ge|abs|neg|ceil|floor|trunc|nearest|sqrt|add|sub|mul|div|min|max|copysign)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.type.wat\"\n            }\n          },\n          \"comment\": \"Conversion instruction (i32) [mvp]\",\n          \"match\": \"\\\\b(i32)\\\\.(wrap_i64|trunc_(f32|f64)_[su]|reinterpret_f32)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.type.wat\"\n            }\n          },\n          \"comment\": \"Conversion instruction (i64) [mvp]\",\n          \"match\": \"\\\\b(i64)\\\\.(extend_i32_[su]|trunc_f(32|64)_[su]|reinterpret_f64)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.type.wat\"\n            }\n          },\n          \"comment\": \"Conversion instruction (f32) [mvp]\",\n          \"match\": \"\\\\b(f32)\\\\.(convert_i(32|64)_[su]|demote_f64|reinterpret_i32)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.type.wat\"\n            }\n          },\n          \"comment\": \"Conversion instruction (f64) [mvp]\",\n          \"match\": \"\\\\b(f64)\\\\.(convert_i(32|64)_[su]|promote_f32|reinterpret_i64)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"comment\": \"Control instruction [mvp]\",\n          \"match\": \"\\\\b(?:unreachable|nop|block|loop|if|then|else|end|br|br_if|br_table|return|call|call_indirect)\\\\b\",\n          \"name\": \"keyword.control.wat\"\n        }, {\n          \"comment\": \"Parametric instruction [mvp]\",\n          \"match\": \"\\\\b(?:drop|select)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }]\n      }, {\n        \"comment\": \"GC Instructions\",\n        \"patterns\": [{\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.wat\"\n            }\n          },\n          \"comment\": \"Reference Instructions [GC]\",\n          \"match\": \"\\\\b(ref)\\\\.(?:eq|test|cast)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.wat\"\n            }\n          },\n          \"comment\": \"Struct Instructions [GC]\",\n          \"match\": \"\\\\b(struct)\\\\.(?:new_canon|new_canon_default|get|get_s|get_u|set)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.wat\"\n            }\n          },\n          \"comment\": \"Array Instructions [GC]\",\n          \"match\": \"\\\\b(array)\\\\.(?:new_canon|new_canon_default|get|get_s|get_u|set|len|new_canon_fixed|new_canon_data|new_canon_elem)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.wat\"\n            }\n          },\n          \"comment\": \"i31 Instructions [GC]\",\n          \"match\": \"\\\\b(i31)\\\\.(?:new|get_s|get_u)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.wat\"\n            }\n          },\n          \"comment\": \"Branch Instructions [GC]\",\n          \"match\": \"\\\\b(?:br_on_non_null|br_on_cast|br_on_cast_fail)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.class.wat\"\n            }\n          },\n          \"comment\": \"Reference Instructions [GC]\",\n          \"match\": \"\\\\b(extern)\\\\.(?:internalize|externalize)\\\\b\",\n          \"name\": \"keyword.operator.word.wat\"\n        }]\n      }]\n    },\n    \"invalid\": {\n      \"patterns\": [{\n        \"match\": \"[^\\\\s()]+\",\n        \"name\": \"invalid.wat\"\n      }]\n    },\n    \"modules\": {\n      \"patterns\": [{\n        \"comment\": \"Bulk memory operations\",\n        \"patterns\": [{\n          \"captures\": {\n            \"1\": {\n              \"name\": \"storage.modifier.wat\"\n            }\n          },\n          \"comment\": \"Passive modifier [bulk-memory-operations]\",\n          \"match\": \"(?<=\\\\(data)\\\\s+(passive)\\\\b\"\n        }]\n      }, {\n        \"comment\": \"MVP\",\n        \"patterns\": [{\n          \"comment\": \"Module element [mvp]\",\n          \"match\": \"(?<=\\\\()(?:module|import|export|memory|data|table|elem|start|func|type|param|result|global|local)\\\\b\",\n          \"name\": \"storage.type.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"storage.modifier.wat\"\n            }\n          },\n          \"comment\": \"Mutable global modifier [mvp]\",\n          \"match\": \"(?<=\\\\()\\\\s*(mut)\\\\b\",\n          \"name\": \"storage.modifier.wat\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"entity.name.function.wat\"\n            }\n          },\n          \"comment\": \"Function name [mvp]\",\n          \"match\": \"(?<=\\\\(func|\\\\(start|call|return_call|ref\\\\.func)\\\\s+(\\\\$[0-9A-Za-z!#$%&'*+\\\\-./:<=>?@\\\\\\\\^_`|~]*)\"\n        }, {\n          \"begin\": \"\\\\)\\\\s+(\\\\$[0-9A-Za-z!#$%&'*+\\\\-./:<=>?@\\\\\\\\^_`|~]*)\",\n          \"beginCaptures\": {\n            \"1\": {\n              \"name\": \"entity.name.function.wat\"\n            }\n          },\n          \"comment\": \"Function name(s) (elem) [mvp]\",\n          \"end\": \"\\\\)\",\n          \"patterns\": [{\n            \"match\": \"(?<=\\\\s)\\\\$[0-9A-Za-z!#$%&'*+\\\\-./:<=>?@\\\\\\\\^_`|~]*\",\n            \"name\": \"entity.name.function.wat\"\n          }]\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"support.type.function.wat\"\n            }\n          },\n          \"comment\": \"Function type [mvp]\",\n          \"match\": \"(?<=\\\\(type)\\\\s+(\\\\$[0-9A-Za-z!#$%&'*+\\\\-./:<=>?@\\\\\\\\^_`|~]*)\"\n        }, {\n          \"comment\": \"Variable name or branch label [mvp]\",\n          \"match\": \"\\\\$[0-9A-Za-z!#$%&'*+\\\\-./:<=>?@\\\\\\\\^_`|~]*\\\\b\",\n          \"name\": \"variable.other.wat\"\n        }]\n      }]\n    },\n    \"strings\": {\n      \"begin\": '\"',\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.string.begin\"\n        }\n      },\n      \"comment\": \"String literal\",\n      \"end\": '\"',\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.string.end\"\n        }\n      },\n      \"name\": \"string.quoted.double.wat\",\n      \"patterns\": [{\n        \"match\": `\\\\\\\\(n|t|\\\\\\\\|'|\"|[0-9a-fA-F]{2})`,\n        \"name\": \"constant.character.escape.wat\"\n      }]\n    },\n    \"types\": {\n      \"patterns\": [{\n        \"comment\": \"Fixed-width SIMD\",\n        \"patterns\": [{\n          \"comment\": \"Type name [simd]\",\n          \"match\": \"\\\\bv128\\\\b(?!\\\\.)\",\n          \"name\": \"entity.name.type.wat\"\n        }]\n      }, {\n        \"comment\": \"Reference types\",\n        \"patterns\": [{\n          \"comment\": \"Type name [reference-types]\",\n          \"match\": \"\\\\b(?:externref|funcref|nullref)\\\\b(?!\\\\.)\",\n          \"name\": \"entity.name.type.wat\"\n        }]\n      }, {\n        \"comment\": \"Exception handling\",\n        \"patterns\": [{\n          \"comment\": \"Type name [exception-handling]\",\n          \"match\": \"\\\\bexnref\\\\b(?!\\\\.)\",\n          \"name\": \"entity.name.type.wat\"\n        }]\n      }, {\n        \"comment\": \"MVP\",\n        \"patterns\": [{\n          \"comment\": \"Type name [mvp]\",\n          \"match\": \"\\\\b(?:i32|i64|f32|f64)\\\\b(?!\\\\.)\",\n          \"name\": \"entity.name.type.wat\"\n        }]\n      }, {\n        \"comment\": \"GC Types\",\n        \"patterns\": [{\n          \"comment\": \"Type name [GC]\",\n          \"match\": \"\\\\b(?:i8|i16|ref|funcref|externref|anyref|eqref|i31ref|nullfuncref|nullexternref|structref|arrayref|nullref)\\\\b(?!\\\\.)\",\n          \"name\": \"entity.name.type.wat\"\n        }]\n      }, {\n        \"comment\": \"GC Heap Types\",\n        \"patterns\": [{\n          \"comment\": \"Type name [GC]\",\n          \"match\": \"\\\\b(?:type|func|extern|any|eq|nofunc|noextern|struct|array|none)\\\\b(?!\\\\.)\",\n          \"name\": \"entity.name.type.wat\"\n        }]\n      }, {\n        \"comment\": \"GC Structured and sub Types\",\n        \"patterns\": [{\n          \"comment\": \"Type name [GC]\",\n          \"match\": \"\\\\b(?:struct|array|sub|final|rec|field|mut)\\\\b(?!\\\\.)\",\n          \"name\": \"entity.name.type.wat\"\n        }]\n      }]\n    }\n  },\n  \"scopeName\": \"source.wat\"\n});\nvar wasm = [lang];\nexport { wasm as default };"],
  "mappings": "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",
  "names": []
}
