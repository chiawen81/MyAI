{
  "version": 3,
  "sources": ["../../../../../../node_modules/shiki/dist/langs/go.mjs"],
  "sourcesContent": ["const lang = Object.freeze({\n  \"displayName\": \"Go\",\n  \"name\": \"go\",\n  \"patterns\": [{\n    \"include\": \"#statements\"\n  }],\n  \"repository\": {\n    \"after_control_variables\": {\n      \"captures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#type-declarations-without-brackets\"\n          }, {\n            \"match\": \"\\\\[\",\n            \"name\": \"punctuation.definition.begin.bracket.square.go\"\n          }, {\n            \"match\": \"\\\\]\",\n            \"name\": \"punctuation.definition.end.bracket.square.go\"\n          }, {\n            \"match\": \"(?:\\\\w+)\",\n            \"name\": \"variable.other.go\"\n          }]\n        }\n      },\n      \"comment\": \"After control variables, to not highlight as a struct/interface (before formatting with gofmt)\",\n      \"match\": \"(?:(?<=\\\\brange\\\\b|\\\\bswitch\\\\b|\\\\;|\\\\bif\\\\b|\\\\bfor\\\\b|\\\\<|\\\\>|\\\\<\\\\=|\\\\>\\\\=|\\\\=\\\\=|\\\\!\\\\=|\\\\w(?:\\\\+|/|\\\\-|\\\\*|\\\\%)|\\\\w(?:\\\\+|/|\\\\-|\\\\*|\\\\%)\\\\=|\\\\|\\\\||\\\\&\\\\&)(?:\\\\s*)((?![\\\\[\\\\]]+)[[:alnum:]\\\\-\\\\_\\\\!\\\\.\\\\[\\\\]\\\\<\\\\>\\\\=\\\\*/\\\\+\\\\%\\\\:]+)(?:\\\\s*)(?=\\\\{))\"\n    },\n    \"brackets\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\{\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.begin.bracket.curly.go\"\n          }\n        },\n        \"end\": \"\\\\}\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.end.bracket.curly.go\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"$self\"\n        }]\n      }, {\n        \"begin\": \"\\\\(\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.begin.bracket.round.go\"\n          }\n        },\n        \"end\": \"\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.end.bracket.round.go\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"$self\"\n        }]\n      }, {\n        \"begin\": \"\\\\[\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.begin.bracket.square.go\"\n          }\n        },\n        \"end\": \"\\\\]\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.end.bracket.square.go\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"$self\"\n        }]\n      }]\n    },\n    \"built_in_functions\": {\n      \"comment\": \"Built-in functions\",\n      \"patterns\": [{\n        \"match\": \"\\\\b(append|cap|close|complex|copy|delete|imag|len|panic|print|println|real|recover|min|max|clear)\\\\b(?=\\\\()\",\n        \"name\": \"entity.name.function.support.builtin.go\"\n      }, {\n        \"begin\": \"(?:(\\\\bnew\\\\b)(\\\\())\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"entity.name.function.support.builtin.go\"\n          },\n          \"2\": {\n            \"name\": \"punctuation.definition.begin.bracket.round.go\"\n          }\n        },\n        \"comment\": \"new keyword\",\n        \"end\": \"\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.end.bracket.round.go\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#functions\"\n        }, {\n          \"include\": \"#struct_variables_types\"\n        }, {\n          \"include\": \"#type-declarations\"\n        }, {\n          \"include\": \"#generic_types\"\n        }, {\n          \"match\": \"(?:\\\\w+)\",\n          \"name\": \"entity.name.type.go\"\n        }, {\n          \"include\": \"$self\"\n        }]\n      }, {\n        \"begin\": \"(?:(\\\\bmake\\\\b)(?:(\\\\()((?:(?:(?:[\\\\*\\\\[\\\\]]+)?(?:\\\\<\\\\-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*\\\\<\\\\-)?\\\\s*)+(?:\\\\([^\\\\)]+\\\\))?)?(?:[\\\\[\\\\]\\\\*]+)?(?:(?!\\\\bmap\\\\b)(?:[\\\\w\\\\.]+))?(\\\\[(?:(?:[\\\\S]+)(?:(?:\\\\,\\\\s*(?:[\\\\S]+))*))?\\\\])?(?:\\\\,)?)?))\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"entity.name.function.support.builtin.go\"\n          },\n          \"2\": {\n            \"name\": \"punctuation.definition.begin.bracket.round.go\"\n          },\n          \"3\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations-without-brackets\"\n            }, {\n              \"include\": \"#parameter-variable-types\"\n            }, {\n              \"match\": \"\\\\w+\",\n              \"name\": \"entity.name.type.go\"\n            }]\n          }\n        },\n        \"comment\": \"make keyword\",\n        \"end\": \"\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.end.bracket.round.go\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"$self\"\n        }]\n      }]\n    },\n    \"comments\": {\n      \"patterns\": [{\n        \"begin\": \"(\\\\/\\\\*)\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.definition.comment.go\"\n          }\n        },\n        \"end\": \"(\\\\*\\\\/)\",\n        \"endCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.definition.comment.go\"\n          }\n        },\n        \"name\": \"comment.block.go\"\n      }, {\n        \"begin\": \"(\\\\/\\\\/)\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.definition.comment.go\"\n          }\n        },\n        \"end\": \"(?:\\\\n|$)\",\n        \"name\": \"comment.line.double-slash.go\"\n      }]\n    },\n    \"delimiters\": {\n      \"patterns\": [{\n        \"match\": \"\\\\,\",\n        \"name\": \"punctuation.other.comma.go\"\n      }, {\n        \"match\": \"\\\\.(?!\\\\.\\\\.)\",\n        \"name\": \"punctuation.other.period.go\"\n      }, {\n        \"match\": \":(?!=)\",\n        \"name\": \"punctuation.other.colon.go\"\n      }]\n    },\n    \"double_parentheses_types\": {\n      \"captures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#type-declarations-without-brackets\"\n          }, {\n            \"match\": \"\\\\(\",\n            \"name\": \"punctuation.definition.begin.bracket.round.go\"\n          }, {\n            \"match\": \"\\\\)\",\n            \"name\": \"punctuation.definition.end.bracket.round.go\"\n          }, {\n            \"match\": \"\\\\[\",\n            \"name\": \"punctuation.definition.begin.bracket.square.go\"\n          }, {\n            \"match\": \"\\\\]\",\n            \"name\": \"punctuation.definition.end.bracket.square.go\"\n          }, {\n            \"match\": \"\\\\w+\",\n            \"name\": \"entity.name.type.go\"\n          }]\n        }\n      },\n      \"comment\": \"double parentheses types\",\n      \"match\": \"(?:(?<!\\\\w)(\\\\((?:[\\\\w\\\\.\\\\[\\\\]\\\\*\\\\&]+)\\\\))(?=\\\\())\"\n    },\n    \"field_hover\": {\n      \"captures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#type-declarations\"\n          }, {\n            \"match\": \"\\\\w+\",\n            \"name\": \"variable.other.property.go\"\n          }]\n        },\n        \"2\": {\n          \"patterns\": [{\n            \"match\": \"\\\\binvalid\\\\b\\\\s+\\\\btype\\\\b\",\n            \"name\": \"invalid.field.go\"\n          }, {\n            \"include\": \"#type-declarations-without-brackets\"\n          }, {\n            \"include\": \"#parameter-variable-types\"\n          }, {\n            \"match\": \"\\\\w+\",\n            \"name\": \"entity.name.type.go\"\n          }]\n        }\n      },\n      \"comment\": \"struct field property and types when hovering with the mouse\",\n      \"match\": \"(?:(?<=^\\\\bfield\\\\b)\\\\s+([\\\\w\\\\*\\\\.]+)\\\\s+([\\\\s\\\\S]+))\"\n    },\n    \"function_declaration\": {\n      \"begin\": \"(?:^(\\\\bfunc\\\\b)(?:\\\\s*(\\\\([^\\\\)]+\\\\)\\\\s*)?(?:(\\\\w+)(?=\\\\(|\\\\[))?))\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.function.go\"\n        },\n        \"2\": {\n          \"patterns\": [{\n            \"begin\": \"\\\\(\",\n            \"beginCaptures\": {\n              \"0\": {\n                \"name\": \"punctuation.definition.begin.bracket.round.go\"\n              }\n            },\n            \"end\": \"\\\\)\",\n            \"endCaptures\": {\n              \"0\": {\n                \"name\": \"punctuation.definition.end.bracket.round.go\"\n              }\n            },\n            \"patterns\": [{\n              \"captures\": {\n                \"1\": {\n                  \"name\": \"variable.parameter.go\"\n                },\n                \"2\": {\n                  \"patterns\": [{\n                    \"include\": \"#type-declarations-without-brackets\"\n                  }, {\n                    \"include\": \"#parameter-variable-types\"\n                  }, {\n                    \"match\": \"(?:\\\\w+)\",\n                    \"name\": \"entity.name.type.go\"\n                  }]\n                }\n              },\n              \"match\": \"(?:(\\\\w+(?:\\\\s+))?((?:[\\\\w\\\\.\\\\*]+)(?:\\\\[(?:(?:(?:[\\\\w\\\\.\\\\*]+)(?:\\\\,\\\\s+)?)+)?\\\\])?))\"\n            }, {\n              \"include\": \"$self\"\n            }]\n          }]\n        },\n        \"3\": {\n          \"patterns\": [{\n            \"match\": \"\\\\d\\\\w*\",\n            \"name\": \"invalid.illegal.identifier.go\"\n          }, {\n            \"match\": \"\\\\w+\",\n            \"name\": \"entity.name.function.go\"\n          }]\n        }\n      },\n      \"comment\": \"Function declarations\",\n      \"end\": \"(?:(?<=\\\\))\\\\s*((?:(?:(?:[\\\\*\\\\[\\\\]]+)?(?:\\\\<\\\\-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*\\\\<\\\\-)?\\\\s*)+)?(?!(?:[\\\\[\\\\]\\\\*]+)?(?:\\\\bstruct\\\\b|\\\\binterface\\\\b))[\\\\w\\\\.\\\\-\\\\*\\\\[\\\\]]+)?\\\\s*(?=\\\\{))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#type-declarations-without-brackets\"\n          }, {\n            \"include\": \"#parameter-variable-types\"\n          }, {\n            \"match\": \"(?:\\\\w+)\",\n            \"name\": \"entity.name.type.go\"\n          }]\n        }\n      },\n      \"patterns\": [{\n        \"begin\": \"\\\\(\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.begin.bracket.round.go\"\n          }\n        },\n        \"end\": \"\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.end.bracket.round.go\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#function_param_types\"\n        }]\n      }, {\n        \"begin\": \"(?:([\\\\w\\\\.\\\\*]+)?(\\\\[))\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations\"\n            }, {\n              \"match\": \"(?:\\\\w+)\",\n              \"name\": \"entity.name.type.go\"\n            }]\n          },\n          \"2\": {\n            \"name\": \"punctuation.definition.begin.bracket.square.go\"\n          }\n        },\n        \"end\": \"\\\\]\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.end.bracket.square.go\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#generic_param_types\"\n        }]\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations-without-brackets\"\n            }, {\n              \"include\": \"#parameter-variable-types\"\n            }, {\n              \"match\": \"\\\\w+\",\n              \"name\": \"entity.name.type.go\"\n            }]\n          }\n        },\n        \"comment\": \"single function as a type returned type(s) declaration\",\n        \"match\": \"(?:(?<=\\\\))(?:\\\\s*)((?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:\\\\<\\\\-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*\\\\<\\\\-)?\\\\s*)+)?[\\\\w\\\\*\\\\.\\\\[\\\\]\\\\<\\\\>\\\\-]+(?:\\\\s*)(?:\\\\/(?:\\\\/|\\\\*).*)?)$)\"\n      }, {\n        \"include\": \"$self\"\n      }]\n    },\n    \"function_param_types\": {\n      \"comment\": \"function parameter variables and types\",\n      \"patterns\": [{\n        \"include\": \"#struct_variables_types\"\n      }, {\n        \"include\": \"#interface_variables_types\"\n      }, {\n        \"include\": \"#type-declarations-without-brackets\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations\"\n            }, {\n              \"match\": \"\\\\w+\",\n              \"name\": \"variable.parameter.go\"\n            }]\n          }\n        },\n        \"comment\": \"struct/interface type declaration\",\n        \"match\": \"((?:(?:\\\\b\\\\w+\\\\,\\\\s*)+)?\\\\b\\\\w+)\\\\s+(?=(?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:\\\\<\\\\-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*\\\\<\\\\-)?\\\\s*)+)?(?:[\\\\[\\\\]\\\\*]+)?\\\\b(?:struct|interface)\\\\b\\\\s*\\\\{)\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations\"\n            }, {\n              \"match\": \"\\\\w+\",\n              \"name\": \"variable.parameter.go\"\n            }]\n          }\n        },\n        \"comment\": \"multiple parameters one type -with multilines\",\n        \"match\": \"(?:(?:(?<=\\\\()|^\\\\s*)((?:(?:\\\\b\\\\w+\\\\,\\\\s*)+)(?:/(?:/|\\\\*).*)?)$)\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"patterns\": [{\n              \"include\": \"#delimiters\"\n            }, {\n              \"match\": \"\\\\w+\",\n              \"name\": \"variable.parameter.go\"\n            }]\n          },\n          \"2\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations-without-brackets\"\n            }, {\n              \"include\": \"#parameter-variable-types\"\n            }, {\n              \"match\": \"(?:\\\\w+)\",\n              \"name\": \"entity.name.type.go\"\n            }]\n          }\n        },\n        \"comment\": \"multiple params and types | multiple params one type | one param one type\",\n        \"match\": \"(?:((?:(?:\\\\b\\\\w+\\\\,\\\\s*)+)?\\\\b\\\\w+)(?:\\\\s+)((?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:\\\\<\\\\-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*\\\\<\\\\-)?\\\\s*)+)?(?:(?:(?:[\\\\w\\\\[\\\\]\\\\.\\\\*]+)?(?:(?:\\\\bfunc\\\\b\\\\((?:[^\\\\)]+)?\\\\))(?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:\\\\<\\\\-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*\\\\<\\\\-)?\\\\s*)+)?(?:\\\\s*))+(?:(?:(?:[\\\\w\\\\*\\\\.\\\\[\\\\]]+)|(?:\\\\((?:[^\\\\)]+)?\\\\))))?)|(?:(?:[\\\\[\\\\]\\\\*]+)?[\\\\w\\\\*\\\\.]+(?:\\\\[(?:[^\\\\]]+)\\\\])?(?:[\\\\w\\\\.\\\\*]+)?)+)))\"\n      }, {\n        \"include\": \"#parameter-variable-types\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations\"\n            }, {\n              \"match\": \"(?:\\\\w+)\",\n              \"name\": \"entity.name.type.go\"\n            }]\n          }\n        },\n        \"comment\": \"other types\",\n        \"match\": \"([\\\\w\\\\.]+)\"\n      }, {\n        \"include\": \"$self\"\n      }]\n    },\n    \"functions\": {\n      \"begin\": \"(?:(\\\\bfunc\\\\b)(?=\\\\())\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.function.go\"\n        }\n      },\n      \"comment\": \"Functions\",\n      \"end\": \"(?:(?<=\\\\))(\\\\s*(?:(?:[\\\\*\\\\[\\\\]]+)?(?:\\\\<\\\\-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*\\\\<\\\\-)?\\\\s*)+)?((?:(?:\\\\s*(?:(?:[\\\\[\\\\]\\\\*]+)?[\\\\w\\\\.\\\\*]+)?(?:(?:\\\\[(?:(?:[\\\\w\\\\.\\\\*]+)?(?:\\\\[(?:[^\\\\]]+)?\\\\])?(?:\\\\,\\\\s+)?)+\\\\])|(?:\\\\((?:[^\\\\)]+)?\\\\)))?(?:[\\\\w\\\\.\\\\*]+)?)(?:\\\\s*)(?=\\\\{))|(?:\\\\s*(?:(?:(?:[\\\\[\\\\]\\\\*]+)?(?!\\\\bfunc\\\\b)(?:[\\\\w\\\\.\\\\*]+)(?:\\\\[(?:(?:[\\\\w\\\\.\\\\*]+)?(?:\\\\[(?:[^\\\\]]+)?\\\\])?(?:\\\\,\\\\s+)?)+\\\\])?(?:[\\\\w\\\\.\\\\*]+)?)|(?:\\\\((?:[^\\\\)]+)?\\\\)))))?)\",\n      \"endCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#type-declarations\"\n          }]\n        },\n        \"2\": {\n          \"patterns\": [{\n            \"include\": \"#type-declarations-without-brackets\"\n          }, {\n            \"include\": \"#parameter-variable-types\"\n          }, {\n            \"match\": \"(?:\\\\w+)\",\n            \"name\": \"entity.name.type.go\"\n          }]\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#parameter-variable-types\"\n      }]\n    },\n    \"functions_inline\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"keyword.function.go\"\n        },\n        \"2\": {\n          \"patterns\": [{\n            \"include\": \"#type-declarations-without-brackets\"\n          }, {\n            \"begin\": \"\\\\(\",\n            \"beginCaptures\": {\n              \"0\": {\n                \"name\": \"punctuation.definition.begin.bracket.round.go\"\n              }\n            },\n            \"end\": \"\\\\)\",\n            \"endCaptures\": {\n              \"0\": {\n                \"name\": \"punctuation.definition.end.bracket.round.go\"\n              }\n            },\n            \"patterns\": [{\n              \"include\": \"#function_param_types\"\n            }, {\n              \"include\": \"$self\"\n            }]\n          }, {\n            \"match\": \"\\\\[\",\n            \"name\": \"punctuation.definition.begin.bracket.square.go\"\n          }, {\n            \"match\": \"\\\\]\",\n            \"name\": \"punctuation.definition.end.bracket.square.go\"\n          }, {\n            \"match\": \"\\\\{\",\n            \"name\": \"punctuation.definition.begin.bracket.curly.go\"\n          }, {\n            \"match\": \"\\\\}\",\n            \"name\": \"punctuation.definition.end.bracket.curly.go\"\n          }, {\n            \"match\": \"(?:\\\\w+)\",\n            \"name\": \"entity.name.type.go\"\n          }]\n        }\n      },\n      \"comment\": \"functions in-line with multi return types\",\n      \"match\": \"(?:(\\\\bfunc\\\\b)((?:\\\\((?:[^/]*?)\\\\))(?:\\\\s+)(?:\\\\((?:[^/]*?)\\\\)))(?:\\\\s+)(?=\\\\{))\"\n    },\n    \"generic_param_types\": {\n      \"comment\": \"generic parameter variables and types\",\n      \"patterns\": [{\n        \"include\": \"#struct_variables_types\"\n      }, {\n        \"include\": \"#interface_variables_types\"\n      }, {\n        \"include\": \"#type-declarations-without-brackets\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations\"\n            }, {\n              \"match\": \"\\\\w+\",\n              \"name\": \"variable.parameter.go\"\n            }]\n          }\n        },\n        \"comment\": \"struct/interface type declaration\",\n        \"match\": \"((?:(?:\\\\b\\\\w+\\\\,\\\\s*)+)?\\\\b\\\\w+)\\\\s+(?=(?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:\\\\<\\\\-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*\\\\<\\\\-)?\\\\s*)+)?(?:[\\\\[\\\\]\\\\*]+)?\\\\b(?:struct|interface)\\\\b\\\\s*\\\\{)\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations\"\n            }, {\n              \"match\": \"\\\\w+\",\n              \"name\": \"variable.parameter.go\"\n            }]\n          }\n        },\n        \"comment\": \"multiple parameters one type -with multilines\",\n        \"match\": \"(?:(?:(?<=\\\\()|^\\\\s*)((?:(?:\\\\b\\\\w+\\\\,\\\\s*)+)(?:/(?:/|\\\\*).*)?)$)\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"patterns\": [{\n              \"include\": \"#delimiters\"\n            }, {\n              \"match\": \"\\\\w+\",\n              \"name\": \"variable.parameter.go\"\n            }]\n          },\n          \"2\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations-without-brackets\"\n            }, {\n              \"include\": \"#parameter-variable-types\"\n            }, {\n              \"match\": \"(?:\\\\w+)\",\n              \"name\": \"entity.name.type.go\"\n            }]\n          },\n          \"3\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations\"\n            }, {\n              \"match\": \"(?:\\\\w+)\",\n              \"name\": \"entity.name.type.go\"\n            }]\n          }\n        },\n        \"comment\": \"multiple params and types | multiple types one param\",\n        \"match\": \"(?:((?:(?:\\\\b\\\\w+\\\\,\\\\s*)+)?\\\\b\\\\w+)(?:\\\\s+)((?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:\\\\<\\\\-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*\\\\<\\\\-)?\\\\s*)+)?(?:(?:(?:[\\\\w\\\\[\\\\]\\\\.\\\\*]+)?(?:(?:\\\\bfunc\\\\b\\\\((?:[^\\\\)]+)?\\\\))(?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:\\\\<\\\\-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*\\\\<\\\\-)?\\\\s*)+)?(?:\\\\s*))+(?:(?:(?:[\\\\w\\\\*\\\\.]+)|(?:\\\\((?:[^\\\\)]+)?\\\\))))?)|(?:(?:(?:[\\\\w\\\\*\\\\.\\\\~]+)|(?:\\\\[(?:(?:[\\\\w\\\\.\\\\*]+)?(?:\\\\[(?:[^\\\\]]+)?\\\\])?(?:\\\\,\\\\s+)?)+\\\\]))(?:[\\\\w\\\\.\\\\*]+)?)+)))\"\n      }, {\n        \"include\": \"#parameter-variable-types\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations\"\n            }, {\n              \"match\": \"(?:\\\\w+)\",\n              \"name\": \"entity.name.type.go\"\n            }]\n          }\n        },\n        \"comment\": \"other types\",\n        \"match\": \"(?:\\\\b([\\\\w\\\\.]+))\"\n      }, {\n        \"include\": \"$self\"\n      }]\n    },\n    \"generic_types\": {\n      \"captures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#type-declarations\"\n          }, {\n            \"match\": \"\\\\w+\",\n            \"name\": \"entity.name.type.go\"\n          }]\n        },\n        \"2\": {\n          \"patterns\": [{\n            \"include\": \"#parameter-variable-types\"\n          }]\n        }\n      },\n      \"comment\": \"Generic support for all types\",\n      \"match\": \"(?:([\\\\w\\\\.\\\\*]+)(\\\\[(?:[^\\\\]]+)?\\\\]))\"\n    },\n    \"group-functions\": {\n      \"comment\": \"all statements related to functions\",\n      \"patterns\": [{\n        \"include\": \"#function_declaration\"\n      }, {\n        \"include\": \"#functions_inline\"\n      }, {\n        \"include\": \"#functions\"\n      }, {\n        \"include\": \"#built_in_functions\"\n      }, {\n        \"include\": \"#support_functions\"\n      }]\n    },\n    \"group-types\": {\n      \"comment\": \"all statements related to types\",\n      \"patterns\": [{\n        \"include\": \"#other_struct_interface_expressions\"\n      }, {\n        \"include\": \"#type_assertion_inline\"\n      }, {\n        \"include\": \"#struct_variables_types\"\n      }, {\n        \"include\": \"#interface_variables_types\"\n      }, {\n        \"include\": \"#single_type\"\n      }, {\n        \"include\": \"#multi_types\"\n      }, {\n        \"include\": \"#struct_interface_declaration\"\n      }, {\n        \"include\": \"#double_parentheses_types\"\n      }, {\n        \"include\": \"#switch_types\"\n      }, {\n        \"include\": \"#type-declarations\"\n      }]\n    },\n    \"group-variables\": {\n      \"comment\": \"all statements related to variables\",\n      \"patterns\": [{\n        \"include\": \"#var_const_assignment\"\n      }, {\n        \"include\": \"#variable_assignment\"\n      }, {\n        \"include\": \"#label_loop_variables\"\n      }, {\n        \"include\": \"#slice_index_variables\"\n      }, {\n        \"include\": \"#property_variables\"\n      }, {\n        \"include\": \"#switch_select_case_variables\"\n      }, {\n        \"include\": \"#other_variables\"\n      }]\n    },\n    \"import\": {\n      \"comment\": \"import\",\n      \"patterns\": [{\n        \"begin\": \"\\\\b(import)\\\\s+\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.control.import.go\"\n          }\n        },\n        \"comment\": \"import\",\n        \"end\": \"(?!\\\\G)\",\n        \"patterns\": [{\n          \"include\": \"#imports\"\n        }]\n      }]\n    },\n    \"imports\": {\n      \"comment\": \"import package(s)\",\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"patterns\": [{\n              \"include\": \"#delimiters\"\n            }, {\n              \"match\": \"(?:\\\\w+)\",\n              \"name\": \"variable.other.import.go\"\n            }]\n          },\n          \"2\": {\n            \"name\": \"string.quoted.double.go\"\n          },\n          \"3\": {\n            \"name\": \"punctuation.definition.string.begin.go\"\n          },\n          \"4\": {\n            \"name\": \"entity.name.import.go\"\n          },\n          \"5\": {\n            \"name\": \"punctuation.definition.string.end.go\"\n          }\n        },\n        \"match\": '(\\\\s*[\\\\w\\\\.]+)?\\\\s*((\")([^\"]*)(\"))'\n      }, {\n        \"begin\": \"\\\\(\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.imports.begin.bracket.round.go\"\n          }\n        },\n        \"end\": \"\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.imports.end.bracket.round.go\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#comments\"\n        }, {\n          \"include\": \"#imports\"\n        }]\n      }, {\n        \"include\": \"$self\"\n      }]\n    },\n    \"interface_variables_types\": {\n      \"begin\": \"(\\\\binterface\\\\b)\\\\s*(\\\\{)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.interface.go\"\n        },\n        \"2\": {\n          \"name\": \"punctuation.definition.begin.bracket.curly.go\"\n        }\n      },\n      \"comment\": \"interface variable types\",\n      \"end\": \"\\\\}\",\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.end.bracket.curly.go\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#interface_variables_types_field\"\n      }, {\n        \"include\": \"$self\"\n      }]\n    },\n    \"interface_variables_types_field\": {\n      \"comment\": \"interface variable type fields\",\n      \"patterns\": [{\n        \"include\": \"#support_functions\"\n      }, {\n        \"include\": \"#type-declarations-without-brackets\"\n      }, {\n        \"begin\": \"(?:([\\\\w\\\\.\\\\*]+)?(\\\\[))\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations\"\n            }, {\n              \"match\": \"(?:\\\\w+)\",\n              \"name\": \"entity.name.type.go\"\n            }]\n          },\n          \"2\": {\n            \"name\": \"punctuation.definition.begin.bracket.square.go\"\n          }\n        },\n        \"end\": \"\\\\]\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.end.bracket.square.go\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#generic_param_types\"\n        }]\n      }, {\n        \"begin\": \"\\\\(\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.begin.bracket.round.go\"\n          }\n        },\n        \"end\": \"\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.end.bracket.round.go\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#function_param_types\"\n        }]\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations\"\n            }, {\n              \"match\": \"\\\\w+\",\n              \"name\": \"entity.name.type.go\"\n            }]\n          }\n        },\n        \"comment\": \"other types\",\n        \"match\": \"([\\\\w\\\\.]+)\"\n      }]\n    },\n    \"keywords\": {\n      \"patterns\": [{\n        \"comment\": \"Flow control keywords\",\n        \"match\": \"\\\\b(break|case|continue|default|defer|else|fallthrough|for|go|goto|if|range|return|select|switch)\\\\b\",\n        \"name\": \"keyword.control.go\"\n      }, {\n        \"match\": \"\\\\bchan\\\\b\",\n        \"name\": \"keyword.channel.go\"\n      }, {\n        \"match\": \"\\\\bconst\\\\b\",\n        \"name\": \"keyword.const.go\"\n      }, {\n        \"match\": \"\\\\bvar\\\\b\",\n        \"name\": \"keyword.var.go\"\n      }, {\n        \"match\": \"\\\\bfunc\\\\b\",\n        \"name\": \"keyword.function.go\"\n      }, {\n        \"match\": \"\\\\binterface\\\\b\",\n        \"name\": \"keyword.interface.go\"\n      }, {\n        \"match\": \"\\\\bmap\\\\b\",\n        \"name\": \"keyword.map.go\"\n      }, {\n        \"match\": \"\\\\bstruct\\\\b\",\n        \"name\": \"keyword.struct.go\"\n      }, {\n        \"match\": \"\\\\bimport\\\\b\",\n        \"name\": \"keyword.control.import.go\"\n      }, {\n        \"match\": \"\\\\btype\\\\b\",\n        \"name\": \"keyword.type.go\"\n      }]\n    },\n    \"label_loop_variables\": {\n      \"captures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#type-declarations\"\n          }, {\n            \"match\": \"\\\\w+\",\n            \"name\": \"variable.other.label.go\"\n          }]\n        }\n      },\n      \"comment\": \"labeled loop variable name\",\n      \"match\": \"((?:^\\\\s*\\\\w+:\\\\s*$)|(?:^\\\\s*(?:\\\\bbreak\\\\b|\\\\bgoto\\\\b|\\\\bcontinue\\\\b)\\\\s+\\\\w+(?:\\\\s*/(?:/|\\\\*)\\\\s*.*)?$))\"\n    },\n    \"language_constants\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"constant.language.boolean.go\"\n        },\n        \"2\": {\n          \"name\": \"constant.language.null.go\"\n        },\n        \"3\": {\n          \"name\": \"constant.language.iota.go\"\n        }\n      },\n      \"comment\": \"Language constants\",\n      \"match\": \"\\\\b(?:(true|false)|(nil)|(iota))\\\\b\"\n    },\n    \"map_types\": {\n      \"begin\": \"(?:(\\\\bmap\\\\b)(\\\\[))\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.map.go\"\n        },\n        \"2\": {\n          \"name\": \"punctuation.definition.begin.bracket.square.go\"\n        }\n      },\n      \"comment\": \"map types\",\n      \"end\": \"(?:(\\\\])((?:(?:(?:[\\\\*\\\\[\\\\]]+)?(?:\\\\<\\\\-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*\\\\<\\\\-)?\\\\s*)+)?(?!(?:[\\\\[\\\\]\\\\*]+)?\\\\b(?:func|struct|map)\\\\b)(?:[\\\\*\\\\[\\\\]]+)?(?:[\\\\w\\\\.]+)(?:\\\\[(?:(?:[\\\\w\\\\.\\\\*\\\\[\\\\]\\\\{\\\\}]+)(?:(?:\\\\,\\\\s*(?:[\\\\w\\\\.\\\\*\\\\[\\\\]\\\\{\\\\}]+))*))?\\\\])?)?)\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.end.bracket.square.go\"\n        },\n        \"2\": {\n          \"patterns\": [{\n            \"include\": \"#type-declarations-without-brackets\"\n          }, {\n            \"match\": \"\\\\[\",\n            \"name\": \"punctuation.definition.begin.bracket.square.go\"\n          }, {\n            \"match\": \"\\\\]\",\n            \"name\": \"punctuation.definition.end.bracket.square.go\"\n          }, {\n            \"match\": \"\\\\w+\",\n            \"name\": \"entity.name.type.go\"\n          }]\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#type-declarations-without-brackets\"\n      }, {\n        \"include\": \"#parameter-variable-types\"\n      }, {\n        \"include\": \"#functions\"\n      }, {\n        \"match\": \"\\\\[\",\n        \"name\": \"punctuation.definition.begin.bracket.square.go\"\n      }, {\n        \"match\": \"\\\\]\",\n        \"name\": \"punctuation.definition.end.bracket.square.go\"\n      }, {\n        \"match\": \"\\\\{\",\n        \"name\": \"punctuation.definition.begin.bracket.curly.go\"\n      }, {\n        \"match\": \"\\\\}\",\n        \"name\": \"punctuation.definition.end.bracket.curly.go\"\n      }, {\n        \"match\": \"\\\\(\",\n        \"name\": \"punctuation.definition.begin.bracket.round.go\"\n      }, {\n        \"match\": \"\\\\)\",\n        \"name\": \"punctuation.definition.end.bracket.round.go\"\n      }, {\n        \"match\": \"\\\\w+\",\n        \"name\": \"entity.name.type.go\"\n      }]\n    },\n    \"multi_types\": {\n      \"begin\": \"(\\\\btype\\\\b)\\\\s*(\\\\()\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.type.go\"\n        },\n        \"2\": {\n          \"name\": \"punctuation.definition.begin.bracket.round.go\"\n        }\n      },\n      \"comment\": \"multi type declaration\",\n      \"end\": \"\\\\)\",\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.end.bracket.round.go\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#struct_variables_types\"\n      }, {\n        \"include\": \"#interface_variables_types\"\n      }, {\n        \"include\": \"#type-declarations-without-brackets\"\n      }, {\n        \"include\": \"#parameter-variable-types\"\n      }, {\n        \"match\": \"(?:\\\\w+)\",\n        \"name\": \"entity.name.type.go\"\n      }]\n    },\n    \"numeric_literals\": {\n      \"captures\": {\n        \"0\": {\n          \"patterns\": [{\n            \"begin\": \"(?=.)\",\n            \"end\": \"(?:\\\\n|$)\",\n            \"patterns\": [{\n              \"captures\": {\n                \"1\": {\n                  \"name\": \"constant.numeric.decimal.go\",\n                  \"patterns\": [{\n                    \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\",\n                    \"name\": \"punctuation.separator.constant.numeric.go\"\n                  }]\n                },\n                \"2\": {\n                  \"name\": \"punctuation.separator.constant.numeric.go\"\n                },\n                \"3\": {\n                  \"name\": \"constant.numeric.decimal.point.go\"\n                },\n                \"4\": {\n                  \"name\": \"constant.numeric.decimal.go\",\n                  \"patterns\": [{\n                    \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\",\n                    \"name\": \"punctuation.separator.constant.numeric.go\"\n                  }]\n                },\n                \"5\": {\n                  \"name\": \"punctuation.separator.constant.numeric.go\"\n                },\n                \"6\": {\n                  \"name\": \"keyword.other.unit.exponent.decimal.go\"\n                },\n                \"7\": {\n                  \"name\": \"keyword.operator.plus.exponent.decimal.go\"\n                },\n                \"8\": {\n                  \"name\": \"keyword.operator.minus.exponent.decimal.go\"\n                },\n                \"9\": {\n                  \"name\": \"constant.numeric.exponent.decimal.go\",\n                  \"patterns\": [{\n                    \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\",\n                    \"name\": \"punctuation.separator.constant.numeric.go\"\n                  }]\n                },\n                \"10\": {\n                  \"name\": \"keyword.other.unit.imaginary.go\"\n                },\n                \"11\": {\n                  \"name\": \"constant.numeric.decimal.go\",\n                  \"patterns\": [{\n                    \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\",\n                    \"name\": \"punctuation.separator.constant.numeric.go\"\n                  }]\n                },\n                \"12\": {\n                  \"name\": \"punctuation.separator.constant.numeric.go\"\n                },\n                \"13\": {\n                  \"name\": \"keyword.other.unit.exponent.decimal.go\"\n                },\n                \"14\": {\n                  \"name\": \"keyword.operator.plus.exponent.decimal.go\"\n                },\n                \"15\": {\n                  \"name\": \"keyword.operator.minus.exponent.decimal.go\"\n                },\n                \"16\": {\n                  \"name\": \"constant.numeric.exponent.decimal.go\",\n                  \"patterns\": [{\n                    \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\",\n                    \"name\": \"punctuation.separator.constant.numeric.go\"\n                  }]\n                },\n                \"17\": {\n                  \"name\": \"keyword.other.unit.imaginary.go\"\n                },\n                \"18\": {\n                  \"name\": \"constant.numeric.decimal.point.go\"\n                },\n                \"19\": {\n                  \"name\": \"constant.numeric.decimal.go\",\n                  \"patterns\": [{\n                    \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\",\n                    \"name\": \"punctuation.separator.constant.numeric.go\"\n                  }]\n                },\n                \"20\": {\n                  \"name\": \"punctuation.separator.constant.numeric.go\"\n                },\n                \"21\": {\n                  \"name\": \"keyword.other.unit.exponent.decimal.go\"\n                },\n                \"22\": {\n                  \"name\": \"keyword.operator.plus.exponent.decimal.go\"\n                },\n                \"23\": {\n                  \"name\": \"keyword.operator.minus.exponent.decimal.go\"\n                },\n                \"24\": {\n                  \"name\": \"constant.numeric.exponent.decimal.go\",\n                  \"patterns\": [{\n                    \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\",\n                    \"name\": \"punctuation.separator.constant.numeric.go\"\n                  }]\n                },\n                \"25\": {\n                  \"name\": \"keyword.other.unit.imaginary.go\"\n                },\n                \"26\": {\n                  \"name\": \"keyword.other.unit.hexadecimal.go\"\n                },\n                \"27\": {\n                  \"name\": \"constant.numeric.hexadecimal.go\",\n                  \"patterns\": [{\n                    \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\",\n                    \"name\": \"punctuation.separator.constant.numeric.go\"\n                  }]\n                },\n                \"28\": {\n                  \"name\": \"punctuation.separator.constant.numeric.go\"\n                },\n                \"29\": {\n                  \"name\": \"constant.numeric.hexadecimal.go\"\n                },\n                \"30\": {\n                  \"name\": \"constant.numeric.hexadecimal.go\",\n                  \"patterns\": [{\n                    \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\",\n                    \"name\": \"punctuation.separator.constant.numeric.go\"\n                  }]\n                },\n                \"31\": {\n                  \"name\": \"punctuation.separator.constant.numeric.go\"\n                },\n                \"32\": {\n                  \"name\": \"keyword.other.unit.exponent.hexadecimal.go\"\n                },\n                \"33\": {\n                  \"name\": \"keyword.operator.plus.exponent.hexadecimal.go\"\n                },\n                \"34\": {\n                  \"name\": \"keyword.operator.minus.exponent.hexadecimal.go\"\n                },\n                \"35\": {\n                  \"name\": \"constant.numeric.exponent.hexadecimal.go\",\n                  \"patterns\": [{\n                    \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\",\n                    \"name\": \"punctuation.separator.constant.numeric.go\"\n                  }]\n                },\n                \"36\": {\n                  \"name\": \"keyword.other.unit.imaginary.go\"\n                },\n                \"37\": {\n                  \"name\": \"keyword.other.unit.hexadecimal.go\"\n                },\n                \"38\": {\n                  \"name\": \"constant.numeric.hexadecimal.go\",\n                  \"patterns\": [{\n                    \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\",\n                    \"name\": \"punctuation.separator.constant.numeric.go\"\n                  }]\n                },\n                \"39\": {\n                  \"name\": \"punctuation.separator.constant.numeric.go\"\n                },\n                \"40\": {\n                  \"name\": \"keyword.other.unit.exponent.hexadecimal.go\"\n                },\n                \"41\": {\n                  \"name\": \"keyword.operator.plus.exponent.hexadecimal.go\"\n                },\n                \"42\": {\n                  \"name\": \"keyword.operator.minus.exponent.hexadecimal.go\"\n                },\n                \"43\": {\n                  \"name\": \"constant.numeric.exponent.hexadecimal.go\",\n                  \"patterns\": [{\n                    \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\",\n                    \"name\": \"punctuation.separator.constant.numeric.go\"\n                  }]\n                },\n                \"44\": {\n                  \"name\": \"keyword.other.unit.imaginary.go\"\n                },\n                \"45\": {\n                  \"name\": \"keyword.other.unit.hexadecimal.go\"\n                },\n                \"46\": {\n                  \"name\": \"constant.numeric.hexadecimal.go\"\n                },\n                \"47\": {\n                  \"name\": \"constant.numeric.hexadecimal.go\",\n                  \"patterns\": [{\n                    \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\",\n                    \"name\": \"punctuation.separator.constant.numeric.go\"\n                  }]\n                },\n                \"48\": {\n                  \"name\": \"punctuation.separator.constant.numeric.go\"\n                },\n                \"49\": {\n                  \"name\": \"keyword.other.unit.exponent.hexadecimal.go\"\n                },\n                \"50\": {\n                  \"name\": \"keyword.operator.plus.exponent.hexadecimal.go\"\n                },\n                \"51\": {\n                  \"name\": \"keyword.operator.minus.exponent.hexadecimal.go\"\n                },\n                \"52\": {\n                  \"name\": \"constant.numeric.exponent.hexadecimal.go\",\n                  \"patterns\": [{\n                    \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\",\n                    \"name\": \"punctuation.separator.constant.numeric.go\"\n                  }]\n                },\n                \"53\": {\n                  \"name\": \"keyword.other.unit.imaginary.go\"\n                }\n              },\n              \"match\": \"(?:(?:(?:(?:(?:\\\\G(?=[0-9.])(?!0[xXbBoO])([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?<=[0-9])\\\\.|\\\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?(?:(?<!_)([eE])(\\\\+?)(\\\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?(i(?!\\\\w))?(?:\\\\n|$)|\\\\G(?=[0-9.])(?!0[xXbBoO])([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(?<!_)([eE])(\\\\+?)(\\\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*))(i(?!\\\\w))?(?:\\\\n|$))|\\\\G((?:(?<=[0-9])\\\\.|\\\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(?:(?<!_)([eE])(\\\\+?)(\\\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?(i(?!\\\\w))?(?:\\\\n|$))|(\\\\G0[xX])_?([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?<=[0-9a-fA-F])\\\\.|\\\\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?(?<!_)([pP])(\\\\+?)(\\\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*))(i(?!\\\\w))?(?:\\\\n|$))|(\\\\G0[xX])_?([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(?<!_)([pP])(\\\\+?)(\\\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*))(i(?!\\\\w))?(?:\\\\n|$))|(\\\\G0[xX])((?:(?<=[0-9a-fA-F])\\\\.|\\\\.(?=[0-9a-fA-F])))([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(?<!_)([pP])(\\\\+?)(\\\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*))(i(?!\\\\w))?(?:\\\\n|$))\"\n            }, {\n              \"captures\": {\n                \"1\": {\n                  \"name\": \"constant.numeric.decimal.go\",\n                  \"patterns\": [{\n                    \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\",\n                    \"name\": \"punctuation.separator.constant.numeric.go\"\n                  }]\n                },\n                \"2\": {\n                  \"name\": \"punctuation.separator.constant.numeric.go\"\n                },\n                \"3\": {\n                  \"name\": \"keyword.other.unit.imaginary.go\"\n                },\n                \"4\": {\n                  \"name\": \"keyword.other.unit.binary.go\"\n                },\n                \"5\": {\n                  \"name\": \"constant.numeric.binary.go\",\n                  \"patterns\": [{\n                    \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\",\n                    \"name\": \"punctuation.separator.constant.numeric.go\"\n                  }]\n                },\n                \"6\": {\n                  \"name\": \"punctuation.separator.constant.numeric.go\"\n                },\n                \"7\": {\n                  \"name\": \"keyword.other.unit.imaginary.go\"\n                },\n                \"8\": {\n                  \"name\": \"keyword.other.unit.octal.go\"\n                },\n                \"9\": {\n                  \"name\": \"constant.numeric.octal.go\",\n                  \"patterns\": [{\n                    \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\",\n                    \"name\": \"punctuation.separator.constant.numeric.go\"\n                  }]\n                },\n                \"10\": {\n                  \"name\": \"punctuation.separator.constant.numeric.go\"\n                },\n                \"11\": {\n                  \"name\": \"keyword.other.unit.imaginary.go\"\n                },\n                \"12\": {\n                  \"name\": \"keyword.other.unit.hexadecimal.go\"\n                },\n                \"13\": {\n                  \"name\": \"constant.numeric.hexadecimal.go\",\n                  \"patterns\": [{\n                    \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\",\n                    \"name\": \"punctuation.separator.constant.numeric.go\"\n                  }]\n                },\n                \"14\": {\n                  \"name\": \"punctuation.separator.constant.numeric.go\"\n                },\n                \"15\": {\n                  \"name\": \"keyword.other.unit.imaginary.go\"\n                }\n              },\n              \"match\": \"(?:(?:(?:\\\\G(?=[0-9.])(?!0[xXbBoO])([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(i(?!\\\\w))?(?:\\\\n|$)|(\\\\G0[bB])_?([01](?:[01]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(i(?!\\\\w))?(?:\\\\n|$))|(\\\\G0[oO]?)_?((?:[0-7]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))+)(i(?!\\\\w))?(?:\\\\n|$))|(\\\\G0[xX])_?([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)(i(?!\\\\w))?(?:\\\\n|$))\"\n            }, {\n              \"match\": \"(?:(?:[0-9a-zA-Z_\\\\.])|(?<=[eEpP])[+-])+\",\n              \"name\": \"invalid.illegal.constant.numeric.go\"\n            }]\n          }]\n        }\n      },\n      \"match\": \"(?<!\\\\w)\\\\.?\\\\d(?:(?:[0-9a-zA-Z_\\\\.])|(?<=[eEpP])[+-])*\"\n    },\n    \"operators\": {\n      \"comment\": \"Note that the order here is very important!\",\n      \"patterns\": [{\n        \"match\": \"((?:\\\\*|\\\\&)+)(?:(?!\\\\d)(?=(?:[\\\\w\\\\[\\\\]])|(?:\\\\<\\\\-)))\",\n        \"name\": \"keyword.operator.address.go\"\n      }, {\n        \"match\": \"<\\\\-\",\n        \"name\": \"keyword.operator.channel.go\"\n      }, {\n        \"match\": \"\\\\-\\\\-\",\n        \"name\": \"keyword.operator.decrement.go\"\n      }, {\n        \"match\": \"\\\\+\\\\+\",\n        \"name\": \"keyword.operator.increment.go\"\n      }, {\n        \"match\": \"(==|!=|<=|>=|<(?!<)|>(?!>))\",\n        \"name\": \"keyword.operator.comparison.go\"\n      }, {\n        \"match\": \"(&&|\\\\|\\\\||!)\",\n        \"name\": \"keyword.operator.logical.go\"\n      }, {\n        \"match\": \"(=|\\\\+=|\\\\-=|\\\\|=|\\\\^=|\\\\*=|/=|:=|%=|<<=|>>=|&\\\\^=|&=)\",\n        \"name\": \"keyword.operator.assignment.go\"\n      }, {\n        \"match\": \"(\\\\+|\\\\-|\\\\*|/|%)\",\n        \"name\": \"keyword.operator.arithmetic.go\"\n      }, {\n        \"match\": \"(&(?!\\\\^)|\\\\||\\\\^|&\\\\^|<<|>>|\\\\~)\",\n        \"name\": \"keyword.operator.arithmetic.bitwise.go\"\n      }, {\n        \"match\": \"\\\\.\\\\.\\\\.\",\n        \"name\": \"keyword.operator.ellipsis.go\"\n      }]\n    },\n    \"other_struct_interface_expressions\": {\n      \"comment\": \"struct and interface expression in-line (before curly bracket)\",\n      \"patterns\": [{\n        \"comment\": \"after control variables must be added exactly here, do not move it! (changing may not affect tests, so be careful!)\",\n        \"include\": \"#after_control_variables\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations\"\n            }, {\n              \"match\": \"\\\\w+\",\n              \"name\": \"entity.name.type.go\"\n            }]\n          },\n          \"2\": {\n            \"patterns\": [{\n              \"begin\": \"\\\\[\",\n              \"beginCaptures\": {\n                \"0\": {\n                  \"name\": \"punctuation.definition.begin.bracket.square.go\"\n                }\n              },\n              \"end\": \"\\\\]\",\n              \"endCaptures\": {\n                \"0\": {\n                  \"name\": \"punctuation.definition.end.bracket.square.go\"\n                }\n              },\n              \"patterns\": [{\n                \"include\": \"#type-declarations\"\n              }, {\n                \"match\": \"\\\\w+\",\n                \"name\": \"entity.name.type.go\"\n              }, {\n                \"include\": \"$self\"\n              }]\n            }]\n          }\n        },\n        \"match\": \"(\\\\b[\\\\w\\\\.]+)(\\\\[(?:[^\\\\]]+)?\\\\])?(?=\\\\{)(?<!\\\\bstruct\\\\b|\\\\binterface\\\\b)\"\n      }]\n    },\n    \"other_variables\": {\n      \"comment\": \"all other variables\",\n      \"match\": \"\\\\w+\",\n      \"name\": \"variable.other.go\"\n    },\n    \"package_name\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\b(package)\\\\s+\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.package.go\"\n          }\n        },\n        \"comment\": \"package name\",\n        \"end\": \"(?!\\\\G)\",\n        \"patterns\": [{\n          \"match\": \"\\\\d\\\\w*\",\n          \"name\": \"invalid.illegal.identifier.go\"\n        }, {\n          \"match\": \"\\\\w+\",\n          \"name\": \"entity.name.type.package.go\"\n        }]\n      }]\n    },\n    \"parameter-variable-types\": {\n      \"comment\": \"function and generic parameter types\",\n      \"patterns\": [{\n        \"match\": \"\\\\{\",\n        \"name\": \"punctuation.definition.begin.bracket.curly.go\"\n      }, {\n        \"match\": \"\\\\}\",\n        \"name\": \"punctuation.definition.end.bracket.curly.go\"\n      }, {\n        \"begin\": \"(?:([\\\\w\\\\.\\\\*]+)?(\\\\[))\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations\"\n            }, {\n              \"match\": \"(?:\\\\w+)\",\n              \"name\": \"entity.name.type.go\"\n            }]\n          },\n          \"2\": {\n            \"name\": \"punctuation.definition.begin.bracket.square.go\"\n          }\n        },\n        \"end\": \"\\\\]\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.end.bracket.square.go\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#generic_param_types\"\n        }]\n      }, {\n        \"begin\": \"\\\\(\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.begin.bracket.round.go\"\n          }\n        },\n        \"end\": \"\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.end.bracket.round.go\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#function_param_types\"\n        }]\n      }]\n    },\n    \"property_variables\": {\n      \"captures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#type-declarations\"\n          }, {\n            \"match\": \"\\\\w+\",\n            \"name\": \"variable.other.property.go\"\n          }]\n        }\n      },\n      \"comment\": \"Property variables in struct\",\n      \"match\": \"((?:\\\\b[\\\\w\\\\.]+)(?:\\\\:(?!\\\\=)))\"\n    },\n    \"raw_string_literals\": {\n      \"begin\": \"`\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.string.begin.go\"\n        }\n      },\n      \"comment\": \"Raw string literals\",\n      \"end\": \"`\",\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.string.end.go\"\n        }\n      },\n      \"name\": \"string.quoted.raw.go\",\n      \"patterns\": [{\n        \"include\": \"#string_placeholder\"\n      }]\n    },\n    \"runes\": {\n      \"patterns\": [{\n        \"begin\": \"'\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.string.begin.go\"\n          }\n        },\n        \"end\": \"'\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.string.end.go\"\n          }\n        },\n        \"name\": \"string.quoted.rune.go\",\n        \"patterns\": [{\n          \"match\": `\\\\G(\\\\\\\\([0-7]{3}|[abfnrtv\\\\\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})|.)(?=')`,\n          \"name\": \"constant.other.rune.go\"\n        }, {\n          \"match\": \"[^']+\",\n          \"name\": \"invalid.illegal.unknown-rune.go\"\n        }]\n      }]\n    },\n    \"single_type\": {\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.type.go\"\n          },\n          \"2\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations\"\n            }, {\n              \"match\": \"\\\\w+\",\n              \"name\": \"entity.name.type.go\"\n            }]\n          },\n          \"3\": {\n            \"patterns\": [{\n              \"begin\": \"\\\\(\",\n              \"beginCaptures\": {\n                \"0\": {\n                  \"name\": \"punctuation.definition.begin.bracket.round.go\"\n                }\n              },\n              \"end\": \"\\\\)\",\n              \"endCaptures\": {\n                \"0\": {\n                  \"name\": \"punctuation.definition.end.bracket.round.go\"\n                }\n              },\n              \"patterns\": [{\n                \"include\": \"#function_param_types\"\n              }, {\n                \"include\": \"$self\"\n              }]\n            }, {\n              \"include\": \"#type-declarations\"\n            }, {\n              \"include\": \"#generic_types\"\n            }, {\n              \"match\": \"\\\\w+\",\n              \"name\": \"entity.name.type.go\"\n            }]\n          }\n        },\n        \"comment\": \"single type declaration\",\n        \"match\": \"(?:(?:^\\\\s*)(\\\\btype\\\\b)(?:\\\\s*)([\\\\w\\\\.\\\\*]+)(?:\\\\s+)(?!(?:\\\\=\\\\s*)?(?:[\\\\[\\\\]\\\\*]+)?\\\\b(?:struct|interface)\\\\b)([\\\\s\\\\S]+))\"\n      }, {\n        \"begin\": \"(?:(?:^|\\\\s+)(\\\\btype\\\\b)(?:\\\\s*)([\\\\w\\\\.\\\\*]+)(?=\\\\[))\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.type.go\"\n          },\n          \"2\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations-without-brackets\"\n            }, {\n              \"match\": \"\\\\w+\",\n              \"name\": \"entity.name.type.go\"\n            }]\n          }\n        },\n        \"comment\": \"single type declaration with generics\",\n        \"end\": \"(?:(?<=\\\\])((?:\\\\s+)(?:(?:(?:[\\\\*\\\\[\\\\]]+)?(?:\\\\<\\\\-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*\\\\<\\\\-)?\\\\s*)+)?(?:(?!(?:[\\\\[\\\\]\\\\*]+)?(?:\\\\bstruct\\\\b|\\\\binterface\\\\b|\\\\bfunc\\\\b))[\\\\w\\\\.\\\\-\\\\*\\\\[\\\\]]+(?:\\\\,\\\\s+[\\\\w\\\\.\\\\[\\\\]\\\\*]+)*))?)\",\n        \"endCaptures\": {\n          \"1\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations-without-brackets\"\n            }, {\n              \"match\": \"\\\\[\",\n              \"name\": \"punctuation.definition.begin.bracket.square.go\"\n            }, {\n              \"match\": \"\\\\]\",\n              \"name\": \"punctuation.definition.end.bracket.square.go\"\n            }, {\n              \"match\": \"\\\\w+\",\n              \"name\": \"entity.name.type.go\"\n            }]\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#struct_variables_types\"\n        }, {\n          \"include\": \"#type-declarations-without-brackets\"\n        }, {\n          \"include\": \"#parameter-variable-types\"\n        }, {\n          \"match\": \"\\\\[\",\n          \"name\": \"punctuation.definition.begin.bracket.square.go\"\n        }, {\n          \"match\": \"\\\\]\",\n          \"name\": \"punctuation.definition.end.bracket.square.go\"\n        }, {\n          \"match\": \"\\\\{\",\n          \"name\": \"punctuation.definition.begin.bracket.curly.go\"\n        }, {\n          \"match\": \"\\\\}\",\n          \"name\": \"punctuation.definition.end.bracket.curly.go\"\n        }, {\n          \"match\": \"\\\\(\",\n          \"name\": \"punctuation.definition.begin.bracket.round.go\"\n        }, {\n          \"match\": \"\\\\)\",\n          \"name\": \"punctuation.definition.end.bracket.round.go\"\n        }, {\n          \"match\": \"\\\\w+\",\n          \"name\": \"entity.name.type.go\"\n        }]\n      }]\n    },\n    \"slice_index_variables\": {\n      \"captures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#type-declarations\"\n          }, {\n            \"match\": \"\\\\w+\",\n            \"name\": \"variable.other.go\"\n          }]\n        }\n      },\n      \"comment\": \"slice index and capacity variables, to not scope them as property variables\",\n      \"match\": \"(?<=\\\\w\\\\[)((?:(?:\\\\b[\\\\w\\\\.\\\\*\\\\+/\\\\-\\\\%\\\\<\\\\>\\\\|\\\\&]+\\\\:)|(?:\\\\:\\\\b[\\\\w\\\\.\\\\*\\\\+/\\\\-\\\\%\\\\<\\\\>\\\\|\\\\&]+))(?:\\\\b[\\\\w\\\\.\\\\*\\\\+/\\\\-\\\\%\\\\<\\\\>\\\\|\\\\&]+)?(?:\\\\:\\\\b[\\\\w\\\\.\\\\*\\\\+/\\\\-\\\\%\\\\<\\\\>\\\\|\\\\&]+)?)(?=\\\\])\"\n    },\n    \"statements\": {\n      \"patterns\": [{\n        \"include\": \"#package_name\"\n      }, {\n        \"include\": \"#import\"\n      }, {\n        \"include\": \"#syntax_errors\"\n      }, {\n        \"include\": \"#group-functions\"\n      }, {\n        \"include\": \"#group-types\"\n      }, {\n        \"include\": \"#group-variables\"\n      }, {\n        \"include\": \"#field_hover\"\n      }]\n    },\n    \"storage_types\": {\n      \"patterns\": [{\n        \"match\": \"\\\\bbool\\\\b\",\n        \"name\": \"storage.type.boolean.go\"\n      }, {\n        \"match\": \"\\\\bbyte\\\\b\",\n        \"name\": \"storage.type.byte.go\"\n      }, {\n        \"match\": \"\\\\berror\\\\b\",\n        \"name\": \"storage.type.error.go\"\n      }, {\n        \"match\": \"\\\\b(complex(64|128)|float(32|64)|u?int(8|16|32|64)?)\\\\b\",\n        \"name\": \"storage.type.numeric.go\"\n      }, {\n        \"match\": \"\\\\brune\\\\b\",\n        \"name\": \"storage.type.rune.go\"\n      }, {\n        \"match\": \"\\\\bstring\\\\b\",\n        \"name\": \"storage.type.string.go\"\n      }, {\n        \"match\": \"\\\\buintptr\\\\b\",\n        \"name\": \"storage.type.uintptr.go\"\n      }, {\n        \"match\": \"\\\\bany\\\\b\",\n        \"name\": \"entity.name.type.any.go\"\n      }]\n    },\n    \"string_escaped_char\": {\n      \"patterns\": [{\n        \"match\": `\\\\\\\\([0-7]{3}|[abfnrtv\\\\\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})`,\n        \"name\": \"constant.character.escape.go\"\n      }, {\n        \"match\": `\\\\\\\\[^0-7xuUabfnrtv\\\\'\"]`,\n        \"name\": \"invalid.illegal.unknown-escape.go\"\n      }]\n    },\n    \"string_literals\": {\n      \"patterns\": [{\n        \"begin\": '\"',\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.string.begin.go\"\n          }\n        },\n        \"comment\": \"Interpreted string literals\",\n        \"end\": '\"',\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.string.end.go\"\n          }\n        },\n        \"name\": \"string.quoted.double.go\",\n        \"patterns\": [{\n          \"include\": \"#string_escaped_char\"\n        }, {\n          \"include\": \"#string_placeholder\"\n        }]\n      }]\n    },\n    \"string_placeholder\": {\n      \"patterns\": [{\n        \"match\": \"%(\\\\[\\\\d+\\\\])?([\\\\+#\\\\-0\\\\x20]{,2}((\\\\d+|\\\\*)?(\\\\.?(\\\\d+|\\\\*|(\\\\[\\\\d+\\\\])\\\\*?)?(\\\\[\\\\d+\\\\])?)?))?[vT%tbcdoqxXUbeEfFgGspw]\",\n        \"name\": \"constant.other.placeholder.go\"\n      }]\n    },\n    \"struct_interface_declaration\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"keyword.type.go\"\n        },\n        \"2\": {\n          \"patterns\": [{\n            \"include\": \"#type-declarations\"\n          }, {\n            \"match\": \"\\\\w+\",\n            \"name\": \"entity.name.type.go\"\n          }]\n        }\n      },\n      \"comment\": \"struct, interface type declarations (related to: struct_variables_types, interface_variables_types)\",\n      \"match\": \"(?:(?:^\\\\s*)(\\\\btype\\\\b)(?:\\\\s*)([\\\\w\\\\.]+))\"\n    },\n    \"struct_variable_types_fields_multi\": {\n      \"comment\": \"struct variable and type fields with multi lines\",\n      \"patterns\": [{\n        \"begin\": \"(?:((?:\\\\w+(?:\\\\,\\\\s*\\\\w+)*)(?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:\\\\<\\\\-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*\\\\<\\\\-)?\\\\s*)+)?(?:\\\\s+)(?:[\\\\[\\\\]\\\\*]+)?)(\\\\bstruct\\\\b)(?:\\\\s*)(\\\\{))\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations\"\n            }, {\n              \"match\": \"\\\\w+\",\n              \"name\": \"variable.other.property.go\"\n            }]\n          },\n          \"2\": {\n            \"name\": \"keyword.struct.go\"\n          },\n          \"3\": {\n            \"name\": \"punctuation.definition.begin.bracket.curly.go\"\n          }\n        },\n        \"comment\": \"struct in struct types\",\n        \"end\": \"\\\\}\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.end.bracket.curly.go\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#struct_variables_types_fields\"\n        }, {\n          \"include\": \"$self\"\n        }]\n      }, {\n        \"begin\": \"(?:((?:\\\\w+(?:\\\\,\\\\s*\\\\w+)*)(?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:\\\\<\\\\-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*\\\\<\\\\-)?\\\\s*)+)?(?:\\\\s+)(?:[\\\\[\\\\]\\\\*]+)?)(\\\\binterface\\\\b)(?:\\\\s*)(\\\\{))\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations\"\n            }, {\n              \"match\": \"\\\\w+\",\n              \"name\": \"variable.other.property.go\"\n            }]\n          },\n          \"2\": {\n            \"name\": \"keyword.interface.go\"\n          },\n          \"3\": {\n            \"name\": \"punctuation.definition.begin.bracket.curly.go\"\n          }\n        },\n        \"comment\": \"interface in struct types\",\n        \"end\": \"\\\\}\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.end.bracket.curly.go\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#interface_variables_types_field\"\n        }, {\n          \"include\": \"$self\"\n        }]\n      }, {\n        \"begin\": \"(?:((?:\\\\w+(?:\\\\,\\\\s*\\\\w+)*)(?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:\\\\<\\\\-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*\\\\<\\\\-)?\\\\s*)+)?(?:\\\\s+)(?:[\\\\[\\\\]\\\\*]+)?)(\\\\bfunc\\\\b)(?:\\\\s*)(\\\\())\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations\"\n            }, {\n              \"match\": \"\\\\w+\",\n              \"name\": \"variable.other.property.go\"\n            }]\n          },\n          \"2\": {\n            \"name\": \"keyword.function.go\"\n          },\n          \"3\": {\n            \"name\": \"punctuation.definition.begin.bracket.round.go\"\n          }\n        },\n        \"comment\": \"function in struct types\",\n        \"end\": \"\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.end.bracket.round.go\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#function_param_types\"\n        }, {\n          \"include\": \"$self\"\n        }]\n      }, {\n        \"begin\": \"(?:((?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:\\\\<\\\\-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*\\\\<\\\\-)?\\\\s*)+)?(?<!\\\\,\\\\s*)(?:[\\\\w\\\\.\\\\*]+)\\\\s*)(?=\\\\`))\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations\"\n            }, {\n              \"match\": \"\\\\w+\",\n              \"name\": \"entity.name.type.go\"\n            }]\n          }\n        },\n        \"comment\": \"one type only with multi line raw string\",\n        \"end\": \"(?=\\\\`)\",\n        \"patterns\": [{\n          \"include\": \"#raw_string_literals\"\n        }]\n      }, {\n        \"include\": \"#parameter-variable-types\"\n      }]\n    },\n    \"struct_variables_types\": {\n      \"begin\": \"(\\\\bstruct\\\\b)\\\\s*(\\\\{)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.struct.go\"\n        },\n        \"2\": {\n          \"name\": \"punctuation.definition.begin.bracket.curly.go\"\n        }\n      },\n      \"comment\": \"Struct variable type\",\n      \"end\": \"\\\\}\",\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.end.bracket.curly.go\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#struct_variables_types_fields\"\n      }, {\n        \"include\": \"$self\"\n      }]\n    },\n    \"struct_variables_types_fields\": {\n      \"comment\": \"Struct variable type fields\",\n      \"patterns\": [{\n        \"include\": \"#struct_variable_types_fields_multi\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations\"\n            }, {\n              \"match\": \"(?:\\\\w+)\",\n              \"name\": \"entity.name.type.go\"\n            }]\n          }\n        },\n        \"comment\": \"one line - single type\",\n        \"match\": \"(?:(?<=\\\\{)\\\\s*((?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:\\\\<\\\\-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*\\\\<\\\\-)?\\\\s*)+)?(?:[\\\\w\\\\.\\\\*\\\\[\\\\]]+))\\\\s*(?=\\\\}))\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations\"\n            }, {\n              \"match\": \"(?:\\\\w+)\",\n              \"name\": \"variable.other.property.go\"\n            }]\n          },\n          \"2\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations\"\n            }, {\n              \"match\": \"(?:\\\\w+)\",\n              \"name\": \"entity.name.type.go\"\n            }]\n          }\n        },\n        \"comment\": \"one line - property variables and types\",\n        \"match\": \"(?:(?<=\\\\{)\\\\s*((?:(?:\\\\w+\\\\,\\\\s*)+)?(?:\\\\w+\\\\s+))((?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:\\\\<\\\\-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*\\\\<\\\\-)?\\\\s*)+)?(?:[\\\\w\\\\.\\\\*\\\\[\\\\]]+))\\\\s*(?=\\\\}))\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"patterns\": [{\n              \"captures\": {\n                \"1\": {\n                  \"patterns\": [{\n                    \"include\": \"#type-declarations\"\n                  }, {\n                    \"match\": \"(?:\\\\w+)\",\n                    \"name\": \"variable.other.property.go\"\n                  }]\n                },\n                \"2\": {\n                  \"patterns\": [{\n                    \"include\": \"#type-declarations\"\n                  }, {\n                    \"match\": \"(?:\\\\w+)\",\n                    \"name\": \"entity.name.type.go\"\n                  }]\n                }\n              },\n              \"match\": \"(?:((?:(?:\\\\w+\\\\,\\\\s*)+)?(?:\\\\w+\\\\s+))?((?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:\\\\<\\\\-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*\\\\<\\\\-)?\\\\s*)+)?(?:[\\\\S]+)(?:\\\\;)?))\"\n            }]\n          }\n        },\n        \"comment\": \"one line with semicolon(;) without formatting gofmt - single type | property variables and types\",\n        \"match\": \"(?:(?<=\\\\{)((?:\\\\s*(?:(?:(?:\\\\w+\\\\,\\\\s*)+)?(?:\\\\w+\\\\s+))?(?:(?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:\\\\<\\\\-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*\\\\<\\\\-)?\\\\s*)+)?(?:[\\\\S]+)(?:\\\\;)?))+)\\\\s*(?=\\\\}))\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations\"\n            }, {\n              \"match\": \"(?:\\\\w+)\",\n              \"name\": \"entity.name.type.go\"\n            }]\n          }\n        },\n        \"comment\": \"one type only\",\n        \"match\": '(?:((?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:\\\\<\\\\-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*\\\\<\\\\-)?\\\\s*)+)?(?<!\\\\,\\\\s*)(?:[\\\\w\\\\.\\\\*]+)\\\\s*(?:(?:(?:\".*\")|(?:\\\\`.*\\\\`))\\\\s*)?(?:/(?:/|\\\\*).*)?)$)'\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations\"\n            }, {\n              \"match\": \"(?:\\\\w+)\",\n              \"name\": \"variable.other.property.go\"\n            }]\n          },\n          \"2\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations-without-brackets\"\n            }, {\n              \"include\": \"#parameter-variable-types\"\n            }, {\n              \"match\": \"(?:\\\\w+)\",\n              \"name\": \"entity.name.type.go\"\n            }]\n          }\n        },\n        \"comment\": \"property variables and types\",\n        \"match\": \"(?:((?:(?:\\\\w+\\\\,\\\\s*)+)?(?:\\\\w+\\\\s+))([^\\\\`]+))\"\n      }]\n    },\n    \"support_functions\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"entity.name.function.support.go\"\n        },\n        \"2\": {\n          \"patterns\": [{\n            \"include\": \"#type-declarations\"\n          }, {\n            \"match\": \"\\\\d\\\\w*\",\n            \"name\": \"invalid.illegal.identifier.go\"\n          }, {\n            \"match\": \"\\\\w+\",\n            \"name\": \"entity.name.function.support.go\"\n          }]\n        },\n        \"3\": {\n          \"patterns\": [{\n            \"include\": \"#type-declarations-without-brackets\"\n          }, {\n            \"match\": \"\\\\[\",\n            \"name\": \"punctuation.definition.begin.bracket.square.go\"\n          }, {\n            \"match\": \"\\\\]\",\n            \"name\": \"punctuation.definition.end.bracket.square.go\"\n          }, {\n            \"match\": \"\\\\{\",\n            \"name\": \"punctuation.definition.begin.bracket.curly.go\"\n          }, {\n            \"match\": \"\\\\}\",\n            \"name\": \"punctuation.definition.end.bracket.curly.go\"\n          }, {\n            \"match\": \"\\\\w+\",\n            \"name\": \"entity.name.type.go\"\n          }]\n        }\n      },\n      \"comment\": \"Support Functions\",\n      \"match\": `(?:(?:((?<=\\\\.)\\\\b\\\\w+)|(\\\\b\\\\w+))(\\\\[(?:(?:[\\\\w\\\\.\\\\*\\\\[\\\\]\\\\{\\\\}\"\\\\']+)(?:(?:\\\\,\\\\s*(?:[\\\\w\\\\.\\\\*\\\\[\\\\]\\\\{\\\\}]+))*))?\\\\])?(?=\\\\())`\n    },\n    \"switch_select_case_variables\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"keyword.control.go\"\n        },\n        \"2\": {\n          \"patterns\": [{\n            \"include\": \"#type-declarations\"\n          }, {\n            \"include\": \"#support_functions\"\n          }, {\n            \"include\": \"#variable_assignment\"\n          }, {\n            \"match\": \"\\\\w+\",\n            \"name\": \"variable.other.go\"\n          }]\n        }\n      },\n      \"comment\": \"variables after case control keyword in switch/select expression, to not scope them as property variables\",\n      \"match\": \"(?:(?:^\\\\s*(\\\\bcase\\\\b))(?:\\\\s+)([\\\\s\\\\S]+(?:\\\\:)\\\\s*(?:/(?:/|\\\\*).*)?)$)\"\n    },\n    \"switch_types\": {\n      \"begin\": \"(?<=\\\\bswitch\\\\b)(?:\\\\s*)(?:(\\\\w+\\\\s*\\\\:\\\\=)?\\\\s*([\\\\w\\\\.\\\\*\\\\(\\\\)\\\\[\\\\]\\\\+/\\\\-\\\\%\\\\<\\\\>\\\\|\\\\&]+))(\\\\.\\\\(\\\\btype\\\\b\\\\)\\\\s*)(\\\\{)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#operators\"\n          }, {\n            \"match\": \"\\\\w+\",\n            \"name\": \"variable.other.assignment.go\"\n          }]\n        },\n        \"2\": {\n          \"patterns\": [{\n            \"include\": \"#support_functions\"\n          }, {\n            \"include\": \"#type-declarations\"\n          }, {\n            \"match\": \"\\\\w+\",\n            \"name\": \"variable.other.go\"\n          }]\n        },\n        \"3\": {\n          \"patterns\": [{\n            \"include\": \"#delimiters\"\n          }, {\n            \"include\": \"#brackets\"\n          }, {\n            \"match\": \"\\\\btype\\\\b\",\n            \"name\": \"keyword.type.go\"\n          }]\n        },\n        \"4\": {\n          \"name\": \"punctuation.definition.begin.bracket.curly.go\"\n        }\n      },\n      \"comment\": \"switch type assertions, only highlights types after case keyword\",\n      \"end\": \"(?:\\\\})\",\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.end.bracket.curly.go\"\n        }\n      },\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.control.go\"\n          },\n          \"2\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations\"\n            }, {\n              \"match\": \"\\\\w+\",\n              \"name\": \"entity.name.type.go\"\n            }]\n          },\n          \"3\": {\n            \"name\": \"punctuation.other.colon.go\"\n          },\n          \"4\": {\n            \"patterns\": [{\n              \"include\": \"#comments\"\n            }]\n          }\n        },\n        \"comment\": \"types after case keyword with single line\",\n        \"match\": \"(?:^\\\\s*(\\\\bcase\\\\b))(?:\\\\s+)([\\\\w\\\\.\\\\,\\\\*\\\\=\\\\<\\\\>\\\\!\\\\s]+)(:)(\\\\s*/(?:/|\\\\*)\\\\s*.*)?$\"\n      }, {\n        \"begin\": \"\\\\bcase\\\\b\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.control.go\"\n          }\n        },\n        \"comment\": \"types after case keyword with multi lines\",\n        \"end\": \"\\\\:\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.other.colon.go\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#type-declarations\"\n        }, {\n          \"match\": \"\\\\w+\",\n          \"name\": \"entity.name.type.go\"\n        }]\n      }, {\n        \"include\": \"$self\"\n      }]\n    },\n    \"syntax_errors\": {\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"name\": \"invalid.illegal.slice.go\"\n          }\n        },\n        \"comment\": \"Syntax error using slices\",\n        \"match\": \"\\\\[\\\\](\\\\s+)\"\n      }, {\n        \"comment\": \"Syntax error numeric literals\",\n        \"match\": \"\\\\b0[0-7]*[89]\\\\d*\\\\b\",\n        \"name\": \"invalid.illegal.numeric.go\"\n      }]\n    },\n    \"terminators\": {\n      \"comment\": \"Terminators\",\n      \"match\": \";\",\n      \"name\": \"punctuation.terminator.go\"\n    },\n    \"type-declarations\": {\n      \"comment\": \"includes all type declarations\",\n      \"patterns\": [{\n        \"include\": \"#language_constants\"\n      }, {\n        \"include\": \"#comments\"\n      }, {\n        \"include\": \"#map_types\"\n      }, {\n        \"include\": \"#brackets\"\n      }, {\n        \"include\": \"#delimiters\"\n      }, {\n        \"include\": \"#keywords\"\n      }, {\n        \"include\": \"#operators\"\n      }, {\n        \"include\": \"#runes\"\n      }, {\n        \"include\": \"#storage_types\"\n      }, {\n        \"include\": \"#raw_string_literals\"\n      }, {\n        \"include\": \"#string_literals\"\n      }, {\n        \"include\": \"#numeric_literals\"\n      }, {\n        \"include\": \"#terminators\"\n      }]\n    },\n    \"type-declarations-without-brackets\": {\n      \"comment\": \"includes all type declarations without brackets (in some cases, brackets need to be captured manually)\",\n      \"patterns\": [{\n        \"include\": \"#language_constants\"\n      }, {\n        \"include\": \"#comments\"\n      }, {\n        \"include\": \"#map_types\"\n      }, {\n        \"include\": \"#delimiters\"\n      }, {\n        \"include\": \"#keywords\"\n      }, {\n        \"include\": \"#operators\"\n      }, {\n        \"include\": \"#runes\"\n      }, {\n        \"include\": \"#storage_types\"\n      }, {\n        \"include\": \"#raw_string_literals\"\n      }, {\n        \"include\": \"#string_literals\"\n      }, {\n        \"include\": \"#numeric_literals\"\n      }, {\n        \"include\": \"#terminators\"\n      }]\n    },\n    \"type_assertion_inline\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"keyword.type.go\"\n        },\n        \"2\": {\n          \"patterns\": [{\n            \"include\": \"#type-declarations\"\n          }, {\n            \"match\": \"(?:\\\\w+)\",\n            \"name\": \"entity.name.type.go\"\n          }]\n        }\n      },\n      \"comment\": \"struct/interface types in-line (type assertion) | switch type keyword\",\n      \"match\": \"(?:(?<=\\\\.\\\\()(?:(\\\\btype\\\\b)|((?:(?:\\\\s*(?:[\\\\*\\\\[\\\\]]+)?(?:\\\\<\\\\-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*\\\\<\\\\-)?\\\\s*)+)?[\\\\w\\\\.\\\\[\\\\]\\\\*]+))(?=\\\\)))\"\n    },\n    \"var_const_assignment\": {\n      \"comment\": \"variable assignment with var and const keyword\",\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"patterns\": [{\n              \"include\": \"#delimiters\"\n            }, {\n              \"match\": \"\\\\w+\",\n              \"name\": \"variable.other.assignment.go\"\n            }]\n          },\n          \"2\": {\n            \"patterns\": [{\n              \"include\": \"#type-declarations-without-brackets\"\n            }, {\n              \"include\": \"#generic_types\"\n            }, {\n              \"match\": \"\\\\(\",\n              \"name\": \"punctuation.definition.begin.bracket.round.go\"\n            }, {\n              \"match\": \"\\\\)\",\n              \"name\": \"punctuation.definition.end.bracket.round.go\"\n            }, {\n              \"match\": \"\\\\[\",\n              \"name\": \"punctuation.definition.begin.bracket.square.go\"\n            }, {\n              \"match\": \"\\\\]\",\n              \"name\": \"punctuation.definition.end.bracket.square.go\"\n            }, {\n              \"match\": \"\\\\w+\",\n              \"name\": \"entity.name.type.go\"\n            }]\n          }\n        },\n        \"comment\": \"var and const with single type assignment\",\n        \"match\": \"(?:(?<=\\\\bvar\\\\b|\\\\bconst\\\\b)(?:\\\\s*)(\\\\b[\\\\w\\\\.]+(?:\\\\,\\\\s*[\\\\w\\\\.]+)*)(?:\\\\s*)((?:(?:(?:[\\\\*\\\\[\\\\]]+)?(?:\\\\<\\\\-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*\\\\<\\\\-)?\\\\s*)+(?:\\\\([^\\\\)]+\\\\))?)?(?!(?:[\\\\[\\\\]\\\\*]+)?\\\\b(?:struct|func|map)\\\\b)(?:[\\\\w\\\\.\\\\[\\\\]\\\\*]+(?:\\\\,\\\\s*[\\\\w\\\\.\\\\[\\\\]\\\\*]+)*)?(?:\\\\s*)(?:\\\\=)?)?)\"\n      }, {\n        \"begin\": \"(?:(?<=\\\\bvar\\\\b|\\\\bconst\\\\b)(?:\\\\s*)(\\\\())\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.definition.begin.bracket.round.go\"\n          }\n        },\n        \"comment\": \"var and const with multi type assignment\",\n        \"end\": \"\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.end.bracket.round.go\"\n          }\n        },\n        \"patterns\": [{\n          \"captures\": {\n            \"1\": {\n              \"patterns\": [{\n                \"include\": \"#delimiters\"\n              }, {\n                \"match\": \"\\\\w+\",\n                \"name\": \"variable.other.assignment.go\"\n              }]\n            },\n            \"2\": {\n              \"patterns\": [{\n                \"include\": \"#type-declarations-without-brackets\"\n              }, {\n                \"include\": \"#generic_types\"\n              }, {\n                \"match\": \"\\\\(\",\n                \"name\": \"punctuation.definition.begin.bracket.round.go\"\n              }, {\n                \"match\": \"\\\\)\",\n                \"name\": \"punctuation.definition.end.bracket.round.go\"\n              }, {\n                \"match\": \"\\\\[\",\n                \"name\": \"punctuation.definition.begin.bracket.square.go\"\n              }, {\n                \"match\": \"\\\\]\",\n                \"name\": \"punctuation.definition.end.bracket.square.go\"\n              }, {\n                \"match\": \"\\\\w+\",\n                \"name\": \"entity.name.type.go\"\n              }]\n            }\n          },\n          \"match\": \"(?:(?:^\\\\s*)(\\\\b[\\\\w\\\\.]+(?:\\\\,\\\\s*[\\\\w\\\\.]+)*)(?:\\\\s*)((?:(?:(?:[\\\\*\\\\[\\\\]]+)?(?:\\\\<\\\\-\\\\s*)?\\\\bchan\\\\b(?:\\\\s*\\\\<\\\\-)?\\\\s*)+(?:\\\\([^\\\\)]+\\\\))?)?(?!(?:[\\\\[\\\\]\\\\*]+)?\\\\b(?:struct|func|map)\\\\b)(?:[\\\\w\\\\.\\\\[\\\\]\\\\*]+(?:\\\\,\\\\s*[\\\\w\\\\.\\\\[\\\\]\\\\*]+)*)?(?:\\\\s*)(?:\\\\=)?)?)\"\n        }, {\n          \"include\": \"$self\"\n        }]\n      }]\n    },\n    \"variable_assignment\": {\n      \"comment\": \"variable assignment\",\n      \"patterns\": [{\n        \"captures\": {\n          \"0\": {\n            \"patterns\": [{\n              \"include\": \"#delimiters\"\n            }, {\n              \"match\": \"\\\\d\\\\w*\",\n              \"name\": \"invalid.illegal.identifier.go\"\n            }, {\n              \"match\": \"\\\\w+\",\n              \"name\": \"variable.other.assignment.go\"\n            }]\n          }\n        },\n        \"comment\": \"variable assignment with :=\",\n        \"match\": \"\\\\b\\\\w+(?:\\\\,\\\\s*\\\\w+)*(?=\\\\s*:=)\"\n      }, {\n        \"captures\": {\n          \"0\": {\n            \"patterns\": [{\n              \"include\": \"#delimiters\"\n            }, {\n              \"include\": \"#operators\"\n            }, {\n              \"match\": \"\\\\d\\\\w*\",\n              \"name\": \"invalid.illegal.identifier.go\"\n            }, {\n              \"match\": \"\\\\w+\",\n              \"name\": \"variable.other.assignment.go\"\n            }]\n          }\n        },\n        \"comment\": \"variable assignment with =\",\n        \"match\": \"\\\\b[\\\\w\\\\.\\\\*]+(?:\\\\,\\\\s*[\\\\w\\\\.\\\\*]+)*(?=\\\\s*=(?!=))\"\n      }]\n    }\n  },\n  \"scopeName\": \"source.go\"\n});\nvar go = [lang];\nexport { go as default };"],
  "mappings": "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",
  "names": []
}
