{
  "version": 3,
  "sources": ["../../../../../../node_modules/shiki/dist/langs/berry.mjs"],
  "sourcesContent": ["const lang = Object.freeze({\n  \"displayName\": \"Berry\",\n  \"name\": \"berry\",\n  \"patterns\": [{\n    \"include\": \"#controls\"\n  }, {\n    \"include\": \"#strings\"\n  }, {\n    \"include\": \"#comment-block\"\n  }, {\n    \"include\": \"#comments\"\n  }, {\n    \"include\": \"#keywords\"\n  }, {\n    \"include\": \"#function\"\n  }, {\n    \"include\": \"#member\"\n  }, {\n    \"include\": \"#identifier\"\n  }, {\n    \"include\": \"#number\"\n  }, {\n    \"include\": \"#operator\"\n  }],\n  \"repository\": {\n    \"comment-block\": {\n      \"begin\": \"\\\\#\\\\-\",\n      \"end\": \"\\\\-#\",\n      \"name\": \"comment.berry\",\n      \"patterns\": [{}]\n    },\n    \"comments\": {\n      \"begin\": \"\\\\#\",\n      \"end\": \"\\\\n\",\n      \"name\": \"comment.line.berry\",\n      \"patterns\": [{}]\n    },\n    \"controls\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b(if|elif|else|for|while|do|end|break|continue|return|try|except|raise)\\\\b\",\n        \"name\": \"keyword.control.berry\"\n      }]\n    },\n    \"function\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b([a-zA-Z_][a-zA-Z0-9_]*(?=\\\\s*\\\\())\",\n        \"name\": \"entity.name.function.berry\"\n      }]\n    },\n    \"identifier\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b[_A-Za-z]\\\\w+\\\\b\",\n        \"name\": \"identifier.berry\"\n      }]\n    },\n    \"keywords\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b(var|static|def|class|true|false|nil|self|super|import|as|_class)\\\\b\",\n        \"name\": \"keyword.berry\"\n      }]\n    },\n    \"member\": {\n      \"patterns\": [{\n        \"captures\": {\n          \"0\": {\n            \"name\": \"entity.other.attribute-name.berry\"\n          }\n        },\n        \"match\": \"\\\\.([a-zA-Z_][a-zA-Z0-9_]*)\"\n      }]\n    },\n    \"number\": {\n      \"patterns\": [{\n        \"match\": \"0x[a-fA-F0-9]+|\\\\d+|(\\\\d+\\\\.?|\\\\.\\\\d)\\\\d*([eE][+-]?\\\\d+)?\",\n        \"name\": \"constant.numeric.berry\"\n      }]\n    },\n    \"operator\": {\n      \"patterns\": [{\n        \"match\": \"\\\\(|\\\\)|\\\\[|\\\\]|\\\\.|-|\\\\!|~|\\\\*|/|%|\\\\+|&|\\\\^|\\\\||<|>|=|:\",\n        \"name\": \"keyword.operator.berry\"\n      }]\n    },\n    \"strings\": {\n      \"patterns\": [{\n        \"begin\": `(\"|')`,\n        \"end\": \"\\\\1\",\n        \"name\": \"string.quoted.double.berry\",\n        \"patterns\": [{\n          \"match\": `(\\\\\\\\x[\\\\h]{2})|(\\\\\\\\[0-7]{3})|(\\\\\\\\\\\\\\\\)|(\\\\\\\\\")|(\\\\\\\\')|(\\\\\\\\a)|(\\\\\\\\b)|(\\\\\\\\f)|(\\\\\\\\n)|(\\\\\\\\r)|(\\\\\\\\t)|(\\\\\\\\v)`,\n          \"name\": \"constant.character.escape.berry\"\n        }]\n      }, {\n        \"begin\": `f(\"|')`,\n        \"end\": \"\\\\1\",\n        \"name\": \"string.quoted.other.berry\",\n        \"patterns\": [{\n          \"match\": `(\\\\\\\\x[\\\\h]{2})|(\\\\\\\\[0-7]{3})|(\\\\\\\\\\\\\\\\)|(\\\\\\\\\")|(\\\\\\\\')|(\\\\\\\\a)|(\\\\\\\\b)|(\\\\\\\\f)|(\\\\\\\\n)|(\\\\\\\\r)|(\\\\\\\\t)|(\\\\\\\\v)`,\n          \"name\": \"constant.character.escape.berry\"\n        }, {\n          \"match\": \"\\\\{\\\\{[^\\\\}]*\\\\}\\\\}\",\n          \"name\": \"string.quoted.other.berry\"\n        }, {\n          \"begin\": \"\\\\{\",\n          \"end\": \"\\\\}\",\n          \"name\": \"keyword.other.unit.berry\",\n          \"patterns\": [{\n            \"include\": \"#keywords\"\n          }, {\n            \"include\": \"#numbers\"\n          }, {\n            \"include\": \"#identifier\"\n          }, {\n            \"include\": \"#operator\"\n          }, {\n            \"include\": \"#member\"\n          }, {\n            \"include\": \"#function\"\n          }]\n        }]\n      }]\n    }\n  },\n  \"scopeName\": \"source.berry\",\n  \"aliases\": [\"be\"]\n});\nvar berry = [lang];\nexport { berry as default };"],
  "mappings": ";;;;AAAA,IAAM,OAAO,OAAO,OAAO;AAAA,EACzB,eAAe;AAAA,EACf,QAAQ;AAAA,EACR,YAAY,CAAC;AAAA,IACX,WAAW;AAAA,EACb,GAAG;AAAA,IACD,WAAW;AAAA,EACb,GAAG;AAAA,IACD,WAAW;AAAA,EACb,GAAG;AAAA,IACD,WAAW;AAAA,EACb,GAAG;AAAA,IACD,WAAW;AAAA,EACb,GAAG;AAAA,IACD,WAAW;AAAA,EACb,GAAG;AAAA,IACD,WAAW;AAAA,EACb,GAAG;AAAA,IACD,WAAW;AAAA,EACb,GAAG;AAAA,IACD,WAAW;AAAA,EACb,GAAG;AAAA,IACD,WAAW;AAAA,EACb,CAAC;AAAA,EACD,cAAc;AAAA,IACZ,iBAAiB;AAAA,MACf,SAAS;AAAA,MACT,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,YAAY,CAAC,CAAC,CAAC;AAAA,IACjB;AAAA,IACA,YAAY;AAAA,MACV,SAAS;AAAA,MACT,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,YAAY,CAAC,CAAC,CAAC;AAAA,IACjB;AAAA,IACA,YAAY;AAAA,MACV,YAAY,CAAC;AAAA,QACX,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,CAAC;AAAA,IACH;AAAA,IACA,YAAY;AAAA,MACV,YAAY,CAAC;AAAA,QACX,SAAS;AAAA,QACT,QAAQ;AAAA,MACV,CAAC;AAAA,IACH;AAAA,IACA,cAAcb,GAAG;AAAA,YACD,WAAW;AAAA,UACb,GAAG;AAAA,YACD,WAAW;AAAA,UACb,GAAG;AAAA,YACD,WAAW;AAAA,UACb,GAAG;AAAA,YACD,WAAW;AAAA,UACb,GAAG;AAAA,YACD,WAAW;AAAA,UACb,CAAC;AAAA,QACH,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EACA,aAAa;AAAA,EACb,WAAW,CAAC,IAAI;AAClB,CAAC;AACD,IAAI,QAAQ,CAAC,IAAI;",
  "names": []
}
