{
  "version": 3,
  "sources": ["../../../../../../node_modules/shiki/dist/langs/tcl.mjs"],
  "sourcesContent": ["const lang = Object.freeze({\n  \"displayName\": \"Tcl\",\n  \"fileTypes\": [\"tcl\"],\n  \"foldingStartMarker\": \"\\\\{\\\\s*$\",\n  \"foldingStopMarker\": \"^\\\\s*\\\\}\",\n  \"name\": \"tcl\",\n  \"patterns\": [{\n    \"begin\": \"(?<=^|;)\\\\s*((#))\",\n    \"beginCaptures\": {\n      \"1\": {\n        \"name\": \"comment.line.number-sign.tcl\"\n      },\n      \"2\": {\n        \"name\": \"punctuation.definition.comment.tcl\"\n      }\n    },\n    \"contentName\": \"comment.line.number-sign.tcl\",\n    \"end\": \"\\\\n\",\n    \"patterns\": [{\n      \"match\": \"(\\\\\\\\\\\\\\\\|\\\\\\\\\\\\n)\"\n    }]\n  }, {\n    \"captures\": {\n      \"1\": {\n        \"name\": \"keyword.control.tcl\"\n      }\n    },\n    \"match\": \"(?<=^|[\\\\[{;])\\\\s*(if|while|for|catch|default|return|break|continue|switch|exit|foreach|try|throw)\\\\b\"\n  }, {\n    \"captures\": {\n      \"1\": {\n        \"name\": \"keyword.control.tcl\"\n      }\n    },\n    \"match\": \"(?<=^|})\\\\s*(then|elseif|else)\\\\b\"\n  }, {\n    \"captures\": {\n      \"1\": {\n        \"name\": \"keyword.other.tcl\"\n      },\n      \"2\": {\n        \"name\": \"entity.name.function.tcl\"\n      }\n    },\n    \"match\": \"(?<=^|{)\\\\s*(proc)\\\\s+([^\\\\s]+)\"\n  }, {\n    \"captures\": {\n      \"1\": {\n        \"name\": \"keyword.other.tcl\"\n      }\n    },\n    \"match\": \"(?<=^|[\\\\[{;])\\\\s*(after|append|array|auto_execok|auto_import|auto_load|auto_mkindex|auto_mkindex_old|auto_qualify|auto_reset|bgerror|binary|cd|clock|close|concat|dde|encoding|eof|error|eval|exec|expr|fblocked|fconfigure|fcopy|file|fileevent|filename|flush|format|gets|glob|global|history|http|incr|info|interp|join|lappend|library|lindex|linsert|list|llength|load|lrange|lreplace|lsearch|lset|lsort|memory|msgcat|namespace|open|package|parray|pid|pkg::create|pkg_mkIndex|proc|puts|pwd|re_syntax|read|registry|rename|resource|scan|seek|set|socket|SafeBase|source|split|string|subst|Tcl|tcl_endOfWord|tcl_findLibrary|tcl_startOfNextWord|tcl_startOfPreviousWord|tcl_wordBreakAfter|tcl_wordBreakBefore|tcltest|tclvars|tell|time|trace|unknown|unset|update|uplevel|upvar|variable|vwait)\\\\b\"\n  }, {\n    \"begin\": \"(?<=^|[\\\\[{;])\\\\s*(regexp|regsub)\\\\b\\\\s*\",\n    \"beginCaptures\": {\n      \"1\": {\n        \"name\": \"keyword.other.tcl\"\n      }\n    },\n    \"comment\": \"special-case regexp/regsub keyword in order to handle the expression\",\n    \"end\": \"[\\\\n;\\\\]]\",\n    \"patterns\": [{\n      \"match\": \"\\\\\\\\(?:.|\\\\n)\",\n      \"name\": \"constant.character.escape.tcl\"\n    }, {\n      \"comment\": \"switch for regexp\",\n      \"match\": \"-\\\\w+\\\\s*\"\n    }, {\n      \"applyEndPatternLast\": 1,\n      \"begin\": \"--\\\\s*\",\n      \"comment\": \"end of switches\",\n      \"end\": \"\",\n      \"patterns\": [{\n        \"include\": \"#regexp\"\n      }]\n    }, {\n      \"include\": \"#regexp\"\n    }]\n  }, {\n    \"include\": \"#escape\"\n  }, {\n    \"include\": \"#variable\"\n  }, {\n    \"include\": \"#operator\"\n  }, {\n    \"include\": \"#numeric\"\n  }, {\n    \"begin\": '\"',\n    \"beginCaptures\": {\n      \"0\": {\n        \"name\": \"punctuation.definition.string.begin.tcl\"\n      }\n    },\n    \"end\": '\"',\n    \"endCaptures\": {\n      \"0\": {\n        \"name\": \"punctuation.definition.string.end.tcl\"\n      }\n    },\n    \"name\": \"string.quoted.double.tcl\",\n    \"patterns\": [{\n      \"include\": \"#escape\"\n    }, {\n      \"include\": \"#variable\"\n    }, {\n      \"include\": \"#embedded\"\n    }]\n  }],\n  \"repository\": {\n    \"bare-string\": {\n      \"begin\": '(?:^|(?<=\\\\s))\"',\n      \"comment\": \"matches a single quote-enclosed word without scoping\",\n      \"end\": '\"([^\\\\s\\\\]]*)',\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"invalid.illegal.tcl\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#escape\"\n      }, {\n        \"include\": \"#variable\"\n      }]\n    },\n    \"braces\": {\n      \"begin\": \"(?:^|(?<=\\\\s))\\\\{\",\n      \"comment\": \"matches a single brace-enclosed word\",\n      \"end\": \"\\\\}([^\\\\s\\\\]]*)\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"invalid.illegal.tcl\"\n        }\n      },\n      \"patterns\": [{\n        \"match\": \"\\\\\\\\[{}\\\\n]\",\n        \"name\": \"constant.character.escape.tcl\"\n      }, {\n        \"include\": \"#inner-braces\"\n      }]\n    },\n    \"embedded\": {\n      \"begin\": \"\\\\[\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.section.embedded.begin.tcl\"\n        }\n      },\n      \"end\": \"\\\\]\",\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.section.embedded.end.tcl\"\n        }\n      },\n      \"name\": \"source.tcl.embedded\",\n      \"patterns\": [{\n        \"include\": \"source.tcl\"\n      }]\n    },\n    \"escape\": {\n      \"match\": \"\\\\\\\\(\\\\d{1,3}|x[a-fA-F0-9]+|u[a-fA-F0-9]{1,4}|.|\\\\n)\",\n      \"name\": \"constant.character.escape.tcl\"\n    },\n    \"inner-braces\": {\n      \"begin\": \"\\\\{\",\n      \"comment\": \"matches a nested brace in a brace-enclosed word\",\n      \"end\": \"\\\\}\",\n      \"patterns\": [{\n        \"match\": \"\\\\\\\\[{}\\\\n]\",\n        \"name\": \"constant.character.escape.tcl\"\n      }, {\n        \"include\": \"#inner-braces\"\n      }]\n    },\n    \"numeric\": {\n      \"match\": \"(?<![a-zA-Z])([+-]?([0-9]*[.])?[0-9]+f?)(?![\\\\.a-zA-Z])\",\n      \"name\": \"constant.numeric.tcl\"\n    },\n    \"operator\": {\n      \"match\": \"(?<= |\\\\d)(-|\\\\+|~|&{1,2}|\\\\|{1,2}|<{1,2}|>{1,2}|\\\\*{1,2}|!|%|\\\\/|<=|>=|={1,2}|!=|\\\\^)(?= |\\\\d)\",\n      \"name\": \"keyword.operator.tcl\"\n    },\n    \"regexp\": {\n      \"begin\": \"(?=\\\\S)(?![\\\\n;\\\\]])\",\n      \"comment\": \"matches a single word, named as a regexp, then swallows the rest of the command\",\n      \"end\": \"(?=[\\\\n;\\\\]])\",\n      \"patterns\": [{\n        \"begin\": \"(?=[^ \\\\t\\\\n;])\",\n        \"end\": \"(?=[ \\\\t\\\\n;])\",\n        \"name\": \"string.regexp.tcl\",\n        \"patterns\": [{\n          \"include\": \"#braces\"\n        }, {\n          \"include\": \"#bare-string\"\n        }, {\n          \"include\": \"#escape\"\n        }, {\n          \"include\": \"#variable\"\n        }]\n      }, {\n        \"begin\": \"[ \\\\t]\",\n        \"comment\": \"swallow the rest of the command\",\n        \"end\": \"(?=[\\\\n;\\\\]])\",\n        \"patterns\": [{\n          \"include\": \"#variable\"\n        }, {\n          \"include\": \"#embedded\"\n        }, {\n          \"include\": \"#escape\"\n        }, {\n          \"include\": \"#braces\"\n        }, {\n          \"include\": \"#string\"\n        }]\n      }]\n    },\n    \"string\": {\n      \"applyEndPatternLast\": 1,\n      \"begin\": '(?:^|(?<=\\\\s))(?=\")',\n      \"comment\": \"matches a single quote-enclosed word with scoping\",\n      \"end\": \"\",\n      \"name\": \"string.quoted.double.tcl\",\n      \"patterns\": [{\n        \"include\": \"#bare-string\"\n      }]\n    },\n    \"variable\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.variable.tcl\"\n        }\n      },\n      \"match\": \"(\\\\$)((?:[a-zA-Z0-9_]|::)+(\\\\([^\\\\)]+\\\\))?|\\\\{[^\\\\}]*\\\\})\",\n      \"name\": \"support.function.tcl\"\n    }\n  },\n  \"scopeName\": \"source.tcl\"\n});\nvar tcl = [lang];\nexport { tcl as default };"],
  "mappings": "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",
  "names": []
}
