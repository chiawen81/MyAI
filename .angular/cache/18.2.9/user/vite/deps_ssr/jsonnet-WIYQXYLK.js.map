{
  "version": 3,
  "sources": ["../../../../../../node_modules/shiki/dist/langs/jsonnet.mjs"],
  "sourcesContent": ["const lang = Object.freeze({\n  \"displayName\": \"Jsonnet\",\n  \"name\": \"jsonnet\",\n  \"patterns\": [{\n    \"include\": \"#expression\"\n  }, {\n    \"include\": \"#keywords\"\n  }],\n  \"repository\": {\n    \"builtin-functions\": {\n      \"patterns\": [{\n        \"match\": \"\\\\bstd[.](acos|asin|atan|ceil|char|codepoint|cos|exp|exponent)\\\\b\",\n        \"name\": \"support.function.jsonnet\"\n      }, {\n        \"match\": \"\\\\bstd[.](filter|floor|force|length|log|makeArray|mantissa)\\\\b\",\n        \"name\": \"support.function.jsonnet\"\n      }, {\n        \"match\": \"\\\\bstd[.](objectFields|objectHas|pow|sin|sqrt|tan|type|thisFile)\\\\b\",\n        \"name\": \"support.function.jsonnet\"\n      }, {\n        \"match\": \"\\\\bstd[.](acos|asin|atan|ceil|char|codepoint|cos|exp|exponent)\\\\b\",\n        \"name\": \"support.function.jsonnet\"\n      }, {\n        \"match\": \"\\\\bstd[.](abs|assertEqual|escapeString(Bash|Dollars|Json|Python))\\\\b\",\n        \"name\": \"support.function.jsonnet\"\n      }, {\n        \"match\": \"\\\\bstd[.](filterMap|flattenArrays|foldl|foldr|format|join)\\\\b\",\n        \"name\": \"support.function.jsonnet\"\n      }, {\n        \"match\": \"\\\\bstd[.](lines|manifest(Ini|Python(Vars)?)|map|max|min|mod)\\\\b\",\n        \"name\": \"support.function.jsonnet\"\n      }, {\n        \"match\": \"\\\\bstd[.](set|set(Diff|Inter|Member|Union)|sort)\\\\b\",\n        \"name\": \"support.function.jsonnet\"\n      }, {\n        \"match\": \"\\\\bstd[.](range|split|stringChars|substr|toString|uniq)\\\\b\",\n        \"name\": \"support.function.jsonnet\"\n      }]\n    },\n    \"comment\": {\n      \"patterns\": [{\n        \"begin\": \"/\\\\*\",\n        \"end\": \"\\\\*/\",\n        \"name\": \"comment.block.jsonnet\"\n      }, {\n        \"match\": \"//.*$\",\n        \"name\": \"comment.line.jsonnet\"\n      }, {\n        \"match\": \"#.*$\",\n        \"name\": \"comment.block.jsonnet\"\n      }]\n    },\n    \"double-quoted-strings\": {\n      \"begin\": '\"',\n      \"end\": '\"',\n      \"name\": \"string.quoted.double.jsonnet\",\n      \"patterns\": [{\n        \"match\": '\\\\\\\\([\"\\\\\\\\/bfnrt]|(u[0-9a-fA-F]{4}))',\n        \"name\": \"constant.character.escape.jsonnet\"\n      }, {\n        \"match\": '\\\\\\\\[^\"\\\\\\\\/bfnrtu]',\n        \"name\": \"invalid.illegal.jsonnet\"\n      }]\n    },\n    \"expression\": {\n      \"patterns\": [{\n        \"include\": \"#literals\"\n      }, {\n        \"include\": \"#comment\"\n      }, {\n        \"include\": \"#single-quoted-strings\"\n      }, {\n        \"include\": \"#double-quoted-strings\"\n      }, {\n        \"include\": \"#triple-quoted-strings\"\n      }, {\n        \"include\": \"#builtin-functions\"\n      }, {\n        \"include\": \"#functions\"\n      }]\n    },\n    \"functions\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\b([a-zA-Z_][a-z0-9A-Z_]*)\\\\s*\\\\(\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"entity.name.function.jsonnet\"\n          }\n        },\n        \"end\": \"\\\\)\",\n        \"name\": \"meta.function\",\n        \"patterns\": [{\n          \"include\": \"#expression\"\n        }]\n      }]\n    },\n    \"keywords\": {\n      \"patterns\": [{\n        \"match\": \"[!:~\\\\+\\\\-&\\\\|\\\\^=<>\\\\*\\\\/%]\",\n        \"name\": \"keyword.operator.jsonnet\"\n      }, {\n        \"match\": \"\\\\$\",\n        \"name\": \"keyword.other.jsonnet\"\n      }, {\n        \"match\": \"\\\\b(self|super|import|importstr|local|tailstrict)\\\\b\",\n        \"name\": \"keyword.other.jsonnet\"\n      }, {\n        \"match\": \"\\\\b(if|then|else|for|in|error|assert)\\\\b\",\n        \"name\": \"keyword.control.jsonnet\"\n      }, {\n        \"match\": \"\\\\b(function)\\\\b\",\n        \"name\": \"storage.type.jsonnet\"\n      }, {\n        \"match\": \"[a-zA-Z_][a-z0-9A-Z_]*\\\\s*(:::|\\\\+:::)\",\n        \"name\": \"variable.parameter.jsonnet\"\n      }, {\n        \"match\": \"[a-zA-Z_][a-z0-9A-Z_]*\\\\s*(::|\\\\+::)\",\n        \"name\": \"entity.name.type\"\n      }, {\n        \"match\": \"[a-zA-Z_][a-z0-9A-Z_]*\\\\s*(:|\\\\+:)\",\n        \"name\": \"variable.parameter.jsonnet\"\n      }]\n    },\n    \"literals\": {\n      \"patterns\": [{\n        \"match\": \"\\\\b(true|false|null)\\\\b\",\n        \"name\": \"constant.language.jsonnet\"\n      }, {\n        \"match\": \"\\\\b(\\\\d+([Ee][+-]?\\\\d+)?)\\\\b\",\n        \"name\": \"constant.numeric.jsonnet\"\n      }, {\n        \"match\": \"\\\\b\\\\d+[.]\\\\d*([Ee][+-]?\\\\d+)?\\\\b\",\n        \"name\": \"constant.numeric.jsonnet\"\n      }, {\n        \"match\": \"\\\\b[.]\\\\d+([Ee][+-]?\\\\d+)?\\\\b\",\n        \"name\": \"constant.numeric.jsonnet\"\n      }]\n    },\n    \"single-quoted-strings\": {\n      \"begin\": \"'\",\n      \"end\": \"'\",\n      \"name\": \"string.quoted.double.jsonnet\",\n      \"patterns\": [{\n        \"match\": \"\\\\\\\\(['\\\\\\\\/bfnrt]|(u[0-9a-fA-F]{4}))\",\n        \"name\": \"constant.character.escape.jsonnet\"\n      }, {\n        \"match\": \"\\\\\\\\[^'\\\\\\\\/bfnrtu]\",\n        \"name\": \"invalid.illegal.jsonnet\"\n      }]\n    },\n    \"triple-quoted-strings\": {\n      \"patterns\": [{\n        \"begin\": \"\\\\|\\\\|\\\\|\",\n        \"end\": \"\\\\|\\\\|\\\\|\",\n        \"name\": \"string.quoted.triple.jsonnet\"\n      }]\n    }\n  },\n  \"scopeName\": \"source.jsonnet\"\n});\nvar jsonnet = [lang];\nexport { jsonnet as default };"],
  "mappings": "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",
  "names": []
}
