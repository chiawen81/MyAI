{
  "version": 3,
  "sources": ["../../../../../../node_modules/shiki/dist/langs/haskell.mjs"],
  "sourcesContent": ["const lang = Object.freeze({\n  \"displayName\": \"Haskell\",\n  \"fileTypes\": [\"hs\", \"hs-boot\", \"hsig\"],\n  \"name\": \"haskell\",\n  \"patterns\": [{\n    \"include\": \"#liquid_haskell\"\n  }, {\n    \"include\": \"#comment_like\"\n  }, {\n    \"include\": \"#numeric_literals\"\n  }, {\n    \"include\": \"#string_literal\"\n  }, {\n    \"include\": \"#char_literal\"\n  }, {\n    \"match\": \"(?<!@|#)-\\\\}\",\n    \"name\": \"invalid\"\n  }, {\n    \"captures\": {\n      \"1\": {\n        \"name\": \"punctuation.paren.haskell\"\n      },\n      \"2\": {\n        \"name\": \"punctuation.paren.haskell\"\n      }\n    },\n    \"match\": \"(\\\\()\\\\s*(\\\\))\",\n    \"name\": \"constant.language.unit.haskell\"\n  }, {\n    \"captures\": {\n      \"1\": {\n        \"name\": \"punctuation.paren.haskell\"\n      },\n      \"2\": {\n        \"name\": \"keyword.operator.hash.haskell\"\n      },\n      \"3\": {\n        \"name\": \"keyword.operator.hash.haskell\"\n      },\n      \"4\": {\n        \"name\": \"punctuation.paren.haskell\"\n      }\n    },\n    \"match\": \"(\\\\()(#)\\\\s*(#)(\\\\))\",\n    \"name\": \"constant.language.unit.unboxed.haskell\"\n  }, {\n    \"captures\": {\n      \"1\": {\n        \"name\": \"punctuation.paren.haskell\"\n      },\n      \"2\": {\n        \"name\": \"punctuation.paren.haskell\"\n      }\n    },\n    \"match\": \"(\\\\()\\\\s*,[\\\\s,]*(\\\\))\",\n    \"name\": \"support.constant.tuple.haskell\"\n  }, {\n    \"captures\": {\n      \"1\": {\n        \"name\": \"punctuation.paren.haskell\"\n      },\n      \"2\": {\n        \"name\": \"keyword.operator.hash.haskell\"\n      },\n      \"3\": {\n        \"name\": \"keyword.operator.hash.haskell\"\n      },\n      \"4\": {\n        \"name\": \"punctuation.paren.haskell\"\n      }\n    },\n    \"match\": \"(\\\\()(#)\\\\s*,[\\\\s,]*(#)(\\\\))\",\n    \"name\": \"support.constant.tuple.unboxed.haskell\"\n  }, {\n    \"captures\": {\n      \"1\": {\n        \"name\": \"punctuation.bracket.haskell\"\n      },\n      \"2\": {\n        \"name\": \"punctuation.bracket.haskell\"\n      }\n    },\n    \"match\": \"(\\\\[)\\\\s*(\\\\])\",\n    \"name\": \"constant.language.empty-list.haskell\"\n  }, {\n    \"begin\": \"(\\\\b(?<!')(module)|^(signature))(\\\\b(?!'))\",\n    \"beginCaptures\": {\n      \"2\": {\n        \"name\": \"keyword.other.module.haskell\"\n      },\n      \"3\": {\n        \"name\": \"keyword.other.signature.haskell\"\n      }\n    },\n    \"end\": \"(?=\\\\b(?<!')where\\\\b(?!'))\",\n    \"name\": \"meta.declaration.module.haskell\",\n    \"patterns\": [{\n      \"include\": \"#comment_like\"\n    }, {\n      \"include\": \"#module_name\"\n    }, {\n      \"include\": \"#module_exports\"\n    }, {\n      \"match\": \"[a-z]+\",\n      \"name\": \"invalid\"\n    }]\n  }, {\n    \"include\": \"#ffi\"\n  }, {\n    \"begin\": \"^(\\\\s*)(class)(\\\\b(?!'))\",\n    \"beginCaptures\": {\n      \"2\": {\n        \"name\": \"keyword.other.class.haskell\"\n      }\n    },\n    \"end\": \"(?x)\\n\\n(?=(?<!')\\\\bwhere\\\\b(?!'))\\n\\n|(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\",\n    \"name\": \"meta.declaration.class.haskell\",\n    \"patterns\": [{\n      \"include\": \"#comment_like\"\n    }, {\n      \"include\": \"#where\"\n    }, {\n      \"include\": \"#type_signature\"\n    }]\n  }, {\n    \"begin\": \"(?x)\\n^(\\\\s*)(data|newtype)(?:\\\\s+(instance))?\\\\s+\\n\\n((?:(?!\\n\\n(?:\\n(?<![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n(?:=|--+)\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n)\\n\\n| (?:\\\\b(?<!')(?:where|deriving)\\\\b(?!'))\\n\\n| {-\\n\\n).)*)\\n(?=\\\\b(?<!'')where\\\\b(?!''))\",\n    \"beginCaptures\": {\n      \"2\": {\n        \"name\": \"keyword.other.$2.haskell\"\n      },\n      \"3\": {\n        \"name\": \"keyword.other.instance.haskell\"\n      },\n      \"4\": {\n        \"patterns\": [{\n          \"include\": \"#type_signature\"\n        }]\n      }\n    },\n    \"end\": \"(?x)\\n\\n(?=(?<!')\\\\bderiving\\\\b(?!'))\\n\\n|(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\\n\",\n    \"name\": \"meta.declaration.$2.generalized.haskell\",\n    \"patterns\": [{\n      \"include\": \"#comment_like\"\n    }, {\n      \"begin\": \"(?x)\\n(?<!')\\\\b(where)\\n\\\\s*(\\\\{)(?!-)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.other.where.haskell\"\n        },\n        \"2\": {\n          \"name\": \"punctuation.brace.haskell\"\n        }\n      },\n      \"end\": \"(\\\\})\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.brace.haskell\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#comment_like\"\n      }, {\n        \"include\": \"#gadt_constructor\"\n      }, {\n        \"match\": \";\",\n        \"name\": \"punctuation.semicolon.haskell\"\n      }]\n    }, {\n      \"match\": \"\\\\b(?<!')(where)\\\\b(?!')\",\n      \"name\": \"keyword.other.where.haskell\"\n    }, {\n      \"include\": \"#deriving\"\n    }, {\n      \"include\": \"#gadt_constructor\"\n    }]\n  }, {\n    \"include\": \"#role_annotation\"\n  }, {\n    \"begin\": \"^(\\\\s*)(pattern)\\\\s+(.*?)\\\\s+(::|\\u2237)(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\",\n    \"beginCaptures\": {\n      \"2\": {\n        \"name\": \"keyword.other.pattern.haskell\"\n      },\n      \"3\": {\n        \"patterns\": [{\n          \"include\": \"#comma\"\n        }, {\n          \"include\": \"#data_constructor\"\n        }]\n      },\n      \"4\": {\n        \"name\": \"keyword.operator.double-colon.haskell\"\n      }\n    },\n    \"end\": \"(?x)\\n(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\\n\",\n    \"name\": \"meta.declaration.pattern.type.haskell\",\n    \"patterns\": [{\n      \"include\": \"#type_signature\"\n    }]\n  }, {\n    \"begin\": \"^\\\\s*(pattern)\\\\b(?!')\",\n    \"captures\": {\n      \"1\": {\n        \"name\": \"keyword.other.pattern.haskell\"\n      }\n    },\n    \"end\": \"(?x)\\n(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\\n\",\n    \"name\": \"meta.declaration.pattern.haskell\",\n    \"patterns\": [{\n      \"include\": \"$self\"\n    }]\n  }, {\n    \"begin\": \"(?x)\\n\\n^(\\\\s*)(data|newtype)(?:\\\\s+(family|instance))?\\\\s+\\n\\n(((?!\\n\\n(?:\\n(?<![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n(?:=|--+)\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n)\\n\\n| (?:\\\\b(?<!')(?:where|deriving)\\\\b(?!'))\\n\\n| {-\\n\\n).)*)\",\n    \"beginCaptures\": {\n      \"2\": {\n        \"name\": \"keyword.other.$2.haskell\"\n      },\n      \"3\": {\n        \"name\": \"keyword.other.$3.haskell\"\n      },\n      \"4\": {\n        \"patterns\": [{\n          \"include\": \"#type_signature\"\n        }]\n      }\n    },\n    \"end\": \"(?x)\\n\\n(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\",\n    \"name\": \"meta.declaration.$2.algebraic.haskell\",\n    \"patterns\": [{\n      \"include\": \"#comment_like\"\n    }, {\n      \"include\": \"#deriving\"\n    }, {\n      \"include\": \"#forall\"\n    }, {\n      \"include\": \"#adt_constructor\"\n    }, {\n      \"include\": \"#context\"\n    }, {\n      \"include\": \"#record_decl\"\n    }, {\n      \"include\": \"#type_signature\"\n    }]\n  }, {\n    \"begin\": \"(?x)\\n\\n^(\\\\s*)(type)\\\\s+(family)\\\\b(?!')\\n\\n(((?!\\n\\n(?:\\n(?<![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n(?:=|--+)\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n)\\n\\n| \\\\b(?<!')where\\\\b(?!')\\n\\n| {-\\n\\n).)*)\",\n    \"beginCaptures\": {\n      \"2\": {\n        \"name\": \"keyword.other.type.haskell\"\n      },\n      \"3\": {\n        \"name\": \"keyword.other.family.haskell\"\n      },\n      \"4\": {\n        \"patterns\": [{\n          \"include\": \"#comment_like\"\n        }, {\n          \"include\": \"#where\"\n        }, {\n          \"include\": \"#type_signature\"\n        }]\n      }\n    },\n    \"end\": \"(?x)\\n(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\\n\",\n    \"name\": \"meta.declaration.type.family.haskell\",\n    \"patterns\": [{\n      \"include\": \"#comment_like\"\n    }, {\n      \"include\": \"#where\"\n    }, {\n      \"include\": \"#type_signature\"\n    }]\n  }, {\n    \"begin\": \"(?x)\\n\\n^(\\\\s*)(type)(?:\\\\s+(instance))?\\\\s+\\n\\n(((?!\\n\\n(?:\\n(?<![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n(?:=|--+|::|\\u2237)\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n)\\n\\n| {-\\n\\n).)*)\",\n    \"beginCaptures\": {\n      \"2\": {\n        \"name\": \"keyword.other.type.haskell\"\n      },\n      \"3\": {\n        \"name\": \"keyword.other.instance.haskell\"\n      },\n      \"4\": {\n        \"patterns\": [{\n          \"include\": \"#type_signature\"\n        }]\n      }\n    },\n    \"end\": \"(?x)\\n(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\\n\",\n    \"name\": \"meta.declaration.type.haskell\",\n    \"patterns\": [{\n      \"include\": \"#type_signature\"\n    }]\n  }, {\n    \"begin\": \"^(\\\\s*)(instance)(\\\\b(?!'))\",\n    \"beginCaptures\": {\n      \"2\": {\n        \"name\": \"keyword.other.instance.haskell\"\n      }\n    },\n    \"end\": \"(?x)\\n\\n(?=\\\\b(?<!')(where)\\\\b(?!'))\\n\\n|(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\\n\",\n    \"name\": \"meta.declaration.instance.haskell\",\n    \"patterns\": [{\n      \"include\": \"#comment_like\"\n    }, {\n      \"include\": \"#where\"\n    }, {\n      \"include\": \"#type_signature\"\n    }]\n  }, {\n    \"begin\": \"^(\\\\s*)(import)(\\\\b(?!'))\",\n    \"beginCaptures\": {\n      \"2\": {\n        \"name\": \"keyword.other.import.haskell\"\n      }\n    },\n    \"end\": \"(?x)\\n\\n(?=\\\\b(?<!')(where)\\\\b(?!'))\\n\\n|(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\\n\",\n    \"name\": \"meta.import.haskell\",\n    \"patterns\": [{\n      \"include\": \"#comment_like\"\n    }, {\n      \"include\": \"#where\"\n    }, {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"keyword.other.$1.haskell\"\n        }\n      },\n      \"match\": \"(qualified|as|hiding)\"\n    }, {\n      \"include\": \"#module_name\"\n    }, {\n      \"include\": \"#module_exports\"\n    }]\n  }, {\n    \"include\": \"#deriving\"\n  }, {\n    \"include\": \"#layout_herald\"\n  }, {\n    \"include\": \"#keyword\"\n  }, {\n    \"captures\": {\n      \"1\": {\n        \"name\": \"keyword.other.$1.haskell\"\n      },\n      \"2\": {\n        \"patterns\": [{\n          \"include\": \"#comment_like\"\n        }, {\n          \"include\": \"#integer_literals\"\n        }, {\n          \"include\": \"#infix_op\"\n        }]\n      }\n    },\n    \"match\": \"^\\\\s*(infix[lr]?)\\\\s+(.*)\",\n    \"name\": \"meta.fixity-declaration.haskell\"\n  }, {\n    \"include\": \"#overloaded_label\"\n  }, {\n    \"include\": \"#type_application\"\n  }, {\n    \"include\": \"#reserved_symbol\"\n  }, {\n    \"include\": \"#fun_decl\"\n  }, {\n    \"include\": \"#qualifier\"\n  }, {\n    \"include\": \"#data_constructor\"\n  }, {\n    \"include\": \"#start_type_signature\"\n  }, {\n    \"include\": \"#prefix_op\"\n  }, {\n    \"include\": \"#infix_op\"\n  }, {\n    \"begin\": \"(\\\\()(#)\\\\s\",\n    \"beginCaptures\": {\n      \"1\": {\n        \"name\": \"punctuation.paren.haskell\"\n      },\n      \"2\": {\n        \"name\": \"keyword.operator.hash.haskell\"\n      }\n    },\n    \"end\": \"(#)(\\\\))\",\n    \"endCaptures\": {\n      \"1\": {\n        \"name\": \"keyword.operator.hash.haskell\"\n      },\n      \"2\": {\n        \"name\": \"punctuation.paren.haskell\"\n      }\n    },\n    \"patterns\": [{\n      \"include\": \"#comma\"\n    }, {\n      \"include\": \"$self\"\n    }]\n  }, {\n    \"begin\": \"(\\\\()\",\n    \"beginCaptures\": {\n      \"1\": {\n        \"name\": \"punctuation.paren.haskell\"\n      }\n    },\n    \"end\": \"(\\\\))\",\n    \"endCaptures\": {\n      \"1\": {\n        \"name\": \"punctuation.paren.haskell\"\n      }\n    },\n    \"patterns\": [{\n      \"include\": \"#comma\"\n    }, {\n      \"include\": \"$self\"\n    }]\n  }, {\n    \"include\": \"#quasi_quote\"\n  }, {\n    \"begin\": \"(\\\\[)\",\n    \"beginCaptures\": {\n      \"1\": {\n        \"name\": \"punctuation.bracket.haskell\"\n      }\n    },\n    \"end\": \"(\\\\])\",\n    \"endCaptures\": {\n      \"1\": {\n        \"name\": \"punctuation.bracket.haskell\"\n      }\n    },\n    \"patterns\": [{\n      \"include\": \"#comma\"\n    }, {\n      \"include\": \"$self\"\n    }]\n  }, {\n    \"include\": \"#record\"\n  }],\n  \"repository\": {\n    \"adt_constructor\": {\n      \"patterns\": [{\n        \"include\": \"#comment_like\"\n      }, {\n        \"begin\": \"(?x)\\n(?<![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n(?:(=)|(\\\\|))\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.operator.eq.haskell\"\n          },\n          \"2\": {\n            \"name\": \"keyword.operator.pipe.haskell\"\n          }\n        },\n        \"end\": \"(?x)\\n(?:\\\\G|^)\\\\s*\\n(?:\\n\\n(?:\\n\\n(?<!')\\\\b((?:[\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}'\\\\.])+)\\n\\n| ('?\\n(?<paren>\\n\\\\(\\n(?:\\n[^\\\\(\\\\)]*\\n| \\\\g<paren>\\n)*\\n\\\\)\\n)\\n)\\n\\n| ('?\\n(?<brac>\\n\\\\(\\n(?:\\n[^\\\\[\\\\]]*\\n| \\\\g<brac>\\n)*\\n\\\\]\\n)\\n)\\n)\\n\\n\\\\s*\\n\\n(?:(?<![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])(:[\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]*)\\n\\n| (`)([\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*)(`)\\n)\\n\\n)\\n|\\n(?:(?<!')\\\\b([\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*))\\n|\\n(\\\\()\\\\s*(:[\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]*)\\\\s*(\\\\))\",\n        \"endCaptures\": {\n          \"1\": {\n            \"patterns\": [{\n              \"include\": \"#type_signature\"\n            }]\n          },\n          \"2\": {\n            \"patterns\": [{\n              \"include\": \"#type_signature\"\n            }]\n          },\n          \"4\": {\n            \"patterns\": [{\n              \"include\": \"#type_signature\"\n            }]\n          },\n          \"6\": {\n            \"name\": \"constant.other.operator.haskell\"\n          },\n          \"7\": {\n            \"name\": \"punctuation.backtick.haskell\"\n          },\n          \"8\": {\n            \"name\": \"constant.other.haskell\"\n          },\n          \"9\": {\n            \"name\": \"punctuation.backtick.haskell\"\n          },\n          \"10\": {\n            \"name\": \"constant.other.haskell\"\n          },\n          \"11\": {\n            \"name\": \"punctuation.paren.haskell\"\n          },\n          \"12\": {\n            \"name\": \"constant.other.operator.haskell\"\n          },\n          \"13\": {\n            \"name\": \"punctuation.paren.haskell\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#comment_like\"\n        }, {\n          \"include\": \"#deriving\"\n        }, {\n          \"include\": \"#record_decl\"\n        }, {\n          \"include\": \"#forall\"\n        }, {\n          \"include\": \"#context\"\n        }]\n      }]\n    },\n    \"block_comment\": {\n      \"applyEndPatternLast\": 1,\n      \"begin\": \"\\\\{-\",\n      \"captures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.comment.haskell\"\n        }\n      },\n      \"end\": \"-\\\\}\",\n      \"name\": \"comment.block.haskell\",\n      \"patterns\": [{\n        \"include\": \"#block_comment\"\n      }]\n    },\n    \"char_literal\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.string.begin.haskell\"\n        },\n        \"2\": {\n          \"name\": \"constant.character.escape.haskell\"\n        },\n        \"3\": {\n          \"name\": \"constant.character.escape.octal.haskell\"\n        },\n        \"4\": {\n          \"name\": \"constant.character.escape.hexadecimal.haskell\"\n        },\n        \"5\": {\n          \"name\": \"constant.character.escape.control.haskell\"\n        },\n        \"6\": {\n          \"name\": \"punctuation.definition.string.end.haskell\"\n        }\n      },\n      \"match\": `(?x)\n(?<![\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}'])\n(')\n(?:\n[\\\\ -\\\\[\\\\]-~]\n| (\\\\\\\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE\n|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS\n|US|SP|DEL|[abfnrtv\\\\\\\\\\\\\"'\\\\\\\\&]))\n| (\\\\\\\\o[0-7]+)\n| (\\\\\\\\x[0-9A-Fa-f]+)\n| (\\\\\\\\\\\\^[A-Z@\\\\[\\\\]\\\\\\\\\\\\^_])\n)\n(')\n`,\n      \"name\": \"string.quoted.single.haskell\"\n    },\n    \"comma\": {\n      \"match\": \",\",\n      \"name\": \"punctuation.separator.comma.haskell\"\n    },\n    \"comment_like\": {\n      \"patterns\": [{\n        \"include\": \"#cpp\"\n      }, {\n        \"include\": \"#pragma\"\n      }, {\n        \"include\": \"#comments\"\n      }]\n    },\n    \"comments\": {\n      \"patterns\": [{\n        \"begin\": \"^(\\\\s*)(--\\\\s[\\\\|\\\\$])\",\n        \"beginCaptures\": {\n          \"2\": {\n            \"name\": \"punctuation.whitespace.comment.leading.haskell\"\n          }\n        },\n        \"end\": \"(?=^(?!\\\\1--+(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])))\",\n        \"name\": \"comment.block.documentation.haskell\"\n      }, {\n        \"begin\": \"(^[ \\\\t]+)?(--\\\\s[\\\\^\\\\*])\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.whitespace.comment.leading.haskell\"\n          }\n        },\n        \"end\": \"\\\\n\",\n        \"name\": \"comment.line.documentation.haskell\"\n      }, {\n        \"applyEndPatternLast\": 1,\n        \"begin\": \"\\\\{-\\\\s?[\\\\|\\\\$\\\\*\\\\^]\",\n        \"captures\": {\n          \"0\": {\n            \"name\": \"punctuation.definition.comment.haskell\"\n          }\n        },\n        \"end\": \"-\\\\}\",\n        \"name\": \"comment.block.documentation.haskell\",\n        \"patterns\": [{\n          \"include\": \"#block_comment\"\n        }]\n      }, {\n        \"begin\": \"(^[ \\\\t]+)?(?=--+(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]))\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.whitespace.comment.leading.haskell\"\n          }\n        },\n        \"comment\": \"Operators may begin with '--' as long as they are not entirely composed of '-' characters. This means comments can't be immediately followed by an allowable operator character.\",\n        \"end\": \"(?!\\\\G)\",\n        \"patterns\": [{\n          \"begin\": \"--\",\n          \"beginCaptures\": {\n            \"0\": {\n              \"name\": \"punctuation.definition.comment.haskell\"\n            }\n          },\n          \"end\": \"\\\\n\",\n          \"name\": \"comment.line.double-dash.haskell\"\n        }]\n      }, {\n        \"include\": \"#block_comment\"\n      }]\n    },\n    \"context\": {\n      \"captures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"include\": \"#comment_like\"\n          }, {\n            \"include\": \"#type_signature\"\n          }]\n        },\n        \"2\": {\n          \"name\": \"keyword.operator.big-arrow.haskell\"\n        }\n      },\n      \"match\": \"(?x)\\n(.*)\\n(?<![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n(=>|\\u21D2)\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n\"\n    },\n    \"cpp\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.preprocessor.c\"\n        }\n      },\n      \"comment\": `In addition to Haskell's \"native\" syntax, GHC permits the C preprocessor to be run on a source file.`,\n      \"match\": \"^(#).*$\",\n      \"name\": \"meta.preprocessor.c\"\n    },\n    \"data_constructor\": {\n      \"match\": \"\\\\b(?<!')[\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*(?![\\\\.'\\\\w])\",\n      \"name\": \"constant.other.haskell\"\n    },\n    \"deriving\": {\n      \"patterns\": [{\n        \"begin\": \"^(\\\\s*)(deriving)\\\\s+(?:(via|stock|newtype|anyclass)\\\\s+)?\",\n        \"beginCaptures\": {\n          \"2\": {\n            \"name\": \"keyword.other.deriving.haskell\"\n          },\n          \"3\": {\n            \"name\": \"keyword.other.deriving.strategy.$3.haskell\"\n          }\n        },\n        \"end\": \"(?x)\\n\\n(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\",\n        \"name\": \"meta.deriving.haskell\",\n        \"patterns\": [{\n          \"include\": \"#comment_like\"\n        }, {\n          \"match\": \"(?<!')\\\\b(instance)\\\\b(?!')\",\n          \"name\": \"keyword.other.instance.haskell\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"keyword.other.deriving.strategy.$1.haskell\"\n            }\n          },\n          \"match\": \"(?<!')\\\\b(via|stock|newtype|anyclass)\\\\b(?!')\"\n        }, {\n          \"include\": \"#type_signature\"\n        }]\n      }, {\n        \"begin\": \"(deriving)(?:\\\\s+(stock|newtype|anyclass))?\\\\s*(\\\\()\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.other.deriving.haskell\"\n          },\n          \"2\": {\n            \"name\": \"keyword.other.deriving.strategy.$2.haskell\"\n          },\n          \"3\": {\n            \"name\": \"punctuation.paren.haskell\"\n          }\n        },\n        \"end\": \"(\\\\))\",\n        \"endCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.paren.haskell\"\n          }\n        },\n        \"name\": \"meta.deriving.haskell\",\n        \"patterns\": [{\n          \"include\": \"#type_signature\"\n        }]\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.other.deriving.haskell\"\n          },\n          \"2\": {\n            \"name\": \"keyword.other.deriving.strategy.$2.haskell\"\n          },\n          \"3\": {\n            \"patterns\": [{\n              \"include\": \"#type_signature\"\n            }]\n          },\n          \"5\": {\n            \"name\": \"keyword.other.deriving.strategy.via.haskell\"\n          },\n          \"6\": {\n            \"patterns\": [{\n              \"include\": \"#type_signature\"\n            }]\n          }\n        },\n        \"match\": \"(?x)\\n(deriving)(?:\\\\s+(stock|newtype|anyclass))?\\\\s+\\n([\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*)\\n(\\\\s+(via)\\\\s+(.*)$)?\\n\",\n        \"name\": \"meta.deriving.haskell\"\n      }, {\n        \"match\": \"(?<!')\\\\b(via)\\\\b(?!')\",\n        \"name\": \"keyword.other.deriving.strategy.via.haskell\"\n      }]\n    },\n    \"double_colon\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.double-colon.haskell\"\n        }\n      },\n      \"match\": \"\\\\s*(::|\\u2237)(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\\\s*\"\n    },\n    \"export_constructs\": {\n      \"patterns\": [{\n        \"include\": \"#comment_like\"\n      }, {\n        \"begin\": \"\\\\b(?<!')(pattern)\\\\b(?!')\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.other.pattern.haskell\"\n          }\n        },\n        \"end\": \"(?x)\\n\\n([\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*)\\n\\n| (\\\\()\\\\s*(:[\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]+)\\\\s*(\\\\))\",\n        \"endCaptures\": {\n          \"1\": {\n            \"name\": \"constant.other.haskell\"\n          },\n          \"2\": {\n            \"name\": \"punctuation.paren.haskell\"\n          },\n          \"3\": {\n            \"name\": \"constant.other.operator.haskell\"\n          },\n          \"4\": {\n            \"name\": \"punctuation.paren.haskell\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#comment_like\"\n        }]\n      }, {\n        \"begin\": \"\\\\b(?<!')(type)\\\\b(?!')\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.other.type.haskell\"\n          }\n        },\n        \"end\": \"(?x)\\n\\n([\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*)\\n\\n| (\\\\()\\\\s*([\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]+)\\\\s*(\\\\))\",\n        \"endCaptures\": {\n          \"1\": {\n            \"name\": \"storage.type.haskell\"\n          },\n          \"2\": {\n            \"name\": \"punctuation.paren.haskell\"\n          },\n          \"3\": {\n            \"name\": \"storage.type.operator.haskell\"\n          },\n          \"4\": {\n            \"name\": \"punctuation.paren.haskell\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#comment_like\"\n        }]\n      }, {\n        \"match\": \"(?<!')\\\\b[\\\\p{Ll}_][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*\",\n        \"name\": \"entity.name.function.haskell\"\n      }, {\n        \"match\": \"(?<!')\\\\b[\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*\",\n        \"name\": \"storage.type.haskell\"\n      }, {\n        \"include\": \"#record_wildcard\"\n      }, {\n        \"include\": \"#reserved_symbol\"\n      }, {\n        \"include\": \"#prefix_op\"\n      }]\n    },\n    \"ffi\": {\n      \"begin\": \"^(\\\\s*)(foreign)\\\\s+(import|export)\\\\s+\",\n      \"beginCaptures\": {\n        \"2\": {\n          \"name\": \"keyword.other.foreign.haskell\"\n        },\n        \"3\": {\n          \"name\": \"keyword.other.$3.haskell\"\n        }\n      },\n      \"end\": \"(?x)\\n(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\\n\",\n      \"name\": \"meta.$3.foreign.haskell\",\n      \"patterns\": [{\n        \"include\": \"#comment_like\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.other.calling-convention.$1.haskell\"\n          }\n        },\n        \"match\": \"\\\\b(?<!')(ccall|cplusplus|dotnet|jvm|stdcall|prim|capi)\\\\s+\"\n      }, {\n        \"begin\": `(?=\")|(?=\\\\b(?<!')([\\\\p{Ll}_][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*)\\\\b(?!'))`,\n        \"end\": \"(?=(::|\\u2237)(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]))\",\n        \"patterns\": [{\n          \"include\": \"#comment_like\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"keyword.other.safety.$1.haskell\"\n            },\n            \"2\": {\n              \"name\": \"entity.name.foreign.haskell\",\n              \"patterns\": [{\n                \"include\": \"#string_literal\"\n              }]\n            },\n            \"3\": {\n              \"name\": \"entity.name.function.haskell\"\n            },\n            \"4\": {\n              \"name\": \"entity.name.function.infix.haskell\"\n            }\n          },\n          \"match\": `(?x)\n\\\\b(?<!')(safe|unsafe|interruptible)\\\\b(?!')\n\\\\s*\n(\"(?:\\\\\\\\\"|[^\"])*\")?\n\\\\s*\n(?:\n(?:\\\\b(?<!'')([\\\\p{Ll}_][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*)\\\\b(?!'))\n|(?:\\\\(\\\\s*(?!--+\\\\))([\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]\\`{}_\"']]+)\\\\s*\\\\))\n)\n`\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"keyword.other.safety.$1.haskell\"\n            },\n            \"2\": {\n              \"name\": \"entity.name.foreign.haskell\",\n              \"patterns\": [{\n                \"include\": \"#string_literal\"\n              }]\n            }\n          },\n          \"match\": `(?x)\n\\\\b(?<!')(safe|unsafe|interruptible)\\\\b(?!')\n\\\\s*\n(\"(?:\\\\\\\\\"|[^\"])*\")?\n\\\\s*$\n`\n        }, {\n          \"captures\": {\n            \"0\": {\n              \"name\": \"entity.name.foreign.haskell\",\n              \"patterns\": [{\n                \"include\": \"#string_literal\"\n              }]\n            }\n          },\n          \"match\": '(?x)\\n\"(?:\\\\\\\\\"|[^\"])*\"'\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"entity.name.function.haskell\"\n            },\n            \"2\": {\n              \"name\": \"punctuation.paren.haskell\"\n            },\n            \"3\": {\n              \"name\": \"entity.name.function.infix.haskell\"\n            },\n            \"4\": {\n              \"name\": \"punctuation.paren.haskell\"\n            }\n          },\n          \"match\": \"(?x)\\n(?:\\\\b(?<!'')([\\\\p{Ll}_][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*)\\\\b(?!'))\\n|(?:(\\\\()\\\\s*(?!--+\\\\))([\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]+)\\\\s*(\\\\)))\\n\"\n        }]\n      }, {\n        \"include\": \"#double_colon\"\n      }, {\n        \"include\": \"#type_signature\"\n      }]\n    },\n    \"float_literals\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"constant.numeric.floating.decimal.haskell\"\n        },\n        \"2\": {\n          \"name\": \"constant.numeric.floating.hexadecimal.haskell\"\n        }\n      },\n      \"comment\": \"Floats are decimal or hexadecimal\",\n      \"match\": \"(?x)\\n\\\\b(?<!')\\n(?:\\n([0-9][_0-9]*\\\\.[0-9][_0-9]*(?:[eE][-+]?[0-9][_0-9]*)?\\n|[0-9][_0-9]*[eE][-+]?[0-9][_0-9]*\\n)\\n|\\n(0[xX]_*[0-9a-fA-F][_0-9a-fA-F]*\\\\.[0-9a-fA-F][_0-9a-fA-F]*(?:[pP][-+]?[0-9][_0-9]*)?\\n|0[xX]_*[0-9a-fA-F][_0-9a-fA-F]*[pP][-+]?[0-9][_0-9]*\\n)\\n)\\\\b(?!')\"\n    },\n    \"forall\": {\n      \"begin\": \"\\\\b(?<!')(forall|\\u2200)\\\\b(?!')\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.other.forall.haskell\"\n        }\n      },\n      \"end\": \"(\\\\.)|(->|\\u2192)\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.period.haskell\"\n        },\n        \"2\": {\n          \"name\": \"keyword.operator.arrow.haskell\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#comment_like\"\n      }, {\n        \"include\": \"#type_variable\"\n      }, {\n        \"include\": \"#type_signature\"\n      }]\n    },\n    \"fun_decl\": {\n      \"begin\": \"(?x)^(\\\\s*)\\n(?<fn>\\n(?:\\n[\\\\p{Ll}_][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*\\\\#*\\n| \\\\(\\\\s*\\n(?!--+\\\\))\\n[\\\\p{S}\\\\p{P}&&[^(),:;\\\\[\\\\]`{}_\\\"']]\\n[\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]*\\n\\\\s*\\\\)\\n)\\n(?:\\\\s*,\\\\s*\\\\g<fn>)?\\n)\\n\\\\s*(?<![\\\\p{S}\\\\p{P}&&[^\\\\),;\\\\]`}_\\\"']])(::|\\u2237)(?![\\\\p{S}\\\\p{P}&&[^\\\\(,;\\\\[`{_\\\"']])\\n\",\n      \"beginCaptures\": {\n        \"2\": {\n          \"name\": \"entity.name.function.haskell\",\n          \"patterns\": [{\n            \"include\": \"#reserved_symbol\"\n          }, {\n            \"include\": \"#prefix_op\"\n          }]\n        },\n        \"3\": {\n          \"name\": \"keyword.operator.double-colon.haskell\"\n        }\n      },\n      \"end\": \"(?x)\\n\\n\\n(?=\\n\\n(?<![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n\\n((<-|\\u2190)|(=)|(-<|\\u21A2)|(-<<|\\u291B))\\n\\n([(),;\\\\[\\\\]`{}_\\\"']|[^\\\\p{S}\\\\p{P}])\\n)\\n\\n|(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\\n\",\n      \"name\": \"meta.function.type-declaration.haskell\",\n      \"patterns\": [{\n        \"include\": \"#type_signature\"\n      }]\n    },\n    \"gadt_constructor\": {\n      \"patterns\": [{\n        \"begin\": \"(?x)\\n^(\\\\s*)\\n(?:\\n(\\\\b(?<!')[\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*)\\n|(\\\\()\\\\s*(:[\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]*)\\\\s*(\\\\))\\n)\",\n        \"beginCaptures\": {\n          \"2\": {\n            \"name\": \"constant.other.haskell\"\n          },\n          \"3\": {\n            \"name\": \"punctuation.paren.haskell\"\n          },\n          \"4\": {\n            \"name\": \"constant.other.operator.haskell\"\n          },\n          \"5\": {\n            \"name\": \"punctuation.paren.haskell\"\n          }\n        },\n        \"end\": \"(?x)\\n\\n(?=\\\\b(?<!'')deriving\\\\b(?!'))\\n\\n|(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\\n\",\n        \"patterns\": [{\n          \"include\": \"#comment_like\"\n        }, {\n          \"include\": \"#deriving\"\n        }, {\n          \"include\": \"#double_colon\"\n        }, {\n          \"include\": \"#record_decl\"\n        }, {\n          \"include\": \"#type_signature\"\n        }]\n      }, {\n        \"begin\": \"(?x)\\n(\\\\b(?<!')[\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}]*)\\n|(\\\\()\\\\s*(:[\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]*)\\\\s*(\\\\))\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"constant.other.haskell\"\n          },\n          \"2\": {\n            \"name\": \"punctuation.paren.haskell\"\n          },\n          \"3\": {\n            \"name\": \"constant.other.operator.haskell\"\n          },\n          \"4\": {\n            \"name\": \"punctuation.paren.haskell\"\n          }\n        },\n        \"end\": \"$\",\n        \"patterns\": [{\n          \"include\": \"#comment_like\"\n        }, {\n          \"include\": \"#deriving\"\n        }, {\n          \"include\": \"#double_colon\"\n        }, {\n          \"include\": \"#record_decl\"\n        }, {\n          \"include\": \"#type_signature\"\n        }]\n      }]\n    },\n    \"infix_op\": {\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.operator.promotion.haskell\"\n          },\n          \"2\": {\n            \"name\": \"entity.name.namespace.haskell\"\n          },\n          \"3\": {\n            \"name\": \"keyword.operator.infix.haskell\"\n          }\n        },\n        \"comment\": \"In case this regex seems overly general, note that Haskell permits  the definition of new operators which can be nearly any string of  punctuation characters, such as $%^&*.\\n\",\n        \"match\": \"(?x)\\n((?:(?<!'')('')?[\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}'']*\\\\.)*)\\n(\\\\#+|[\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]+(?<!\\\\#))\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"punctuation.backtick.haskell\"\n          },\n          \"2\": {\n            \"name\": \"entity.name.namespace.haskell\"\n          },\n          \"3\": {\n            \"patterns\": [{\n              \"include\": \"#data_constructor\"\n            }]\n          },\n          \"4\": {\n            \"name\": \"punctuation.backtick.haskell\"\n          }\n        },\n        \"comment\": \"In case this regex seems unusual for an infix operator, note that Haskell\\nallows any ordinary function application (elem 4 [1..10]) to be rewritten\\nas an infix expression (4 `elem` [1..10]).\\n\",\n        \"match\": \"(`)((?:[\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}'']*\\\\.)*)([\\\\p{Ll}\\\\p{Lu}_][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}'']*)(`)\",\n        \"name\": \"keyword.operator.function.infix.haskell\"\n      }]\n    },\n    \"inline_phase\": {\n      \"begin\": \"\\\\[\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.bracket.haskell\"\n        }\n      },\n      \"end\": \"\\\\]\",\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.bracket.haskell\"\n        }\n      },\n      \"name\": \"meta.inlining-phase.haskell\",\n      \"patterns\": [{\n        \"match\": \"~\",\n        \"name\": \"punctuation.tilde.haskell\"\n      }, {\n        \"include\": \"#integer_literals\"\n      }, {\n        \"match\": \"\\\\w*\",\n        \"name\": \"invalid\"\n      }]\n    },\n    \"integer_literals\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"constant.numeric.integral.decimal.haskell\"\n        },\n        \"2\": {\n          \"name\": \"constant.numeric.integral.hexadecimal.haskell\"\n        },\n        \"3\": {\n          \"name\": \"constant.numeric.integral.octal.haskell\"\n        },\n        \"4\": {\n          \"name\": \"constant.numeric.integral.binary.haskell\"\n        }\n      },\n      \"match\": \"(?x)\\n\\\\b(?<!')\\n(?:\\n([0-9][_0-9]*)\\n| (0[xX]_*[0-9a-fA-F][_0-9a-fA-F]*)\\n| (0[oO]_*[0-7][_0-7]*)\\n| (0[bB]_*[01][_01]*)\\n)\\n\\\\b(?!')\"\n    },\n    \"keyword\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"keyword.other.$1.haskell\"\n        },\n        \"2\": {\n          \"name\": \"keyword.control.$2.haskell\"\n        }\n      },\n      \"match\": \"\\\\b(?<!')(?:(where|let|in|default)|(m?do|if|then|else|case|of|proc|rec))\\\\b(?!')\"\n    },\n    \"layout_herald\": {\n      \"begin\": \"(?x)\\n(?<!')\\\\b(?:(where|let|m?do)|(of))\\n\\\\s*(\\\\{)(?!-)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.other.$1.haskell\"\n        },\n        \"2\": {\n          \"name\": \"keyword.control.of.haskell\"\n        },\n        \"3\": {\n          \"name\": \"punctuation.brace.haskell\"\n        }\n      },\n      \"end\": \"(\\\\})\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.brace.haskell\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"$self\"\n      }, {\n        \"match\": \";\",\n        \"name\": \"punctuation.semicolon.haskell\"\n      }]\n    },\n    \"liquid_haskell\": {\n      \"begin\": \"\\\\{-@\",\n      \"end\": \"@-\\\\}\",\n      \"name\": \"block.liquidhaskell.haskell\",\n      \"patterns\": [{\n        \"include\": \"$self\"\n      }]\n    },\n    \"module_exports\": {\n      \"applyEndPatternLast\": 1,\n      \"begin\": \"\\\\(\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.paren.haskell\"\n        }\n      },\n      \"end\": \"\\\\)\",\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.paren.haskell\"\n        }\n      },\n      \"name\": \"meta.declaration.exports.haskell\",\n      \"patterns\": [{\n        \"include\": \"#comment_like\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.other.module.haskell\"\n          }\n        },\n        \"match\": \"\\\\b(?<!')(module)\\\\b(?!')\"\n      }, {\n        \"include\": \"#comma\"\n      }, {\n        \"include\": \"#export_constructs\"\n      }, {\n        \"begin\": \"\\\\(\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.paren.haskell\"\n          }\n        },\n        \"end\": \"\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.paren.haskell\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#comment_like\"\n        }, {\n          \"include\": \"#record_wildcard\"\n        }, {\n          \"include\": \"#export_constructs\"\n        }, {\n          \"include\": \"#comma\"\n        }]\n      }]\n    },\n    \"module_name\": {\n      \"match\": \"(?<conid>[\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*(\\\\.\\\\g<conid>)?)\",\n      \"name\": \"entity.name.namespace.haskell\"\n    },\n    \"numeric_literals\": {\n      \"patterns\": [{\n        \"include\": \"#float_literals\"\n      }, {\n        \"include\": \"#integer_literals\"\n      }]\n    },\n    \"overloaded_label\": {\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.operator.prefix.hash.haskell\"\n          },\n          \"2\": {\n            \"patterns\": [{\n              \"include\": \"#string_literal\"\n            }]\n          }\n        },\n        \"match\": '(?x)\\n(?<![\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}\\\\p{S}\\\\p{P}&&[^(,;\\\\[`{]])\\n(\\\\#)\\n(?:\\n\\n(\"(?:\\\\\\\\\"|[^\"])*\")\\n\\n|[\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}\\'\\\\.]+\\n)',\n        \"name\": \"entity.name.label.haskell\"\n      }]\n    },\n    \"pragma\": {\n      \"begin\": \"\\\\{-#\",\n      \"end\": \"#-\\\\}\",\n      \"name\": \"meta.preprocessor.haskell\",\n      \"patterns\": [{\n        \"begin\": \"(?xi) \\\\b(?<!')(LANGUAGE)\\\\b(?!')\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.other.preprocessor.pragma.haskell\"\n          }\n        },\n        \"end\": \"(?=#-\\\\})\",\n        \"patterns\": [{\n          \"match\": \"(?x)\\n(?:No)?\\n(?:AutoDeriveTypeable|DatatypeContexts|DoRec|IncoherentInstances|MonadFailDesugaring|MonoPatBinds|NullaryTypeClasses|OverlappingInstances|PatternSignatures|RecordPuns|RelaxedPolyRec)\",\n          \"name\": \"invalid.deprecated\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"keyword.other.preprocessor.extension.haskell\"\n            }\n          },\n          \"match\": \"(?x)\\n(\\n(?:No)?\\n(?:AllowAmbiguousTypes|AlternativeLayoutRule|AlternativeLayoutRuleTransitional|Arrows|BangPatterns|BinaryLiterals|CApiFFI|CPP|CUSKs|ConstrainedClassMethods|ConstraintKinds|DataKinds|DefaultSignatures|DeriveAnyClass|DeriveDataTypeable|DeriveFoldable|DeriveFunctor|DeriveGeneric|DeriveLift|DeriveTraversable|DerivingStrategies|DerivingVia|DisambiguateRecordFields|DoAndIfThenElse|BlockArguments|DuplicateRecordFields|EmptyCase|EmptyDataDecls|EmptyDataDeriving|ExistentialQuantification|ExplicitForAll|ExplicitNamespaces|ExtendedDefaultRules|FlexibleContexts|FlexibleInstances|ForeignFunctionInterface|FunctionalDependencies|GADTSyntax|GADTs|GHCForeignImportPrim|Generali(?:s|z)edNewtypeDeriving|ImplicitParams|ImplicitPrelude|ImportQualifiedPost|ImpredicativeTypes|TypeFamilyDependencies|InstanceSigs|ApplicativeDo|InterruptibleFFI|JavaScriptFFI|KindSignatures|LambdaCase|LiberalTypeSynonyms|MagicHash|MonadComprehensions|MonoLocalBinds|MonomorphismRestriction|MultiParamTypeClasses|MultiWayIf|NumericUnderscores|NPlusKPatterns|NamedFieldPuns|NamedWildCards|NegativeLiterals|HexFloatLiterals|NondecreasingIndentation|NumDecimals|OverloadedLabels|OverloadedLists|OverloadedStrings|PackageImports|ParallelArrays|ParallelListComp|PartialTypeSignatures|PatternGuards|PatternSynonyms|PolyKinds|PolymorphicComponents|QuantifiedConstraints|PostfixOperators|QuasiQuotes|Rank2Types|RankNTypes|RebindableSyntax|RecordWildCards|RecursiveDo|RelaxedLayout|RoleAnnotations|ScopedTypeVariables|StandaloneDeriving|StarIsType|StaticPointers|Strict|StrictData|TemplateHaskell|TemplateHaskellQuotes|StandaloneKindSignatures|TraditionalRecordSyntax|TransformListComp|TupleSections|TypeApplications|TypeInType|TypeFamilies|TypeOperators|TypeSynonymInstances|UnboxedTuples|UnboxedSums|UndecidableInstances|UndecidableSuperClasses|UnicodeSyntax|UnliftedFFITypes|UnliftedNewtypes|ViewPatterns)\\n)\"\n        }, {\n          \"include\": \"#comma\"\n        }]\n      }, {\n        \"begin\": \"(?xi)\\n\\\\b(?<!')(SPECIALI(?:S|Z)E)\\n(?:\\n\\\\s*( \\\\[ [^\\\\[\\\\]]* \\\\])?\\\\s*\\n|\\\\s+\\n)\\n(instance)\\\\b(?!')\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.other.preprocessor.pragma.haskell\"\n          },\n          \"2\": {\n            \"patterns\": [{\n              \"include\": \"#inline_phase\"\n            }]\n          },\n          \"3\": {\n            \"name\": \"keyword.other.instance.haskell\"\n          }\n        },\n        \"end\": \"(?=#-\\\\})\",\n        \"patterns\": [{\n          \"include\": \"#type_signature\"\n        }]\n      }, {\n        \"begin\": \"(?xi)\\n\\\\b(?<!')(SPECIALI(?:S|Z)E)\\\\b(?!')\\n(?:\\\\s+(INLINE)\\\\b(?!'))?\\n(?:\\\\s*(\\\\[ [^\\\\[\\\\]]* \\\\])?)\\n\\\\s*\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.other.preprocessor.pragma.haskell\"\n          },\n          \"2\": {\n            \"name\": \"keyword.other.preprocessor.pragma.haskell\"\n          },\n          \"3\": {\n            \"patterns\": [{\n              \"include\": \"#inline_phase\"\n            }]\n          }\n        },\n        \"end\": \"(?=#-\\\\})\",\n        \"patterns\": [{\n          \"include\": \"$self\"\n        }]\n      }, {\n        \"match\": \"(?xi) \\\\b(?<!')\\n(LANGUAGE|OPTIONS_GHC|INCLUDE\\n|MINIMAL|UNPACK|OVERLAPS|INCOHERENT\\n|NOUNPACK|SOURCE|OVERLAPPING|OVERLAPPABLE|INLINE\\n|NOINLINE|INLINE?ABLE|CONLIKE|LINE|COLUMN|RULES\\n|COMPLETE)\\\\b(?!')\",\n        \"name\": \"keyword.other.preprocessor.haskell\"\n      }, {\n        \"begin\": \"(?i)\\\\b(DEPRECATED|WARNING)\\\\b\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.other.preprocessor.pragma.haskell\"\n          }\n        },\n        \"end\": \"(?=#-\\\\})\",\n        \"patterns\": [{\n          \"include\": \"#string_literal\"\n        }]\n      }]\n    },\n    \"prefix_op\": {\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"name\": \"punctuation.paren.haskell\"\n          },\n          \"2\": {\n            \"name\": \"entity.name.function.infix.haskell\"\n          },\n          \"3\": {\n            \"name\": \"punctuation.paren.haskell\"\n          }\n        },\n        \"comment\": \"An operator cannot be composed entirely of '-' characters;  instead, it should be matched as a comment.\\n\",\n        \"match\": \"(?x)\\n(\\\\()\\\\s*(?!(?:--+|\\\\.\\\\.)\\\\))(\\\\#+|[\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]+(?<!\\\\#))\\\\s*(\\\\))\"\n      }]\n    },\n    \"qualifier\": {\n      \"match\": \"\\\\b(?<!')[\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*\\\\.\",\n      \"name\": \"entity.name.namespace.haskell\"\n    },\n    \"quasi_quote\": {\n      \"patterns\": [{\n        \"begin\": \"(?x)\\n(\\\\[)\\n(e|d|p)?\\n(\\\\|\\\\|?)\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.operator.quasi-quotation.begin.haskell\"\n          },\n          \"2\": {\n            \"name\": \"entity.name.quasi-quoter.haskell\"\n          },\n          \"3\": {\n            \"name\": \"keyword.operator.quasi-quotation.begin.haskell\"\n          }\n        },\n        \"end\": \"\\\\3\\\\]\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.operator.quasi-quotation.end.haskell\"\n          }\n        },\n        \"name\": \"meta.quasi-quotation.haskell\",\n        \"patterns\": [{\n          \"include\": \"$self\"\n        }]\n      }, {\n        \"begin\": \"(?x)\\n(\\\\[)\\n(t)\\n(\\\\|\\\\|?)\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.operator.quasi-quotation.begin.haskell\"\n          },\n          \"2\": {\n            \"name\": \"entity.name.quasi-quoter.haskell\"\n          },\n          \"3\": {\n            \"name\": \"keyword.operator.quasi-quotation.begin.haskell\"\n          }\n        },\n        \"end\": \"\\\\3\\\\]\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.operator.quasi-quotation.end.haskell\"\n          }\n        },\n        \"name\": \"meta.quasi-quotation.haskell\",\n        \"patterns\": [{\n          \"include\": \"#type_signature\"\n        }]\n      }, {\n        \"begin\": \"(?x)\\n(\\\\[)\\n(?:(\\\\$\\\\$)|(\\\\$))?\\n((?:[^\\\\s\\\\p{S}\\\\p{P}]|[\\\\.'_])*)\\n(\\\\|\\\\|?)\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.operator.quasi-quotation.begin.haskell\"\n          },\n          \"2\": {\n            \"name\": \"keyword.operator.prefix.double-dollar.haskell\"\n          },\n          \"3\": {\n            \"name\": \"keyword.operator.prefix.dollar.haskell\"\n          },\n          \"4\": {\n            \"name\": \"entity.name.quasi-quoter.haskell\",\n            \"patterns\": [{\n              \"include\": \"#qualifier\"\n            }]\n          },\n          \"5\": {\n            \"name\": \"keyword.operator.quasi-quotation.begin.haskell\"\n          }\n        },\n        \"end\": \"\\\\5\\\\]\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"keyword.operator.quasi-quotation.end.haskell\"\n          }\n        },\n        \"name\": \"meta.quasi-quotation.haskell\"\n      }]\n    },\n    \"record\": {\n      \"begin\": \"({)(?!-)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.brace.haskell\"\n        }\n      },\n      \"end\": \"(?<!-)(})\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.brace.haskell\"\n        }\n      },\n      \"name\": \"meta.record.haskell\",\n      \"patterns\": [{\n        \"include\": \"#comment_like\"\n      }, {\n        \"include\": \"#record_field\"\n      }]\n    },\n    \"record_decl\": {\n      \"begin\": \"({)(?!-)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.brace.haskell\"\n        }\n      },\n      \"end\": \"(?<!-)(})\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.brace.haskell\"\n        }\n      },\n      \"name\": \"meta.record.definition.haskell\",\n      \"patterns\": [{\n        \"include\": \"#comment_like\"\n      }, {\n        \"include\": \"#record_decl_field\"\n      }]\n    },\n    \"record_decl_field\": {\n      \"begin\": \"(?x)\\n(?:([\\\\p{Ll}_][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*)\\n|(\\\\()\\\\s*([\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]+)\\\\s*(\\\\))\\n)\\n\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"variable.other.member.definition.haskell\"\n        },\n        \"2\": {\n          \"name\": \"punctuation.paren.haskell\"\n        },\n        \"3\": {\n          \"name\": \"variable.other.member.definition.haskell\"\n        },\n        \"4\": {\n          \"name\": \"punctuation.paren.haskell\"\n        }\n      },\n      \"end\": \"(,)|(?=})\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.comma.haskell\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#comment_like\"\n      }, {\n        \"include\": \"#comma\"\n      }, {\n        \"include\": \"#double_colon\"\n      }, {\n        \"include\": \"#type_signature\"\n      }, {\n        \"include\": \"#record_decl_field\"\n      }]\n    },\n    \"record_field\": {\n      \"patterns\": [{\n        \"begin\": \"(?x)\\n(?:([\\\\p{Ll}\\\\p{Lu}_][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}\\\\.']*)\\n|(\\\\()\\\\s*([\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]+)\\\\s*(\\\\))\\n)\\n\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"variable.other.member.haskell\",\n            \"patterns\": [{\n              \"include\": \"#qualifier\"\n            }]\n          },\n          \"2\": {\n            \"name\": \"punctuation.paren.haskell\"\n          },\n          \"3\": {\n            \"name\": \"variable.other.member.haskell\"\n          },\n          \"4\": {\n            \"name\": \"punctuation.paren.haskell\"\n          }\n        },\n        \"end\": \"(,)|(?=})\",\n        \"endCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.comma.haskell\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#comment_like\"\n        }, {\n          \"include\": \"#comma\"\n        }, {\n          \"include\": \"$self\"\n        }]\n      }, {\n        \"include\": \"#record_wildcard\"\n      }]\n    },\n    \"record_wildcard\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"variable.other.member.wildcard.haskell\"\n        }\n      },\n      \"match\": \"(?x)\\n(?<![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n(\\\\.\\\\.)\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\"\n    },\n    \"reserved_symbol\": {\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.operator.double-dot.haskell\"\n          },\n          \"2\": {\n            \"name\": \"keyword.operator.colon.haskell\"\n          },\n          \"3\": {\n            \"name\": \"keyword.operator.eq.haskell\"\n          },\n          \"4\": {\n            \"name\": \"keyword.operator.lambda.haskell\"\n          },\n          \"5\": {\n            \"name\": \"keyword.operator.pipe.haskell\"\n          },\n          \"6\": {\n            \"name\": \"keyword.operator.arrow.left.haskell\"\n          },\n          \"7\": {\n            \"name\": \"keyword.operator.arrow.haskell\"\n          },\n          \"8\": {\n            \"name\": \"keyword.operator.arrow.left.tail.haskell\"\n          },\n          \"9\": {\n            \"name\": \"keyword.operator.arrow.left.tail.double.haskell\"\n          },\n          \"10\": {\n            \"name\": \"keyword.operator.arrow.tail.haskell\"\n          },\n          \"11\": {\n            \"name\": \"keyword.operator.arrow.tail.double.haskell\"\n          },\n          \"12\": {\n            \"name\": \"keyword.other.forall.haskell\"\n          }\n        },\n        \"match\": \"(?x)\\n(?<![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"'']])\\n(?:\\n(\\\\.\\\\.)\\n|(:)\\n|(=)\\n|(\\\\\\\\)\\n|(\\\\|)\\n|(<-|\\u2190)\\n|(->|\\u2192)\\n|(-<|\\u21A2)\\n|(-<<|\\u291B)\\n|(>-|\\u291A)\\n|(>>-|\\u291C)\\n|(\\u2200)\\n)\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"'']])\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.operator.postfix.hash.haskell\"\n          }\n        },\n        \"match\": \"(?x)\\n(?<=[\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}\\\\p{S}\\\\p{P}&&[^\\\\#,;\\\\[`{]])\\n(\\\\#+)\\n(?![\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}\\\\p{S}\\\\p{P}&&[^),;\\\\]`}]])\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.operator.infix.tight.at.haskell\"\n          }\n        },\n        \"match\": \"(?x)\\n(?<=[\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}\\\\)\\\\}\\\\]])\\n(@)\\n(?=[\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}\\\\(\\\\[\\\\{])\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.operator.prefix.tilde.haskell\"\n          },\n          \"2\": {\n            \"name\": \"keyword.operator.prefix.bang.haskell\"\n          },\n          \"3\": {\n            \"name\": \"keyword.operator.prefix.minus.haskell\"\n          },\n          \"4\": {\n            \"name\": \"keyword.operator.prefix.dollar.haskell\"\n          },\n          \"5\": {\n            \"name\": \"keyword.operator.prefix.double-dollar.haskell\"\n          }\n        },\n        \"match\": \"(?x)\\n(?<![\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}\\\\p{S}\\\\p{P}&&[^(,;\\\\[`{]])\\n(?:(~)|(!)|(-)|(\\\\$)|(\\\\$\\\\$))\\n(?=[\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}\\\\(\\\\{\\\\[])\"\n      }]\n    },\n    \"role_annotation\": {\n      \"patterns\": [{\n        \"begin\": \"^(\\\\s*)(type)\\\\s+(role)\\\\b(?!')\",\n        \"beginCaptures\": {\n          \"2\": {\n            \"name\": \"keyword.other.type.haskell\"\n          },\n          \"3\": {\n            \"name\": \"keyword.other.role.haskell\"\n          }\n        },\n        \"end\": \"(?x)\\n(?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s+\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\",\n        \"name\": \"meta.role-annotation.haskell\",\n        \"patterns\": [{\n          \"include\": \"#comment_like\"\n        }, {\n          \"include\": \"#type_constructor\"\n        }, {\n          \"captures\": {\n            \"1\": {\n              \"name\": \"keyword.other.role.$1.haskell\"\n            }\n          },\n          \"match\": \"\\\\b(?<!')(nominal|representational|phantom)\\\\b(?!')\"\n        }]\n      }]\n    },\n    \"start_type_signature\": {\n      \"patterns\": [{\n        \"begin\": \"^(\\\\s*)(::|\\u2237)(?![\\\\p{S}\\\\p{P}&&[^\\\\(,;\\\\[`{_\\\"']])\\\\s*\",\n        \"beginCaptures\": {\n          \"2\": {\n            \"name\": \"keyword.operator.double-colon.haskell\"\n          }\n        },\n        \"end\": \"(?x)\\n\\n(?=\\n\\\\#?\\\\)\\n|\\\\]\\n|,\\n|(?<!')\\\\b(in|then|else|of)\\\\b(?!')\\n|\\n(?<![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n(?:\\n(\\\\\\\\|\\u03BB)\\n|(<-|\\u2190)\\n|(=)\\n|(-<|\\u21A2)\\n|(-<<|\\u291B)\\n)\\n([(),;\\\\[\\\\]`{}_\\\"']|[^\\\\p{S}\\\\p{P}])\\n|(\\\\#|@)-\\\\}\\n\\n| (?=\\\\}|;)\\n|^(?!\\n\\\\1\\\\s*\\\\S\\n| \\\\s*\\n(?: $\\n|\\\\{-[^@]\\n|--+\\n(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]{}`_\\\"']]).*$)\\n\\n\\n)\\n)\",\n        \"name\": \"meta.type-declaration.haskell\",\n        \"patterns\": [{\n          \"include\": \"#type_signature\"\n        }]\n      }, {\n        \"begin\": \"(?<![\\\\p{S}\\\\p{P}&&[^\\\\(,;\\\\[`{_\\\"']])(::|\\u2237)(?![\\\\p{S}\\\\p{P}&&[^\\\\(,;\\\\[`{_\\\"']])\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.operator.double-colon.haskell\"\n          }\n        },\n        \"end\": \"(?x)\\n\\n(?=\\n\\\\#?\\\\)\\n|\\\\]\\n|,\\n|\\\\b(?<!')(in|then|else|of)\\\\b(?!')\\n|(\\\\#|@)-\\\\}\\n|\\n(?<![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\\n(?:\\n(\\\\\\\\|\\u03BB)\\n|(<-|\\u2190)\\n|(=)\\n|(-<|\\u21A2)\\n|(-<<|\\u291B)\\n)\\n([(),;\\\\[\\\\]`{}_\\\"']|[^\\\\p{S}\\\\p{P}])\\n\\n|(?=\\\\}|;)\\n|$\\n)\",\n        \"patterns\": [{\n          \"include\": \"#type_signature\"\n        }]\n      }]\n    },\n    \"string_literal\": {\n      \"begin\": '\"',\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.string.begin.haskell\"\n        }\n      },\n      \"end\": '\"',\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.string.end.haskell\"\n        }\n      },\n      \"name\": \"string.quoted.double.haskell\",\n      \"patterns\": [{\n        \"match\": `\\\\\\\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\\\\\\\\"'\\\\&])`,\n        \"name\": \"constant.character.escape.haskell\"\n      }, {\n        \"match\": \"\\\\\\\\o[0-7]+|\\\\\\\\x[0-9A-Fa-f]+|\\\\\\\\[0-9]+\",\n        \"name\": \"constant.character.escape.octal.haskell\"\n      }, {\n        \"match\": \"\\\\\\\\\\\\^[A-Z@\\\\[\\\\]\\\\\\\\\\\\^_]\",\n        \"name\": \"constant.character.escape.control.haskell\"\n      }, {\n        \"begin\": \"\\\\\\\\\\\\s\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"constant.character.escape.begin.haskell\"\n          }\n        },\n        \"end\": \"\\\\\\\\\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"constant.character.escape.end.haskell\"\n          }\n        },\n        \"patterns\": [{\n          \"match\": \"\\\\S+\",\n          \"name\": \"invalid.illegal.character-not-allowed-here.haskell\"\n        }]\n      }]\n    },\n    \"type_application\": {\n      \"patterns\": [{\n        \"begin\": `(?<=[\\\\s,;\\\\[\\\\]{}\"])(@)(')?(\\\\()`,\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.operator.prefix.at.haskell\"\n          },\n          \"2\": {\n            \"name\": \"keyword.operator.promotion.haskell\"\n          },\n          \"3\": {\n            \"name\": \"punctuation.paren.haskell\"\n          }\n        },\n        \"end\": \"\\\\)\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.paren.haskell\"\n          }\n        },\n        \"name\": \"meta.type-application.haskell\",\n        \"patterns\": [{\n          \"include\": \"#type_signature\"\n        }]\n      }, {\n        \"begin\": `(?<=[\\\\s,;\\\\[\\\\]{}\"])(@)(')?(\\\\[)`,\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.operator.prefix.at.haskell\"\n          },\n          \"2\": {\n            \"name\": \"keyword.operator.promotion.haskell\"\n          },\n          \"3\": {\n            \"name\": \"punctuation.bracket.haskell\"\n          }\n        },\n        \"end\": \"\\\\]\",\n        \"endCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.bracket.haskell\"\n          }\n        },\n        \"name\": \"meta.type-application.haskell\",\n        \"patterns\": [{\n          \"include\": \"#type_signature\"\n        }]\n      }, {\n        \"begin\": '(?<=[\\\\s,;\\\\[\\\\]{}\"])(@)(?=\\\\\")',\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.operator.prefix.at.haskell\"\n          }\n        },\n        \"end\": '(?<=\\\\\")',\n        \"name\": \"meta.type-application.haskell\",\n        \"patterns\": [{\n          \"include\": \"#string_literal\"\n        }]\n      }, {\n        \"begin\": `(?<=[\\\\s,;\\\\[\\\\]{}\"])(@)(?=[\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}'])`,\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.operator.prefix.at.haskell\"\n          }\n        },\n        \"end\": \"(?![\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}'])\",\n        \"name\": \"meta.type-application.haskell\",\n        \"patterns\": [{\n          \"include\": \"#type_signature\"\n        }]\n      }]\n    },\n    \"type_constructor\": {\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.operator.promotion.haskell\"\n          },\n          \"2\": {\n            \"name\": \"entity.name.namespace.haskell\"\n          },\n          \"3\": {\n            \"name\": \"storage.type.haskell\"\n          }\n        },\n        \"match\": \"(?x)\\n\\n(')?\\n\\n((?:\\\\b[\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*\\\\.)*)\\n\\n(\\\\b[\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*)\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.operator.promotion.haskell\"\n          },\n          \"2\": {\n            \"name\": \"punctuation.paren.haskell\"\n          },\n          \"3\": {\n            \"name\": \"entity.name.namespace.haskell\"\n          },\n          \"4\": {\n            \"name\": \"storage.type.operator.haskell\"\n          },\n          \"5\": {\n            \"name\": \"punctuation.paren.haskell\"\n          }\n        },\n        \"match\": \"(?x)\\n\\n(')?\\n\\n(\\\\()\\\\s*\\n\\n((?:[\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*\\\\.)*)\\n\\n([\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]+)\\n\\n\\\\s*(\\\\))\"\n      }]\n    },\n    \"type_operator\": {\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.operator.promotion.haskell\"\n          },\n          \"2\": {\n            \"name\": \"entity.name.namespace.haskell\"\n          },\n          \"3\": {\n            \"name\": \"storage.type.operator.infix.haskell\"\n          }\n        },\n        \"match\": \"(?x)\\n\\n(?:(?<!')('))?\\n\\n((?:\\\\b[\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*\\\\.)*)\\n\\n(?![#@]?-})(\\\\#+|[\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']]+(?<!\\\\#))\\n\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.operator.promotion.haskell\"\n          },\n          \"2\": {\n            \"name\": \"punctuation.backtick.haskell\"\n          },\n          \"3\": {\n            \"name\": \"entity.name.namespace.haskell\"\n          },\n          \"4\": {\n            \"name\": \"storage.type.infix.haskell\"\n          },\n          \"5\": {\n            \"name\": \"punctuation.backtick.haskell\"\n          }\n        },\n        \"match\": \"(?x)\\n\\n(')?\\n\\n(\\\\`)\\n\\n((?:[\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*\\\\.)*)\\n\\n([\\\\p{Lu}\\\\p{Lt}][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*)\\n\\n(`)\"\n      }]\n    },\n    \"type_signature\": {\n      \"patterns\": [{\n        \"include\": \"#comment_like\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.operator.promotion.haskell\"\n          },\n          \"2\": {\n            \"name\": \"punctuation.paren.haskell\"\n          },\n          \"3\": {\n            \"name\": \"punctuation.paren.haskell\"\n          }\n        },\n        \"match\": \"(')?(\\\\()\\\\s*(\\\\))\",\n        \"name\": \"support.constant.unit.haskell\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"punctuation.paren.haskell\"\n          },\n          \"2\": {\n            \"name\": \"keyword.operator.hash.haskell\"\n          },\n          \"3\": {\n            \"name\": \"keyword.operator.hash.haskell\"\n          },\n          \"4\": {\n            \"name\": \"punctuation.paren.haskell\"\n          }\n        },\n        \"match\": \"(\\\\()(#)\\\\s*(#)(\\\\))\",\n        \"name\": \"support.constant.unit.unboxed.haskell\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.operator.promotion.haskell\"\n          },\n          \"2\": {\n            \"name\": \"punctuation.paren.haskell\"\n          },\n          \"3\": {\n            \"name\": \"punctuation.paren.haskell\"\n          }\n        },\n        \"match\": \"(')?(\\\\()\\\\s*,[\\\\s,]*(\\\\))\",\n        \"name\": \"support.constant.tuple.haskell\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"punctuation.paren.haskell\"\n          },\n          \"2\": {\n            \"name\": \"keyword.operator.hash.haskell\"\n          },\n          \"3\": {\n            \"name\": \"keyword.operator.hash.haskell\"\n          },\n          \"4\": {\n            \"name\": \"punctuation.paren.haskell\"\n          }\n        },\n        \"match\": \"(\\\\()(#)\\\\s*(#)(\\\\))\",\n        \"name\": \"support.constant.unit.unboxed.haskell\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"punctuation.paren.haskell\"\n          },\n          \"2\": {\n            \"name\": \"keyword.operator.hash.haskell\"\n          },\n          \"3\": {\n            \"name\": \"keyword.operator.hash.haskell\"\n          },\n          \"4\": {\n            \"name\": \"punctuation.paren.haskell\"\n          }\n        },\n        \"match\": \"(\\\\()(#)\\\\s*,[\\\\s,]*(#)(\\\\))\",\n        \"name\": \"support.constant.tuple.unboxed.haskell\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"keyword.operator.promotion.haskell\"\n          },\n          \"2\": {\n            \"name\": \"punctuation.bracket.haskell\"\n          },\n          \"3\": {\n            \"name\": \"punctuation.bracket.haskell\"\n          }\n        },\n        \"match\": \"(')?(\\\\[)\\\\s*(\\\\])\",\n        \"name\": \"support.constant.empty-list.haskell\"\n      }, {\n        \"include\": \"#integer_literals\"\n      }, {\n        \"match\": \"(::|\\u2237)(?![\\\\p{S}\\\\p{P}&&[^(),;\\\\[\\\\]`{}_\\\"']])\",\n        \"name\": \"keyword.operator.double-colon.haskell\"\n      }, {\n        \"include\": \"#forall\"\n      }, {\n        \"match\": \"=>|\\u21D2\",\n        \"name\": \"keyword.operator.big-arrow.haskell\"\n      }, {\n        \"include\": \"#string_literal\"\n      }, {\n        \"match\": \"'[^']'\",\n        \"name\": \"invalid\"\n      }, {\n        \"include\": \"#type_application\"\n      }, {\n        \"include\": \"#reserved_symbol\"\n      }, {\n        \"include\": \"#type_operator\"\n      }, {\n        \"include\": \"#type_constructor\"\n      }, {\n        \"begin\": \"(\\\\()(#)\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.paren.haskell\"\n          },\n          \"2\": {\n            \"name\": \"keyword.operator.hash.haskell\"\n          }\n        },\n        \"end\": \"(#)(\\\\))\",\n        \"endCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.operator.hash.haskell\"\n          },\n          \"2\": {\n            \"name\": \"punctuation.paren.haskell\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#comma\"\n        }, {\n          \"include\": \"#type_signature\"\n        }]\n      }, {\n        \"begin\": \"(')?(\\\\()\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.operator.promotion.haskell\"\n          },\n          \"2\": {\n            \"name\": \"punctuation.paren.haskell\"\n          }\n        },\n        \"end\": \"(\\\\))\",\n        \"endCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.paren.haskell\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#comma\"\n        }, {\n          \"include\": \"#type_signature\"\n        }]\n      }, {\n        \"begin\": \"(')?(\\\\[)\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.operator.promotion.haskell\"\n          },\n          \"2\": {\n            \"name\": \"punctuation.bracket.haskell\"\n          }\n        },\n        \"end\": \"(\\\\])\",\n        \"endCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.bracket.haskell\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"#comma\"\n        }, {\n          \"include\": \"#type_signature\"\n        }]\n      }, {\n        \"include\": \"#type_variable\"\n      }]\n    },\n    \"type_variable\": {\n      \"match\": \"\\\\b(?<!')(?!(?:forall|deriving)\\\\b(?!'))[\\\\p{Ll}_][\\\\p{Ll}_\\\\p{Lu}\\\\p{Lt}\\\\p{Nd}']*\",\n      \"name\": \"variable.other.generic-type.haskell\"\n    },\n    \"where\": {\n      \"patterns\": [{\n        \"begin\": \"(?x)\\n(?<!')\\\\b(where)\\n\\\\s*(\\\\{)(?!-)\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.other.where.haskell\"\n          },\n          \"2\": {\n            \"name\": \"punctuation.brace.haskell\"\n          }\n        },\n        \"end\": \"(\\\\})\",\n        \"endCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.brace.haskell\"\n          }\n        },\n        \"patterns\": [{\n          \"include\": \"$self\"\n        }, {\n          \"match\": \";\",\n          \"name\": \"punctuation.semicolon.haskell\"\n        }]\n      }, {\n        \"match\": \"\\\\b(?<!')(where)\\\\b(?!')\",\n        \"name\": \"keyword.other.where.haskell\"\n      }]\n    }\n  },\n  \"scopeName\": \"source.haskell\",\n  \"aliases\": [\"hs\"]\n});\nvar haskell = [lang];\nexport { haskell as default };"],
  "mappings": "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",
  "names": []
}
