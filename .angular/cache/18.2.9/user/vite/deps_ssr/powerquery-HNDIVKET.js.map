{
  "version": 3,
  "sources": ["../../../../../../node_modules/shiki/dist/langs/powerquery.mjs"],
  "sourcesContent": ["const lang = Object.freeze({\n  \"displayName\": \"PowerQuery\",\n  \"fileTypes\": [\"pq\", \"pqm\"],\n  \"name\": \"powerquery\",\n  \"patterns\": [{\n    \"include\": \"#Noise\"\n  }, {\n    \"include\": \"#LiteralExpression\"\n  }, {\n    \"include\": \"#Keywords\"\n  }, {\n    \"include\": \"#ImplicitVariable\"\n  }, {\n    \"include\": \"#IntrinsicVariable\"\n  }, {\n    \"include\": \"#Operators\"\n  }, {\n    \"include\": \"#DotOperators\"\n  }, {\n    \"include\": \"#TypeName\"\n  }, {\n    \"include\": \"#RecordExpression\"\n  }, {\n    \"include\": \"#Punctuation\"\n  }, {\n    \"include\": \"#QuotedIdentifier\"\n  }, {\n    \"include\": \"#Identifier\"\n  }],\n  \"repository\": {\n    \"BlockComment\": {\n      \"begin\": \"/\\\\*\",\n      \"end\": \"\\\\*/\",\n      \"name\": \"comment.block.powerquery\"\n    },\n    \"DecimalNumber\": {\n      \"match\": \"(?<![\\\\d\\\\w])(\\\\d*\\\\.\\\\d+)\\\\b\",\n      \"name\": \"constant.numeric.decimal.powerquery\"\n    },\n    \"DotOperators\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.ellipsis.powerquery\"\n        },\n        \"2\": {\n          \"name\": \"keyword.operator.list.powerquery\"\n        }\n      },\n      \"match\": \"(?<!\\\\.)(?:(\\\\.\\\\.\\\\.)|(\\\\.\\\\.))(?!\\\\.)\"\n    },\n    \"EscapeSequence\": {\n      \"begin\": \"#\\\\(\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.escapesequence.begin.powerquery\"\n        }\n      },\n      \"end\": \"\\\\)\",\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.escapesequence.end.powerquery\"\n        }\n      },\n      \"name\": \"constant.character.escapesequence.powerquery\",\n      \"patterns\": [{\n        \"match\": \"(#|\\\\h{4}|\\\\h{8}|cr|lf|tab)(?:,(#|\\\\h{4}|\\\\h{8}|cr|lf|tab))*\"\n      }, {\n        \"match\": \"[^\\\\)]\",\n        \"name\": \"invalid.illegal.escapesequence.powerquery\"\n      }]\n    },\n    \"FloatNumber\": {\n      \"match\": \"(\\\\d*\\\\.)?\\\\d+(e|E)(\\\\+|-)?\\\\d+\",\n      \"name\": \"constant.numeric.float.powerquery\"\n    },\n    \"HexNumber\": {\n      \"match\": \"0(x|X)\\\\h+\",\n      \"name\": \"constant.numeric.integer.hexadecimal.powerquery\"\n    },\n    \"Identifier\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.inclusiveidentifier.powerquery\"\n        },\n        \"2\": {\n          \"name\": \"entity.name.powerquery\"\n        }\n      },\n      \"match\": \"(?x:(?<![\\\\._\\\\p{Lu}\\\\p{Ll}\\\\p{Lt}\\\\p{Lm}\\\\p{Lo}\\\\p{Nl}\\\\p{Nd}\\\\p{Pc}\\\\p{Mn}\\\\p{Mc}\\\\p{Cf}])(@?)([_\\\\p{Lu}\\\\p{Ll}\\\\p{Lt}\\\\p{Lm}\\\\p{Lo}\\\\p{Nl}][_\\\\p{Lu}\\\\p{Ll}\\\\p{Lt}\\\\p{Lm}\\\\p{Lo}\\\\p{Nl}\\\\p{Nd}\\\\p{Pc}\\\\p{Mn}\\\\p{Mc}\\\\p{Cf}]*(?:\\\\.[_\\\\p{Lu}\\\\p{Ll}\\\\p{Lt}\\\\p{Lm}\\\\p{Lo}\\\\p{Nl}][_\\\\p{Lu}\\\\p{Ll}\\\\p{Lt}\\\\p{Lm}\\\\p{Lo}\\\\p{Nl}\\\\p{Nd}\\\\p{Pc}\\\\p{Mn}\\\\p{Mc}\\\\p{Cf}])*)\\\\b)\"\n    },\n    \"ImplicitVariable\": {\n      \"match\": \"\\\\b_\\\\b\",\n      \"name\": \"keyword.operator.implicitvariable.powerquery\"\n    },\n    \"InclusiveIdentifier\": {\n      \"captures\": {\n        \"0\": {\n          \"name\": \"inclusiveidentifier.powerquery\"\n        }\n      },\n      \"match\": \"@\"\n    },\n    \"IntNumber\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"constant.numeric.integer.powerquery\"\n        }\n      },\n      \"match\": \"\\\\b(\\\\d+)\\\\b\"\n    },\n    \"IntrinsicVariable\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"constant.language.intrinsicvariable.powerquery\"\n        }\n      },\n      \"match\": \"(?<![\\\\d\\\\w])(#sections|#shared)\\\\b\"\n    },\n    \"Keywords\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.word.logical.powerquery\"\n        },\n        \"2\": {\n          \"name\": \"keyword.control.conditional.powerquery\"\n        },\n        \"3\": {\n          \"name\": \"keyword.control.exception.powerquery\"\n        },\n        \"4\": {\n          \"name\": \"keyword.other.powerquery\"\n        },\n        \"5\": {\n          \"name\": \"keyword.powerquery\"\n        }\n      },\n      \"match\": \"\\\\b(?:(and|or|not)|(if|then|else)|(try|otherwise)|(as|each|in|is|let|meta|type|error)|(section|shared))\\\\b\"\n    },\n    \"LineComment\": {\n      \"match\": \"//.*\",\n      \"name\": \"comment.line.double-slash.powerquery\"\n    },\n    \"LiteralExpression\": {\n      \"patterns\": [{\n        \"include\": \"#String\"\n      }, {\n        \"include\": \"#NumericConstant\"\n      }, {\n        \"include\": \"#LogicalConstant\"\n      }, {\n        \"include\": \"#NullConstant\"\n      }, {\n        \"include\": \"#FloatNumber\"\n      }, {\n        \"include\": \"#DecimalNumber\"\n      }, {\n        \"include\": \"#HexNumber\"\n      }, {\n        \"include\": \"#IntNumber\"\n      }]\n    },\n    \"LogicalConstant\": {\n      \"match\": \"\\\\b(true|false)\\\\b\",\n      \"name\": \"constant.language.logical.powerquery\"\n    },\n    \"Noise\": {\n      \"patterns\": [{\n        \"include\": \"#BlockComment\"\n      }, {\n        \"include\": \"#LineComment\"\n      }, {\n        \"include\": \"#Whitespace\"\n      }]\n    },\n    \"NullConstant\": {\n      \"match\": \"\\\\b(null)\\\\b\",\n      \"name\": \"constant.language.null.powerquery\"\n    },\n    \"NumericConstant\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"constant.language.numeric.float.powerquery\"\n        }\n      },\n      \"match\": \"(?<![\\\\d\\\\w])(#infinity|#nan)\\\\b\"\n    },\n    \"Operators\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.function.powerquery\"\n        },\n        \"2\": {\n          \"name\": \"keyword.operator.assignment-or-comparison.powerquery\"\n        },\n        \"3\": {\n          \"name\": \"keyword.operator.comparison.powerquery\"\n        },\n        \"4\": {\n          \"name\": \"keyword.operator.combination.powerquery\"\n        },\n        \"5\": {\n          \"name\": \"keyword.operator.arithmetic.powerquery\"\n        },\n        \"6\": {\n          \"name\": \"keyword.operator.sectionaccess.powerquery\"\n        },\n        \"7\": {\n          \"name\": \"keyword.operator.optional.powerquery\"\n        }\n      },\n      \"match\": \"(=>)|(=)|(<>|<|>|<=|>=)|(&)|(\\\\+|-|\\\\*|\\\\/)|(!)|(\\\\?)\"\n    },\n    \"Punctuation\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"punctuation.separator.powerquery\"\n        },\n        \"2\": {\n          \"name\": \"punctuation.section.parens.begin.powerquery\"\n        },\n        \"3\": {\n          \"name\": \"punctuation.section.parens.end.powerquery\"\n        },\n        \"4\": {\n          \"name\": \"punctuation.section.braces.begin.powerquery\"\n        },\n        \"5\": {\n          \"name\": \"punctuation.section.braces.end.powerquery\"\n        }\n      },\n      \"match\": \"(,)|(\\\\()|(\\\\))|({)|(})\"\n    },\n    \"QuotedIdentifier\": {\n      \"begin\": '#\"',\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.quotedidentifier.begin.powerquery\"\n        }\n      },\n      \"end\": '\"(?!\")',\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.quotedidentifier.end.powerquery\"\n        }\n      },\n      \"name\": \"entity.name.powerquery\",\n      \"patterns\": [{\n        \"match\": '\"\"',\n        \"name\": \"constant.character.escape.quote.powerquery\"\n      }, {\n        \"include\": \"#EscapeSequence\"\n      }]\n    },\n    \"RecordExpression\": {\n      \"begin\": \"\\\\[\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.section.brackets.begin.powerquery\"\n        }\n      },\n      \"contentName\": \"meta.recordexpression.powerquery\",\n      \"end\": \"\\\\]\",\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.section.brackets.end.powerquery\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"$self\"\n      }]\n    },\n    \"String\": {\n      \"begin\": '\"',\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.string.begin.powerquery\"\n        }\n      },\n      \"end\": '\"(?!\")',\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.string.end.powerquery\"\n        }\n      },\n      \"name\": \"string.quoted.double.powerquery\",\n      \"patterns\": [{\n        \"match\": '\"\"',\n        \"name\": \"constant.character.escape.quote.powerquery\"\n      }, {\n        \"include\": \"#EscapeSequence\"\n      }]\n    },\n    \"TypeName\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"storage.modifier.powerquery\"\n        },\n        \"2\": {\n          \"name\": \"storage.type.powerquery\"\n        }\n      },\n      \"match\": \"\\\\b(?:(optional|nullable)|(action|any|anynonnull|binary|date|datetime|datetimezone|duration|function|list|logical|none|null|number|record|table|text|type))\\\\b\"\n    },\n    \"Whitespace\": {\n      \"match\": \"\\\\s+\"\n    }\n  },\n  \"scopeName\": \"source.powerquery\"\n});\nvar powerquery = [lang];\nexport { powerquery as default };"],
  "mappings": "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",
  "names": []
}
