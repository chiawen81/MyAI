{
  "version": 3,
  "sources": ["../../../../../../node_modules/shiki/dist/langs/hcl.mjs"],
  "sourcesContent": ["const lang = Object.freeze({\n  \"displayName\": \"HashiCorp HCL\",\n  \"fileTypes\": [\"hcl\"],\n  \"name\": \"hcl\",\n  \"patterns\": [{\n    \"include\": \"#comments\"\n  }, {\n    \"include\": \"#attribute_definition\"\n  }, {\n    \"include\": \"#block\"\n  }, {\n    \"include\": \"#expressions\"\n  }],\n  \"repository\": {\n    \"attribute_access\": {\n      \"begin\": \"\\\\.(?!\\\\*)\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.accessor.hcl\"\n        }\n      },\n      \"comment\": \"Matches traversal attribute access such as .attr\",\n      \"end\": \"[[:alpha:]][\\\\w-]*|\\\\d*\",\n      \"endCaptures\": {\n        \"0\": {\n          \"patterns\": [{\n            \"comment\": \"Attribute name\",\n            \"match\": \"(?!null|false|true)[[:alpha:]][\\\\w-]*\",\n            \"name\": \"variable.other.member.hcl\"\n          }, {\n            \"comment\": \"Optional attribute index\",\n            \"match\": \"\\\\d+\",\n            \"name\": \"constant.numeric.integer.hcl\"\n          }]\n        }\n      }\n    },\n    \"attribute_definition\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"punctuation.section.parens.begin.hcl\"\n        },\n        \"2\": {\n          \"name\": \"variable.other.readwrite.hcl\"\n        },\n        \"3\": {\n          \"name\": \"punctuation.section.parens.end.hcl\"\n        },\n        \"4\": {\n          \"name\": \"keyword.operator.assignment.hcl\"\n        }\n      },\n      \"comment\": 'Identifier \"=\" with optional parens',\n      \"match\": \"(\\\\()?(\\\\b(?!null\\\\b|false\\\\b|true\\\\b)[[:alpha:]][[:alnum:]_-]*)(\\\\))?\\\\s*(\\\\=(?!\\\\=|\\\\>))\\\\s*\",\n      \"name\": \"variable.declaration.hcl\"\n    },\n    \"attribute_splat\": {\n      \"begin\": \"\\\\.\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.accessor.hcl\"\n        }\n      },\n      \"comment\": \"Legacy attribute-only splat\",\n      \"end\": \"\\\\*\",\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.operator.splat.hcl\"\n        }\n      }\n    },\n    \"block\": {\n      \"begin\": \"([\\\\w][\\\\-\\\\w]*)([^?\\\\r\\\\n]*)(\\\\{)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"comment\": \"Block type\",\n            \"match\": \"\\\\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\\\\b\",\n            \"name\": \"entity.name.type.hcl\"\n          }]\n        },\n        \"2\": {\n          \"patterns\": [{\n            \"comment\": \"Block label (String Literal)\",\n            \"match\": '\\\\\"[^\\\\\"\\\\r\\\\n]*\\\\\"',\n            \"name\": \"variable.other.enummember.hcl\"\n          }, {\n            \"comment\": \"Block label (Indentifier)\",\n            \"match\": \"[[:alpha:]][[:alnum:]_-]*\",\n            \"name\": \"variable.other.enummember.hcl\"\n          }]\n        },\n        \"3\": {\n          \"name\": \"punctuation.section.block.begin.hcl\"\n        }\n      },\n      \"comment\": 'This will match HCL blocks like `thing1 \"one\" \"two\" {` or `thing2 {`',\n      \"end\": \"\\\\}\",\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.section.block.end.hcl\"\n        }\n      },\n      \"name\": \"meta.block.hcl\",\n      \"patterns\": [{\n        \"include\": \"#comments\"\n      }, {\n        \"include\": \"#attribute_definition\"\n      }, {\n        \"include\": \"#expressions\"\n      }, {\n        \"include\": \"#block\"\n      }]\n    },\n    \"block_inline_comments\": {\n      \"begin\": \"/\\\\*\",\n      \"captures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.comment.hcl\"\n        }\n      },\n      \"comment\": \"Inline comments start with the /* sequence and end with the */ sequence, and may have any characters within except the ending sequence. An inline comment is considered equivalent to a whitespace sequence\",\n      \"end\": \"\\\\*/\",\n      \"name\": \"comment.block.hcl\"\n    },\n    \"brackets\": {\n      \"begin\": \"\\\\[\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.section.brackets.begin.hcl\"\n        }\n      },\n      \"end\": \"\\\\]\",\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.section.brackets.end.hcl\"\n        }\n      },\n      \"patterns\": [{\n        \"comment\": \"Splat operator\",\n        \"match\": \"\\\\*\",\n        \"name\": \"keyword.operator.splat.hcl\"\n      }, {\n        \"include\": \"#comma\"\n      }, {\n        \"include\": \"#comments\"\n      }, {\n        \"include\": \"#inline_for_expression\"\n      }, {\n        \"include\": \"#inline_if_expression\"\n      }, {\n        \"include\": \"#expressions\"\n      }, {\n        \"include\": \"#local_identifiers\"\n      }]\n    },\n    \"char_escapes\": {\n      \"comment\": \"Character Escapes\",\n      \"match\": '\\\\\\\\[nrt\"\\\\\\\\]|\\\\\\\\u(\\\\h{8}|\\\\h{4})',\n      \"name\": \"constant.character.escape.hcl\"\n    },\n    \"comma\": {\n      \"comment\": \"Commas - used in certain expressions\",\n      \"match\": \"\\\\,\",\n      \"name\": \"punctuation.separator.hcl\"\n    },\n    \"comments\": {\n      \"patterns\": [{\n        \"include\": \"#hash_line_comments\"\n      }, {\n        \"include\": \"#double_slash_line_comments\"\n      }, {\n        \"include\": \"#block_inline_comments\"\n      }]\n    },\n    \"double_slash_line_comments\": {\n      \"begin\": \"//\",\n      \"captures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.comment.hcl\"\n        }\n      },\n      \"comment\": \"Line comments start with // sequence and end with the next newline sequence. A line comment is considered equivalent to a newline sequence\",\n      \"end\": \"$\\\\n?\",\n      \"name\": \"comment.line.double-slash.hcl\"\n    },\n    \"expressions\": {\n      \"patterns\": [{\n        \"include\": \"#literal_values\"\n      }, {\n        \"include\": \"#operators\"\n      }, {\n        \"include\": \"#tuple_for_expression\"\n      }, {\n        \"include\": \"#object_for_expression\"\n      }, {\n        \"include\": \"#brackets\"\n      }, {\n        \"include\": \"#objects\"\n      }, {\n        \"include\": \"#attribute_access\"\n      }, {\n        \"include\": \"#attribute_splat\"\n      }, {\n        \"include\": \"#functions\"\n      }, {\n        \"include\": \"#parens\"\n      }]\n    },\n    \"for_expression_body\": {\n      \"patterns\": [{\n        \"comment\": \"in keyword\",\n        \"match\": \"\\\\bin\\\\b\",\n        \"name\": \"keyword.operator.word.hcl\"\n      }, {\n        \"comment\": \"if keyword\",\n        \"match\": \"\\\\bif\\\\b\",\n        \"name\": \"keyword.control.conditional.hcl\"\n      }, {\n        \"match\": \"\\\\:\",\n        \"name\": \"keyword.operator.hcl\"\n      }, {\n        \"include\": \"#expressions\"\n      }, {\n        \"include\": \"#comments\"\n      }, {\n        \"include\": \"#comma\"\n      }, {\n        \"include\": \"#local_identifiers\"\n      }]\n    },\n    \"functions\": {\n      \"begin\": \"([:\\\\-\\\\w]+)(\\\\()\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"patterns\": [{\n            \"match\": \"\\\\b[[:alpha:]][\\\\w_-]*::([[:alpha:]][\\\\w_-]*::)?[[:alpha:]][\\\\w_-]*\\\\b\",\n            \"name\": \"support.function.namespaced.hcl\"\n          }, {\n            \"match\": \"\\\\b[[:alpha:]][\\\\w_-]*\\\\b\",\n            \"name\": \"support.function.builtin.hcl\"\n          }]\n        },\n        \"2\": {\n          \"name\": \"punctuation.section.parens.begin.hcl\"\n        }\n      },\n      \"comment\": \"Built-in function calls\",\n      \"end\": \"\\\\)\",\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.section.parens.end.hcl\"\n        }\n      },\n      \"name\": \"meta.function-call.hcl\",\n      \"patterns\": [{\n        \"include\": \"#comments\"\n      }, {\n        \"include\": \"#expressions\"\n      }, {\n        \"include\": \"#comma\"\n      }]\n    },\n    \"hash_line_comments\": {\n      \"begin\": \"#\",\n      \"captures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.comment.hcl\"\n        }\n      },\n      \"comment\": \"Line comments start with # sequence and end with the next newline sequence. A line comment is considered equivalent to a newline sequence\",\n      \"end\": \"$\\\\n?\",\n      \"name\": \"comment.line.number-sign.hcl\"\n    },\n    \"hcl_type_keywords\": {\n      \"comment\": \"Type keywords known to HCL.\",\n      \"match\": \"\\\\b(any|string|number|bool|list|set|map|tuple|object)\\\\b\",\n      \"name\": \"storage.type.hcl\"\n    },\n    \"heredoc\": {\n      \"begin\": \"(\\\\<\\\\<\\\\-?)\\\\s*(\\\\w+)\\\\s*$\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.operator.heredoc.hcl\"\n        },\n        \"2\": {\n          \"name\": \"keyword.control.heredoc.hcl\"\n        }\n      },\n      \"comment\": \"String Heredoc\",\n      \"end\": \"^\\\\s*\\\\2\\\\s*$\",\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.control.heredoc.hcl\"\n        }\n      },\n      \"name\": \"string.unquoted.heredoc.hcl\",\n      \"patterns\": [{\n        \"include\": \"#string_interpolation\"\n      }]\n    },\n    \"inline_for_expression\": {\n      \"captures\": {\n        \"1\": {\n          \"name\": \"keyword.control.hcl\"\n        },\n        \"2\": {\n          \"patterns\": [{\n            \"match\": \"\\\\=\\\\>\",\n            \"name\": \"storage.type.function.hcl\"\n          }, {\n            \"include\": \"#for_expression_body\"\n          }]\n        }\n      },\n      \"match\": \"(for)\\\\b(.*)\\\\n\"\n    },\n    \"inline_if_expression\": {\n      \"begin\": \"(if)\\\\b\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.control.conditional.hcl\"\n        }\n      },\n      \"end\": \"\\\\n\",\n      \"patterns\": [{\n        \"include\": \"#expressions\"\n      }, {\n        \"include\": \"#comments\"\n      }, {\n        \"include\": \"#comma\"\n      }, {\n        \"include\": \"#local_identifiers\"\n      }]\n    },\n    \"language_constants\": {\n      \"comment\": \"Language Constants\",\n      \"match\": \"\\\\b(true|false|null)\\\\b\",\n      \"name\": \"constant.language.hcl\"\n    },\n    \"literal_values\": {\n      \"patterns\": [{\n        \"include\": \"#numeric_literals\"\n      }, {\n        \"include\": \"#language_constants\"\n      }, {\n        \"include\": \"#string_literals\"\n      }, {\n        \"include\": \"#heredoc\"\n      }, {\n        \"include\": \"#hcl_type_keywords\"\n      }]\n    },\n    \"local_identifiers\": {\n      \"comment\": \"Local Identifiers\",\n      \"match\": \"\\\\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\\\\b\",\n      \"name\": \"variable.other.readwrite.hcl\"\n    },\n    \"numeric_literals\": {\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"name\": \"punctuation.separator.exponent.hcl\"\n          }\n        },\n        \"comment\": \"Integer, no fraction, optional exponent\",\n        \"match\": \"\\\\b\\\\d+([Ee][+-]?)\\\\d+\\\\b\",\n        \"name\": \"constant.numeric.float.hcl\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"punctuation.separator.decimal.hcl\"\n          },\n          \"2\": {\n            \"name\": \"punctuation.separator.exponent.hcl\"\n          }\n        },\n        \"comment\": \"Integer, fraction, optional exponent\",\n        \"match\": \"\\\\b\\\\d+(\\\\.)\\\\d+(?:([Ee][+-]?)\\\\d+)?\\\\b\",\n        \"name\": \"constant.numeric.float.hcl\"\n      }, {\n        \"comment\": \"Integers\",\n        \"match\": \"\\\\b\\\\d+\\\\b\",\n        \"name\": \"constant.numeric.integer.hcl\"\n      }]\n    },\n    \"object_for_expression\": {\n      \"begin\": \"(\\\\{)\\\\s?(for)\\\\b\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.section.braces.begin.hcl\"\n        },\n        \"2\": {\n          \"name\": \"keyword.control.hcl\"\n        }\n      },\n      \"end\": \"\\\\}\",\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.section.braces.end.hcl\"\n        }\n      },\n      \"patterns\": [{\n        \"match\": \"\\\\=\\\\>\",\n        \"name\": \"storage.type.function.hcl\"\n      }, {\n        \"include\": \"#for_expression_body\"\n      }]\n    },\n    \"object_key_values\": {\n      \"patterns\": [{\n        \"include\": \"#comments\"\n      }, {\n        \"include\": \"#literal_values\"\n      }, {\n        \"include\": \"#operators\"\n      }, {\n        \"include\": \"#tuple_for_expression\"\n      }, {\n        \"include\": \"#object_for_expression\"\n      }, {\n        \"include\": \"#heredoc\"\n      }, {\n        \"include\": \"#functions\"\n      }]\n    },\n    \"objects\": {\n      \"begin\": \"\\\\{\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.section.braces.begin.hcl\"\n        }\n      },\n      \"end\": \"\\\\}\",\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.section.braces.end.hcl\"\n        }\n      },\n      \"name\": \"meta.braces.hcl\",\n      \"patterns\": [{\n        \"include\": \"#comments\"\n      }, {\n        \"include\": \"#objects\"\n      }, {\n        \"include\": \"#inline_for_expression\"\n      }, {\n        \"include\": \"#inline_if_expression\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"meta.mapping.key.hcl variable.other.readwrite.hcl\"\n          },\n          \"2\": {\n            \"name\": \"keyword.operator.assignment.hcl\"\n          }\n        },\n        \"comment\": \"Literal, named object key\",\n        \"match\": \"\\\\b((?!null|false|true)[[:alpha:]][[:alnum:]_-]*)\\\\s*(\\\\=(?!=))\\\\s*\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"meta.mapping.key.hcl string.quoted.double.hcl\"\n          },\n          \"2\": {\n            \"name\": \"punctuation.definition.string.begin.hcl\"\n          },\n          \"3\": {\n            \"name\": \"punctuation.definition.string.end.hcl\"\n          },\n          \"4\": {\n            \"name\": \"keyword.operator.hcl\"\n          }\n        },\n        \"comment\": \"String object key\",\n        \"match\": '^\\\\s*((\").*(\"))\\\\s*(\\\\=)\\\\s*'\n      }, {\n        \"begin\": \"^\\\\s*\\\\(\",\n        \"beginCaptures\": {\n          \"0\": {\n            \"name\": \"punctuation.section.parens.begin.hcl\"\n          }\n        },\n        \"comment\": \"Computed object key (any expression between parens)\",\n        \"end\": \"(\\\\))\\\\s*(=|:)\\\\s*\",\n        \"endCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.section.parens.end.hcl\"\n          },\n          \"2\": {\n            \"name\": \"keyword.operator.hcl\"\n          }\n        },\n        \"name\": \"meta.mapping.key.hcl\",\n        \"patterns\": [{\n          \"include\": \"#attribute_access\"\n        }, {\n          \"include\": \"#attribute_splat\"\n        }]\n      }, {\n        \"include\": \"#object_key_values\"\n      }]\n    },\n    \"operators\": {\n      \"patterns\": [{\n        \"match\": \"\\\\>\\\\=\",\n        \"name\": \"keyword.operator.hcl\"\n      }, {\n        \"match\": \"\\\\<\\\\=\",\n        \"name\": \"keyword.operator.hcl\"\n      }, {\n        \"match\": \"\\\\=\\\\=\",\n        \"name\": \"keyword.operator.hcl\"\n      }, {\n        \"match\": \"\\\\!\\\\=\",\n        \"name\": \"keyword.operator.hcl\"\n      }, {\n        \"match\": \"\\\\+\",\n        \"name\": \"keyword.operator.arithmetic.hcl\"\n      }, {\n        \"match\": \"\\\\-\",\n        \"name\": \"keyword.operator.arithmetic.hcl\"\n      }, {\n        \"match\": \"\\\\*\",\n        \"name\": \"keyword.operator.arithmetic.hcl\"\n      }, {\n        \"match\": \"\\\\/\",\n        \"name\": \"keyword.operator.arithmetic.hcl\"\n      }, {\n        \"match\": \"\\\\%\",\n        \"name\": \"keyword.operator.arithmetic.hcl\"\n      }, {\n        \"match\": \"\\\\&\\\\&\",\n        \"name\": \"keyword.operator.logical.hcl\"\n      }, {\n        \"match\": \"\\\\|\\\\|\",\n        \"name\": \"keyword.operator.logical.hcl\"\n      }, {\n        \"match\": \"\\\\!\",\n        \"name\": \"keyword.operator.logical.hcl\"\n      }, {\n        \"match\": \"\\\\>\",\n        \"name\": \"keyword.operator.hcl\"\n      }, {\n        \"match\": \"\\\\<\",\n        \"name\": \"keyword.operator.hcl\"\n      }, {\n        \"match\": \"\\\\?\",\n        \"name\": \"keyword.operator.hcl\"\n      }, {\n        \"match\": \"\\\\.\\\\.\\\\.\",\n        \"name\": \"keyword.operator.hcl\"\n      }, {\n        \"match\": \"\\\\:\",\n        \"name\": \"keyword.operator.hcl\"\n      }, {\n        \"match\": \"\\\\=\\\\>\",\n        \"name\": \"keyword.operator.hcl\"\n      }]\n    },\n    \"parens\": {\n      \"begin\": \"\\\\(\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.section.parens.begin.hcl\"\n        }\n      },\n      \"comment\": \"Parens - matched *after* function syntax\",\n      \"end\": \"\\\\)\",\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.section.parens.end.hcl\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#comments\"\n      }, {\n        \"include\": \"#expressions\"\n      }]\n    },\n    \"string_interpolation\": {\n      \"begin\": \"(?<![%$])([%$]{)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"keyword.other.interpolation.begin.hcl\"\n        }\n      },\n      \"comment\": \"String interpolation\",\n      \"end\": \"\\\\}\",\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"keyword.other.interpolation.end.hcl\"\n        }\n      },\n      \"name\": \"meta.interpolation.hcl\",\n      \"patterns\": [{\n        \"comment\": \"Trim left whitespace\",\n        \"match\": \"\\\\~\\\\s\",\n        \"name\": \"keyword.operator.template.left.trim.hcl\"\n      }, {\n        \"comment\": \"Trim right whitespace\",\n        \"match\": \"\\\\s\\\\~\",\n        \"name\": \"keyword.operator.template.right.trim.hcl\"\n      }, {\n        \"comment\": \"if/else/endif and for/in/endfor directives\",\n        \"match\": \"\\\\b(if|else|endif|for|in|endfor)\\\\b\",\n        \"name\": \"keyword.control.hcl\"\n      }, {\n        \"include\": \"#expressions\"\n      }, {\n        \"include\": \"#local_identifiers\"\n      }]\n    },\n    \"string_literals\": {\n      \"begin\": '\"',\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.string.begin.hcl\"\n        }\n      },\n      \"comment\": \"Strings\",\n      \"end\": '\"',\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.string.end.hcl\"\n        }\n      },\n      \"name\": \"string.quoted.double.hcl\",\n      \"patterns\": [{\n        \"include\": \"#string_interpolation\"\n      }, {\n        \"include\": \"#char_escapes\"\n      }]\n    },\n    \"tuple_for_expression\": {\n      \"begin\": \"(\\\\[)\\\\s?(for)\\\\b\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.section.brackets.begin.hcl\"\n        },\n        \"2\": {\n          \"name\": \"keyword.control.hcl\"\n        }\n      },\n      \"end\": \"\\\\]\",\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.section.brackets.end.hcl\"\n        }\n      },\n      \"patterns\": [{\n        \"include\": \"#for_expression_body\"\n      }]\n    }\n  },\n  \"scopeName\": \"source.hcl\"\n});\nvar hcl = [lang];\nexport { hcl as default };"],
  "mappings": "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",
  "names": []
}
