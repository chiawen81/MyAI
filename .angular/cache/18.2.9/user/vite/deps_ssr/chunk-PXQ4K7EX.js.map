{
  "version": 3,
  "sources": ["../../../../../../node_modules/shiki/dist/langs/clojure.mjs"],
  "sourcesContent": ["const lang = Object.freeze({\n  \"displayName\": \"Clojure\",\n  \"name\": \"clojure\",\n  \"patterns\": [{\n    \"include\": \"#comment\"\n  }, {\n    \"include\": \"#shebang-comment\"\n  }, {\n    \"include\": \"#quoted-sexp\"\n  }, {\n    \"include\": \"#sexp\"\n  }, {\n    \"include\": \"#keyfn\"\n  }, {\n    \"include\": \"#string\"\n  }, {\n    \"include\": \"#vector\"\n  }, {\n    \"include\": \"#set\"\n  }, {\n    \"include\": \"#map\"\n  }, {\n    \"include\": \"#regexp\"\n  }, {\n    \"include\": \"#var\"\n  }, {\n    \"include\": \"#constants\"\n  }, {\n    \"include\": \"#dynamic-variables\"\n  }, {\n    \"include\": \"#metadata\"\n  }, {\n    \"include\": \"#namespace-symbol\"\n  }, {\n    \"include\": \"#symbol\"\n  }],\n  \"repository\": {\n    \"comment\": {\n      \"begin\": \"(?<!\\\\\\\\);\",\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.comment.clojure\"\n        }\n      },\n      \"end\": \"$\",\n      \"name\": \"comment.line.semicolon.clojure\"\n    },\n    \"constants\": {\n      \"patterns\": [{\n        \"match\": \"(nil)(?=(\\\\s|\\\\)|\\\\]|\\\\}))\",\n        \"name\": \"constant.language.nil.clojure\"\n      }, {\n        \"match\": \"(true|false)\",\n        \"name\": \"constant.language.boolean.clojure\"\n      }, {\n        \"match\": \"(##(?:Inf|-Inf|NaN))\",\n        \"name\": \"constant.numeric.symbol.clojure\"\n      }, {\n        \"match\": \"([-+]?\\\\d+/\\\\d+)\",\n        \"name\": \"constant.numeric.ratio.clojure\"\n      }, {\n        \"match\": \"([-+]?(?:(?:3[0-6])|(?:[12]\\\\d)|[2-9])[rR][0-9A-Za-z]+N?)\",\n        \"name\": \"constant.numeric.arbitrary-radix.clojure\"\n      }, {\n        \"match\": \"([-+]?0[xX][0-9a-fA-F]+N?)\",\n        \"name\": \"constant.numeric.hexadecimal.clojure\"\n      }, {\n        \"match\": \"([-+]?0[0-7]+N?)\",\n        \"name\": \"constant.numeric.octal.clojure\"\n      }, {\n        \"match\": \"([-+]?[0-9]+(?:(\\\\.|(?=[eEM]))[0-9]*([eE][-+]?[0-9]+)?)M?)\",\n        \"name\": \"constant.numeric.double.clojure\"\n      }, {\n        \"match\": \"([-+]?\\\\d+N?)\",\n        \"name\": \"constant.numeric.long.clojure\"\n      }, {\n        \"include\": \"#keyword\"\n      }]\n    },\n    \"dynamic-variables\": {\n      \"match\": \"\\\\*[\\\\w\\\\.\\\\-\\\\_\\\\:\\\\+\\\\=\\\\>\\\\<\\\\!\\\\?\\\\d]+\\\\*\",\n      \"name\": \"meta.symbol.dynamic.clojure\"\n    },\n    \"keyfn\": {\n      \"patterns\": [{\n        \"match\": \"(?<=(\\\\s|\\\\(|\\\\[|\\\\{))(if(-[-\\\\p{Ll}\\\\?]*)?|when(-[-\\\\p{Ll}]*)?|for(-[-\\\\p{Ll}]*)?|cond|do|let(-[-\\\\p{Ll}\\\\?]*)?|binding|loop|recur|fn|throw[\\\\p{Ll}\\\\-]*|try|catch|finally|([\\\\p{Ll}]*case))(?=(\\\\s|\\\\)|\\\\]|\\\\}))\",\n        \"name\": \"storage.control.clojure\"\n      }, {\n        \"match\": \"(?<=(\\\\s|\\\\(|\\\\[|\\\\{))(declare-?|(in-)?ns|import|use|require|load|compile|(def[\\\\p{Ll}\\\\-]*))(?=(\\\\s|\\\\)|\\\\]|\\\\}))\",\n        \"name\": \"keyword.control.clojure\"\n      }]\n    },\n    \"keyword\": {\n      \"match\": \"(?<=(\\\\s|\\\\(|\\\\[|\\\\{)):[\\\\w\\\\#\\\\.\\\\-\\\\_\\\\:\\\\+\\\\=\\\\>\\\\<\\\\/\\\\!\\\\?\\\\*]+(?=(\\\\s|\\\\)|\\\\]|\\\\}|\\\\,))\",\n      \"name\": \"constant.keyword.clojure\"\n    },\n    \"map\": {\n      \"begin\": \"(\\\\{)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.section.map.begin.clojure\"\n        }\n      },\n      \"end\": \"(\\\\}(?=[\\\\}\\\\]\\\\)\\\\s]*(?:;|$)))|(\\\\})\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.section.map.end.trailing.clojure\"\n        },\n        \"2\": {\n          \"name\": \"punctuation.section.map.end.clojure\"\n        }\n      },\n      \"name\": \"meta.map.clojure\",\n      \"patterns\": [{\n        \"include\": \"$self\"\n      }]\n    },\n    \"metadata\": {\n      \"patterns\": [{\n        \"begin\": \"(\\\\^\\\\{)\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.section.metadata.map.begin.clojure\"\n          }\n        },\n        \"end\": \"(\\\\}(?=[\\\\}\\\\]\\\\)\\\\s]*(?:;|$)))|(\\\\})\",\n        \"endCaptures\": {\n          \"1\": {\n            \"name\": \"punctuation.section.metadata.map.end.trailing.clojure\"\n          },\n          \"2\": {\n            \"name\": \"punctuation.section.metadata.map.end.clojure\"\n          }\n        },\n        \"name\": \"meta.metadata.map.clojure\",\n        \"patterns\": [{\n          \"include\": \"$self\"\n        }]\n      }, {\n        \"begin\": \"(\\\\^)\",\n        \"end\": \"(\\\\s)\",\n        \"name\": \"meta.metadata.simple.clojure\",\n        \"patterns\": [{\n          \"include\": \"#keyword\"\n        }, {\n          \"include\": \"$self\"\n        }]\n      }]\n    },\n    \"namespace-symbol\": {\n      \"patterns\": [{\n        \"captures\": {\n          \"1\": {\n            \"name\": \"meta.symbol.namespace.clojure\"\n          }\n        },\n        \"match\": \"([\\\\p{L}\\\\.\\\\-\\\\_\\\\+\\\\=\\\\>\\\\<\\\\!\\\\?\\\\*][\\\\w\\\\.\\\\-\\\\_\\\\:\\\\+\\\\=\\\\>\\\\<\\\\!\\\\?\\\\*\\\\d]*)/\"\n      }]\n    },\n    \"quoted-sexp\": {\n      \"begin\": \"(['``]\\\\()\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.section.expression.begin.clojure\"\n        }\n      },\n      \"end\": \"(\\\\))$|(\\\\)(?=[\\\\}\\\\]\\\\)\\\\s]*(?:;|$)))|(\\\\))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.section.expression.end.trailing.clojure\"\n        },\n        \"2\": {\n          \"name\": \"punctuation.section.expression.end.trailing.clojure\"\n        },\n        \"3\": {\n          \"name\": \"punctuation.section.expression.end.clojure\"\n        }\n      },\n      \"name\": \"meta.quoted-expression.clojure\",\n      \"patterns\": [{\n        \"include\": \"$self\"\n      }]\n    },\n    \"regexp\": {\n      \"begin\": '#\"',\n      \"beginCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.regexp.begin.clojure\"\n        }\n      },\n      \"end\": '\"',\n      \"endCaptures\": {\n        \"0\": {\n          \"name\": \"punctuation.definition.regexp.end.clojure\"\n        }\n      },\n      \"name\": \"string.regexp.clojure\",\n      \"patterns\": [{\n        \"include\": \"#regexp_escaped_char\"\n      }]\n    },\n    \"regexp_escaped_char\": {\n      \"match\": \"\\\\\\\\.\",\n      \"name\": \"constant.character.escape.clojure\"\n    },\n    \"set\": {\n      \"begin\": \"(\\\\#\\\\{)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.section.set.begin.clojure\"\n        }\n      },\n      \"end\": \"(\\\\}(?=[\\\\}\\\\]\\\\)\\\\s]*(?:;|$)))|(\\\\})\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.section.set.end.trailing.clojure\"\n        },\n        \"2\": {\n          \"name\": \"punctuation.section.set.end.clojure\"\n        }\n      },\n      \"name\": \"meta.set.clojure\",\n      \"patterns\": [{\n        \"include\": \"$self\"\n      }]\n    },\n    \"sexp\": {\n      \"begin\": \"(\\\\()\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.section.expression.begin.clojure\"\n        }\n      },\n      \"end\": \"(\\\\))$|(\\\\)(?=[\\\\}\\\\]\\\\)\\\\s]*(?:;|$)))|(\\\\))\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.section.expression.end.trailing.clojure\"\n        },\n        \"2\": {\n          \"name\": \"punctuation.section.expression.end.trailing.clojure\"\n        },\n        \"3\": {\n          \"name\": \"punctuation.section.expression.end.clojure\"\n        }\n      },\n      \"name\": \"meta.expression.clojure\",\n      \"patterns\": [{\n        \"begin\": \"(?<=\\\\()(ns|declare|def[\\\\w\\\\d._:+=><!?*-]*|[\\\\w._:+=><!?*-][\\\\w\\\\d._:+=><!?*-]*/def[\\\\w\\\\d._:+=><!?*-]*)\\\\s+\",\n        \"beginCaptures\": {\n          \"1\": {\n            \"name\": \"keyword.control.clojure\"\n          }\n        },\n        \"end\": \"(?=\\\\))\",\n        \"name\": \"meta.definition.global.clojure\",\n        \"patterns\": [{\n          \"include\": \"#metadata\"\n        }, {\n          \"include\": \"#dynamic-variables\"\n        }, {\n          \"match\": \"([\\\\p{L}\\\\.\\\\-\\\\_\\\\+\\\\=\\\\>\\\\<\\\\!\\\\?\\\\*][\\\\w\\\\.\\\\-\\\\_\\\\:\\\\+\\\\=\\\\>\\\\<\\\\!\\\\?\\\\*\\\\d]*)\",\n          \"name\": \"entity.global.clojure\"\n        }, {\n          \"include\": \"$self\"\n        }]\n      }, {\n        \"include\": \"#keyfn\"\n      }, {\n        \"include\": \"#constants\"\n      }, {\n        \"include\": \"#vector\"\n      }, {\n        \"include\": \"#map\"\n      }, {\n        \"include\": \"#set\"\n      }, {\n        \"include\": \"#sexp\"\n      }, {\n        \"captures\": {\n          \"1\": {\n            \"name\": \"entity.name.function.clojure\"\n          }\n        },\n        \"match\": \"(?<=\\\\()(.+?)(?=\\\\s|\\\\))\",\n        \"patterns\": [{\n          \"include\": \"$self\"\n        }]\n      }, {\n        \"include\": \"$self\"\n      }]\n    },\n    \"shebang-comment\": {\n      \"begin\": \"^(#!)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.comment.shebang.clojure\"\n        }\n      },\n      \"end\": \"$\",\n      \"name\": \"comment.line.shebang.clojure\"\n    },\n    \"string\": {\n      \"begin\": '(?<!\\\\\\\\)(\")',\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.string.begin.clojure\"\n        }\n      },\n      \"end\": '(\")',\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.definition.string.end.clojure\"\n        }\n      },\n      \"name\": \"string.quoted.double.clojure\",\n      \"patterns\": [{\n        \"match\": \"\\\\\\\\.\",\n        \"name\": \"constant.character.escape.clojure\"\n      }]\n    },\n    \"symbol\": {\n      \"patterns\": [{\n        \"match\": \"([\\\\p{L}\\\\.\\\\-\\\\_\\\\+\\\\=\\\\>\\\\<\\\\!\\\\?\\\\*][\\\\w\\\\.\\\\-\\\\_\\\\:\\\\+\\\\=\\\\>\\\\<\\\\!\\\\?\\\\*\\\\d]*)\",\n        \"name\": \"meta.symbol.clojure\"\n      }]\n    },\n    \"var\": {\n      \"match\": \"(?<=(\\\\s|\\\\(|\\\\[|\\\\{)\\\\#)'[\\\\w\\\\.\\\\-\\\\_\\\\:\\\\+\\\\=\\\\>\\\\<\\\\/\\\\!\\\\?\\\\*]+(?=(\\\\s|\\\\)|\\\\]|\\\\}))\",\n      \"name\": \"meta.var.clojure\"\n    },\n    \"vector\": {\n      \"begin\": \"(\\\\[)\",\n      \"beginCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.section.vector.begin.clojure\"\n        }\n      },\n      \"end\": \"(\\\\](?=[\\\\}\\\\]\\\\)\\\\s]*(?:;|$)))|(\\\\])\",\n      \"endCaptures\": {\n        \"1\": {\n          \"name\": \"punctuation.section.vector.end.trailing.clojure\"\n        },\n        \"2\": {\n          \"name\": \"punctuation.section.vector.end.clojure\"\n        }\n      },\n      \"name\": \"meta.vector.clojure\",\n      \"patterns\": [{\n        \"include\": \"$self\"\n      }]\n    }\n  },\n  \"scopeName\": \"source.clojure\",\n  \"aliases\": [\"clj\"]\n});\nvar clojure = [lang];\nexport { clojure as default };"],
  "mappings": "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",
  "names": []
}
